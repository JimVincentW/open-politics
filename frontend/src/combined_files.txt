app/page.tsx
'use client'
import React, { useState, useEffect, useRef } from 'react';
import dynamic from 'next/dynamic';
import axios from 'axios';
import { motion } from 'framer-motion';
import { useToast } from '@/components/ui/use-toast';
import { ThemeProvider } from './layout';
import { Button } from '@/components/ui/button';
import Search from '../components/Search';
import WikipediaView from '@/components/WikipediaView';
import LeaderInfo from '../components/LeaderInfo';
import Results from '../components/Results';
import { IssueAreas } from '../components/IssueAreas';
import { OpenAPI } from 'src/client';
import CountryDetailPanel from '../components/CountryDetailPanel';
import { MoveLeftIcon } from 'lucide-react';
import { Map } from 'lucide-react';
import { FileSearch2 } from 'lucide-react';
import { CircleX } from 'lucide-react';

const Globe = dynamic(() => import('../components/Globe'), { ssr: false });

OpenAPI.BASE = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000'
OpenAPI.TOKEN = async () => {
  return localStorage.getItem("access_token") || ""
}

const HomePage: React.FC = () => {
  const geojsonUrl = 'http://dev.open-politics.org/api/v1/countries/geojson/';
  const [results, setResults] = useState(null);
  const [summary, setSummary] = useState<string>('');
  const [articleContent, setArticleContent] = useState<string>('');
  const [country, setCountry] = useState<string | null>(null);
  const [leaderInfo, setLeaderInfo] = useState<any | null>(null);
  const [currentTime, setCurrentTime] = useState<string>(new Date().toLocaleString());
  const [isBrowseMode, setIsBrowseMode] = useState(true);
  const globeRef = useRef<any>(null);
  const [legislativeData, setLegislativeData] = useState([]);
  const [economicData, setEconomicData] = useState([]);
  const [isVisible, setIsVisible] = useState(false); // Added state for visibility
  const [windowWidth, setWindowWidth] = useState<number>(0); // Added state for window width

  const { toast } = useToast();

  useEffect(() => {
    if (country) {
      const fetchLeaderInfo = async () => {
        try {
          console.log(`Fetching leader info for country: ${country}`);
          const response = await axios.get(`http://dev.open-politics.org/api/v1/countries/leaders/${country}`);
          console.log('Leader info response:', response.data);
          setLeaderInfo(response.data);
        } catch (error) {
          console.error('Error fetching leader info:', error);
          toast({
            title: "Error",
            description: `Failed to fetch leader info for ${country}. Please try again later.`,
          });
        }
      };

      fetchLeaderInfo();
    }
  }, [country, toast]);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date().toLocaleString());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleCountryClick = async (countryName: string) => {
    setCountry(countryName);
    setIsVisible(true);
  };

  const handleSearch = (results: any) => {
    setResults(results);
    setIsBrowseMode(false);
    toast({
      title: "Search Completed",
      description: "Your search results are now available.",
    });
  };
  const handleCountryZoom = (latitude: number, longitude: number, countryName: string) => {
  if (globeRef.current) {
    globeRef.current.zoomToCountry(latitude, longitude, countryName);
  }
};

  const handleSummary = (summary: string) => {
    setSummary(summary);
  }

  const toggleMode = () => {
    setIsBrowseMode(!isBrowseMode);
  };

  const loadGeoJSON = () => {
    if (globeRef.current) {
      globeRef.current.loadGeoJSON();
    }
  };

  const getWindowWidth = () => {
    if (typeof window !== 'undefined') {
      return window.innerWidth;
    }
    return 0;
  };
  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
      <div className="container relative mx-auto px-4 mt-0 min-h-screen max-w-full max-h-full overflow-x-hidde py-2">
        <div className="background"></div> {/* Background div */}
        <h1 suppressHydrationWarning className="my-0 pt-2 text-3xl text-left ml-8 z-52">{currentTime}</h1>

        {/* Globe */}
        <motion.div
          id="globe-container"
          className="relative"
          initial={{ top: '10%', left: '50%', transform: 'translateX(-50%)' }}
          animate={getWindowWidth() > 768 ? {
            // desktop view
            opacity: 1,
            top: isBrowseMode ? '50%' : '20%',
            left: isBrowseMode ? '50%' : '50%',
            transform: 'translate(-50%, -50%)',
            position: 'absolute',
            height: isBrowseMode ? '100%' : '50%',
            width: isBrowseMode ? '100%' : '10%', // Adjust width for detail mode
            zIndex: isBrowseMode ? 0 : 0,
          } : {
            // mobile view
            opacity: 1,
            top: isBrowseMode ? '50%' : '10%',
            left: isBrowseMode ? '50%' : '50%',
            transform: 'translate(-50%, -50%)',
            position: 'absolute',
            height: isBrowseMode ? '100%' : '50%',
            width: isBrowseMode ? '100%' : '30%'
          }}
          transition={{ duration: 0.5 }}
        >
          <Globe
          ref={globeRef}
          geojsonUrl={geojsonUrl}
          setArticleContent={setArticleContent}
          onCountryClick={handleCountryClick}
          isBrowseMode={isBrowseMode}
          toggleMode={toggleMode}
          setLegislativeData={setLegislativeData}
          setEconomicData={setEconomicData}
          onCountryZoom={handleCountryZoom}
        />

        </motion.div>
        
        {/* Search */}
        <motion.div
          className="absolute w-full"
          initial={{ top: 'calc(50% + 250px)', left: '50%', transform: 'translate(-50%, 0)' }}
          animate={getWindowWidth() > 768 ? {
            // desktop view
            top: isBrowseMode ? 'calc(100% - 200px)' : '30%',
            left: isBrowseMode ? 'calc(50% + 1/6 * 100%)' : 'calc(50% + 1/6 * 100%)',
            transform: 'translate(-50%, -50%)', // Centers both horizontally and vertically
            height: isBrowseMode ? '700px' : '50px', // Adjust height based on mode
            width: isBrowseMode ? '100%' : '100%' // Adjust width based on mode
          } : {
            // mobile view
            top: isBrowseMode ? 'calc(110%)' : 'calc(35%)',
            left: isBrowseMode ? '50%' : '50%',
            transform: 'translate(-50%, -50%)', // Centers both horizontally and vertically
            height: isBrowseMode ? '700px' : '50px', // Adjust height based on mode
            width: isBrowseMode ? '100%' : '100%' // Adjust width based on mode
          }}
          transition={{ duration: 0.5 }}
        >
          <Search setResults={handleSearch} setCountry={setCountry} globeRef={globeRef} setSummary={handleSummary} />
        </motion.div>

        {/* Results */}
        <motion.div
          className="absolute w-full"
          initial={{ display: 'none' }}
          animate={getWindowWidth() > 768 ? {
            // desktop viewq
            top: isBrowseMode ? 'calc(50% + 300px)' : 'calc(50%)',
            left: isBrowseMode ? 'calc(50% + 1/6 * 100%)' : 'calc(50% + 1/6 * 100%)',
            transform: isBrowseMode ? 'translate(-50%, 0)' : 'translate(-50%, 0)',
            height: isBrowseMode ? '0px' : '100%',
            width: isBrowseMode ? '100%' : '100%',
            display: isBrowseMode ? 'none' : 'block',
          } : {
            // mobile view
            position: 'absolute',
            top: isBrowseMode ? '0px' : 'calc(45%)',
            left: isBrowseMode ? '50%' : '50%',
            transform: isBrowseMode ? 'translate(-50%, 0)' : 'translate(-50%, 0)',
            height: isBrowseMode ? '0px' : '100%',
            width: isBrowseMode ? '100%' : '100%',
            display: isBrowseMode ? 'none' : 'block',
          }}
          transition={{ duration: 0.5 }}
        >
          <Results results={results} summary={summary} />
        </motion.div>

        {/* Country detail panel */}
        <motion.div
        className={`relative bg-sky-400 dark:bg-[#373737] mt-2 bg-opacity-20 dark:bg-opacity-40 backdrop backdrop-blur-md dark:backdrop-blur-2xl
          ${isVisible ? 'z-50' : 'z-10'}
          ${isVisible ? 'rounded-lg' : 'opacity-10'}
          `}
        initial={{ bottom: '0', display: 'block' }}
        animate={getWindowWidth() > 768 ? {
          // desktop view
          bottom: isVisible ? '0' : 'auto',
          top: isVisible ? 'auto' : 'calc(100vh - 200px)',
          left: '50%',
          transform: 'translate(-50%, 0)',
          height: '100%',
          width: isBrowseMode ? '50%' : '100%',
          display: isVisible ? 'block' : 'none', // Control display here
        } : {
          // mobile view
          display: isVisible ? 'block' : 'none',
          bottom: isVisible ? '0' : 'auto',
          top: isVisible ? 'auto' : 'calc(0vh)',
          left: '50%',
          transform: 'translate(-50%, 0)',
          height: '100%',
          width: isBrowseMode ? '100%' : '100%',
        }}
        transition={{ duration: 0.5 }}
      >
        {/* <Button onClick={toggleVisibility} className="w-16 border-none">
          {isVisible ? <CircleX /> : 'Show Country Infos'}
        </Button> */}
        <CountryDetailPanel
          articleContent={articleContent}
          legislativeData={legislativeData}
          economicData={economicData}
          leaderInfo={leaderInfo}
          isVisible={isVisible}
          toggleVisibility={toggleVisibility}
        />
      </motion.div>

        {/* Toggle button */}
        <motion.div
          className="relative"
          initial={{ }}
          animate={getWindowWidth() > 768 ? {
            // desktop view
            opacity: isBrowseMode ? 1 : 0.5,
            top: isBrowseMode ? '45%' : '20%',
            left: isBrowseMode ? '50%' : '50%',
            transform: 'translate(-50%, -50%)',
            position: 'absolute',
          } : {
            // mobile view
            opacity: isBrowseMode ? 1 : 0.5,
            top: isBrowseMode ? '60%' : '20%',
            left: isBrowseMode ? '50%' : '50%',
            transform: 'translate(-50%, -50%)',
            position: 'absolute',
          }}
          transition={{ duration: 0.5 }}
        >
        <Button onClick={toggleMode} className="z-50 dark:invert bg-sky-300 dark:bg-sky-700">
            {isBrowseMode ? <FileSearch2 className="dark:invert" /> : <Map className="dark:invert" />}
          </Button>
        </motion.div>
      </div>
    </ThemeProvider>
  );
};

export default HomePage;components/Globe.tsx
import React, { useLayoutEffect, useRef, useState, useEffect, useImperativeHandle, forwardRef } from 'react';
import * as am5 from "@amcharts/amcharts5";
import * as am5map from "@amcharts/amcharts5/map";
import am5geodata_worldLow from "@amcharts/amcharts5-geodata/worldLow";
import am5themes_Animated from "@amcharts/amcharts5/themes/Animated";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import axios from 'axios';
import { Compass } from 'lucide-react';
import { RotateCcw } from 'lucide-react';
import { Play } from 'lucide-react';
import { Pause } from 'lucide-react';
import { Cog } from 'lucide-react';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

interface GlobeProps {
  geojsonUrl: string;
  setArticleContent: (content: string) => void;
  onCountryClick: (country: string) => void;
  isBrowseMode: boolean;
  toggleMode: () => void;
  setLegislativeData: (data: any) => void;
  setEconomicData: (data: any) => void;
  onCountryZoom: (latitude: number, longitude: number, countryName: string) => void;
}

const Globe = forwardRef<{}, GlobeProps>(({ geojsonUrl, setArticleContent, onCountryClick, isBrowseMode, toggleMode, setLegislativeData, setEconomicData, onCountryZoom }, ref) => {
  const chartRef = useRef<am5.Root | null>(null);
  const polygonSeriesRef = useRef<am5map.MapPolygonSeries | null>(null);
  const pointSeriesRef = useRef<am5map.MapPointSeries | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [isRotating, setIsRotating] = useState(true);
  const rotationAnimationRef = useRef<am5.Animation | null>(null);
  const chartInstanceRef = useRef<am5map.MapChart | null>(null);
  const [zoomLevel, setZoomLevel] = useState(0.1);

  const initialRotationX = 0;
  const initialRotationY = 0;
  const initialZoomLevel = 1;

  useEffect(() => {
    setIsClient(true);
  }, []);

  const startRotationAnimation = () => {
    if (chartInstanceRef.current) {
      const rotationAnimation = chartInstanceRef.current.animate({
        key: "rotationX",
        from: chartInstanceRef.current.get("rotationX"),
        to: chartInstanceRef.current.get("rotationX") + 360,
        duration: 30000,
        loops: Infinity,
      });
      rotationAnimationRef.current = rotationAnimation;
    }
  };

  useLayoutEffect(() => {
    if (!isClient) return;

    const root = am5.Root.new("chartdiv");
    chartRef.current = root;

    root.setThemes([am5themes_Animated.new(root)]);

    const chart = root.container.children.push(
      am5map.MapChart.new(root, {
        panX: "rotateX",
        panY: "rotateY",
        projection: am5map.geoOrthographic(),
        homeGeoPoint: { longitude: initialRotationX, latitude: initialRotationY },
        homeZoomLevel: initialZoomLevel,
        wheelY: "zoom",
      })
    );
    chartInstanceRef.current = chart;

    const polygonSeries = chart.series.push(
      am5map.MapPolygonSeries.new(root, {
        geoJSON: am5geodata_worldLow,
      })
    );
    polygonSeriesRef.current = polygonSeries;

    const pointSeries = chart.series.push(
      am5map.MapPointSeries.new(root, {
        autoScale: true,
      })
    );
    pointSeriesRef.current = pointSeries;

    fetch(geojsonUrl)
      .then(response => response.json())
      .then(data => {
        pointSeries.data.setAll(data.features.map((feature: any) => ({
          geometry: feature.geometry,
          title: feature.properties.location,
          articles: feature.properties.articles
        })));
      })
      .catch(error => console.error('Error fetching GeoJSON data:', error));

    pointSeries.bullets.push(function() {
      const circle = am5.Circle.new(root, {
        radius: 2.5,
        fill: am5.color(0xcc0000), // Dimmer red color
        fillOpacity: 0.5,
        tooltipText: "{title}\n{articles[0].headline}",
      });

      circle.events.on("click", function(ev) {
        const dataItem = ev.target.dataItem;
        const articles = dataItem.dataContext.articles;
        const articleContent = articles.map((article: any) => `<a href="${article.url}" target="_blank">${article.headline}</a>`).join('<hr style="margin: 10px 0; border: 0; border-top: 1px solid #ccc;">');
        const content = `<div>Articles for location: <strong>${dataItem.dataContext.title}</strong><br/>${articleContent}</div>`;
        setArticleContent(content);
        onCountryClick(dataItem.dataContext.title);
      });

      circle.states.create("hover", {
        fill: am5.color(0x0000ff),
        fillOpacity: 1,
        tooltipText: "{title}\n{articles[0].headline}",
      });

      return am5.Bullet.new(root, {
        sprite: circle
      });
    });

    polygonSeries.mapPolygons.template.setAll({
      tooltipText: "{name}",
      toggleKey: "active",
      interactive: true,
      fill: am5.color(0xfcfcfc), // White
      fillOpacity: 1,
      stroke: am5.color(0x0e1a36), 
      strokeWidth: 0.45,
    });

    polygonSeries.mapPolygons.template.states.create("hover", {
      fill: am5.color(0x38BDF8),
    });

    polygonSeries.mapPolygons.template.states.create("active", {
      fill: am5.color(0x38BDF8),
    });

    let previousPolygon: am5map.MapPolygon | null = null;

    polygonSeries.mapPolygons.template.on("active", async (active, target) => {
      if (previousPolygon && previousPolygon !== target) {
        previousPolygon.set("active", false);
      }
      if (target.get("active")) {
        const centroid = target.geoCentroid();
        if (centroid) {
          chart.animate({ key: "rotationX", to: -centroid.longitude, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
          chart.animate({ key: "rotationY", to: -centroid.latitude, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
        }

        const countryName = target.dataItem.dataContext.name;
        await handleCountrySelection(centroid.latitude, centroid.longitude, countryName);
      }
      previousPolygon = target;
    });

    polygonSeries.events.on("datavalidated", function() {
      chart.goHome();
    });

    startRotationAnimation();

    return () => {
      root.dispose();
    };
  }, [geojsonUrl, isClient]);

  useImperativeHandle(ref, () => ({
    loadGeoJSON: () => {
      fetch(geojsonUrl)
        .then(response => response.json())
        .then(data => {
          pointSeriesRef.current.data.setAll(data.features.map((feature) => ({
            geometry: feature.geometry,
            title: feature.properties.location,
            articles: feature.properties.articles
          })));
        })
        .catch(error => console.error('Error fetching GeoJSON data:', error));
    },
    zoomToCountry: (latitude: number, longitude: number, countryName: string) => {
      handleCountryZoom(latitude, longitude, countryName);
    }
  }));
  

  const handleCountryZoom = (latitude: number, longitude: number, countryName: string) => {
    if (chartInstanceRef.current) {
      console.log(`Zooming to country: ${countryName}, Lat: ${latitude}, Long: ${longitude}`);
      chartInstanceRef.current.animate({ key: "rotationX", to: -longitude, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
      chartInstanceRef.current.animate({ key: "rotationY", to: -latitude, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
      chartInstanceRef.current.zoomToGeoPoint({ latitude, longitude }, 3.5);
      if (rotationAnimationRef.current) {
        rotationAnimationRef.current.stop();
      }
      setTimeout(() => {
        if (isRotating) {
          startRotationAnimation();
        }
      }, 1600);
    } else {
      console.error('chartInstanceRef.current is not defined');
    }
  };
  
  
  

  const fetchWikipediaContent = async (countryName: string) => {
    try {
      const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${countryName}`);
      const data = await response.json();
      return data.extract ? `<div><strong>${countryName}</strong><br>${data.extract}</div>` : `<div><strong>${countryName}</strong>: No information available.</div>`;
    } catch (error) {
      console.error('Error fetching Wikipedia content:', error);
      return `<div><strong>${countryName}</strong>: Error fetching information.</div>`;
    }
  };

  const handleCountrySelection = async (latitude, longitude, countryName) => {
    const content = await fetchWikipediaContent(countryName);
    setArticleContent(content);
    onCountryClick(countryName);
    handleCountryZoom(latitude, longitude, countryName);

    // Fetch legislative data for the selected country
    const legislativeDataUrl = `http://dev.open-politics.org/api/v1/countries/legislation/${countryName}`;
    try {
      const legislativeResponse = await axios.get(legislativeDataUrl);
      console.log('Legislative info:', legislativeResponse.data);
      setLegislativeData(legislativeResponse.data); // Ensure you have setLegislativeData in the props
    } catch (error) {
      console.error('Error fetching legislative data:', error);
    }

    // Fetch economic data for the selected country
    const economicDataUrl = `http://dev.open-politics.org/api/v1/countries/econ_data/${countryName}`;
    try {
      const economicResponse = await axios.get(economicDataUrl);
      console.log('Economic info:', economicResponse.data);
      setEconomicData(economicResponse.data); // Ensure you have setEconomicData in the props
    } catch (error) {
      console.error('Error fetching economic data:', error);
    }
  };

  const handlePlayPause = () => {
    if (rotationAnimationRef.current) {
      if (isRotating) {
        rotationAnimationRef.current.pause();
      } else {
        rotationAnimationRef.current.play();
      }
      setIsRotating(!isRotating);
    } else {
      startRotationAnimation();
      setIsRotating(true);
    }
  };

  const handleHome = () => {
    if (chartInstanceRef.current) {
      if (rotationAnimationRef.current) {
        rotationAnimationRef.current.stop();
      }

      chartInstanceRef.current.animate({ key: "rotationX", to: 0, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
      chartInstanceRef.current.animate({ key: "rotationY", to: 0, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });
      chartInstanceRef.current.zoomToGeoPoint({ latitude: 0, longitude: 0 }, initialZoomLevel);

      setTimeout(() => {
        if (isRotating) {
          startRotationAnimation();
        }
      }, 1600);
    }
  };

  const handleResume = () => {
    if (chartInstanceRef.current) {
      chartInstanceRef.current.goHome();
      if (rotationAnimationRef.current) {
        rotationAnimationRef.current.stop();
      }
      setTimeout(() => {
        if (isRotating) {
          startRotationAnimation();
        }
      }, 1600);
    }
  };

  const handleZoomChange = (value: number[]) => {
    const zoomValue = value[0];
    setZoomLevel(zoomValue);
    if (chartInstanceRef.current) {
      chartInstanceRef.current.zoomToGeoPoint({ latitude: initialRotationY, longitude: initialRotationX }, zoomValue);
    }
  };

  const getWindowWidth = () => {
    if (typeof window !== 'undefined') {
      return window.innerWidth;
    }
    return 0;
  };

  if (!isClient) return null;
  return (
    <div className="relative flex flex-col items-center">
      <div id="chartdiv" className="w-full h-96 sm:h-128 mt-16 relative">
        <div id="mover" className="absolute bottom-0 left-0 w-14 h-12 bg-white dark:bg-background text-zinc-100 z-10"></div>
      </div>
      {isBrowseMode && (
        <div className="absolute bottom-8 left-3/4 z-10">
          <Popover>
            <PopoverTrigger as={Button} className='mt-2' variant="outline">
              {getWindowWidth() <= 768 ? <Cog /> : <Cog />}
            </PopoverTrigger>
            <PopoverContent className="flex flex-col items-center">
              <Button className='mt-2 w-full' variant="outline" onClick={handleHome}>
                <RotateCcw className={`${getWindowWidth() <= 768 ? "w-4 h-4" : "w-6 h-6"}`} />
              </Button>
              <Button className='mt-2 w-full' variant="outline" onClick={handleResume}>
                <Compass className={`${getWindowWidth() <= 768 ? "w-4 h-4" : "w-6 h-6"}`} />
              </Button>
              <div className="flex items-center mt-2 w-full justify-center">
                <span className="text-white bg-transparent ml-2">+ -</span>
                <Slider
                  value={[zoomLevel]}
                  onValueChange={handleZoomChange}
                  min={0.4}
                  max={3}
                  step={0.35}
                  className="w-full"
                />
              </div>
            </PopoverContent>
          </Popover>
        </div>
      )}
    </div>
  );
});

export default Globe;

components/Search.tsx
import React, { useState, useEffect } from 'react';
import {
  Command,
  CommandDialog,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from '@/components/ui/command';
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import axios from 'axios';
import { generateSummaryFromArticles } from '@/app/actions';
import { readStreamableValue } from 'ai/rsc';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ChevronDown, ChevronUp } from 'lucide-react';
import { Button } from "@/components/ui/button"


interface SearchProps {
  setResults: (results: any) => void;
  setCountry: (country: string | null) => void;
  setSummary: (summary: string) => void;
  globeRef: React.RefObject<any>;
  onCountryZoom: (latitude: number, longitude: number, countryName: string) => void;
}

const Search: React.FC<SearchProps> = ({ setResults, setCountry, setSummary, globeRef, onCountryZoom }) => {

  const [inputValue, setInputValue] = useState('');
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleSearch = async (query) => {
    setLoading(true);
    try {
      const results = await fetchTavilySearchResults(query);
      setResults(results);
  
      const articles = results.results.map((result) => ({ content: result.content }));
      const { output } = await generateSummaryFromArticles(articles);
      let fullSummary = '';
      for await (const delta of readStreamableValue(output)) {
        fullSummary += delta;
        setSummary(fullSummary);
      }
  
      const country = await fetchCountryFromQuery(query);
      setCountry(country?.country_name);
  
      if (country) {
        console.log(`Fetched country data:`, country);
  
        const tryZoomToCountry = () => {
          if (globeRef.current) {
            console.log(`Zooming to: ${country.country_name}, Lat: ${country.latitude}, Long: ${country.longitude}`);
            globeRef.current.zoomToCountry(country.latitude, country.longitude, country.country_name);
          } else {
            console.warn('globeRef.current is null. Retrying...');
            setTimeout(tryZoomToCountry, 500); // Retry after 500ms
          }
        };
  
        tryZoomToCountry();
      } else {
        console.error('Country data is null.');
      }
    } catch (error) {
      console.error('Error in handleSearch:', error);
    } finally {
      setLoading(false);
    }
  };
  
  
  
  
  
  
  


  const fetchTavilySearchResults = async (query: string) => {
    const apiKey = "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"; // Replace with your actual API key
    const payload = {
      api_key: apiKey,
      query: query,
      search_depth: "advanced",
      include_answer: false,
      include_images: true,
      include_raw_content: false,
      max_results: 5,
      include_domains: [],
      exclude_domains: []
    };

    try {
      const response = await axios.post('https://api.tavily.com/search', payload);
      console.log('Search results:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error fetching search results:', error);
      return null;
    }
  };

  const fetchCountryFromQuery = async (query: string) => {
    try {
        const response = await axios.get(`http://dev.open-politics.org/api/v1/countries/country_from_query?query=${query}`);
        console.log('Country response:', response.data);
        if (response.data.error) {
            console.error('Error fetching country data:', response.data.error);
            return null;
        }
        return {
            country_name: response.data.country_name,
            latitude: response.data.latitude,
            longitude: response.data.longitude
        };
    } catch (error) {
        console.error('Error fetching country data:', error);
        return null;
    }
};


  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setDialogOpen((open) => !open);
      }
    };
    document.addEventListener('keydown', down);
    return () => document.removeEventListener('keydown', down);
  }, []);

  const handleSuggestionSelect = (query: string) => {
    console.log('Suggestion selected:', query);
    setInputValue(query);
    handleSearch(query);
  };

  return (
    <div className="relative mt-2 w-full md:w-2/3 px-4">
      <h2 className="text-xl font-bold mb-2">Search News and all things Politics</h2>
      <Command className="mx-auto">
        <div className="relative">
          <CommandInput
            onKeyDown={(e) => e.key === 'Enter' && handleSearch(inputValue)}
            value={inputValue}
            onValueChange={setInputValue}
            placeholder="e.g. Economy of Oman"
            style={{ fontSize: '16px' }}
          />
          <Button onClick={() => handleSearch(inputValue)} className="absolute bg-sky-300 dark:bg-sky-700 dark:text-white dark:invert  right-0 top-0 h-full">Search</Button>
        </div>
        {loading && <div className="spinner">Loading...</div>}
        <div className="absolute right-2 top-2 md:hidden">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button onClick={() => setDropdownOpen(!dropdownOpen)}>
                {dropdownOpen ? <ChevronUp size={24} /> : <ChevronDown size={24} />}
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuLabel>Analysis Type</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem onSelect={() => console.log('Conflict Analysis')}>Conflict Analysis</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => console.log('News Analysis')}>News Analysis</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => console.log('Economic Analysis')}>Economic Analysis</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <CommandList className="hidden md:block">
          <div className="hidden md:block">
            <CommandGroup heading="Suggestions">
              <CommandItem onSelect={() => handleSuggestionSelect('The economic situation of South Africa')}>
                The economic situation of South Africa
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('How has Iran positioned itself towards Ukraine?')}>
                How has Iran positioned itself towards Ukraine?
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('News from Singapore')}>
                News from Singapore
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('Political climate in Brazil')}>
                Political climate in Brazil
              </CommandItem>
            </CommandGroup>
          </div>
          <CommandSeparator />
          <CommandGroup heading="Method Focus">
            <RadioGroup defaultValue="option-one">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="option-one" id="option-one" />
                <Label htmlFor="option-one">Conflict Analysis</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="option-two" id="option-two" />
                <Label htmlFor="option-two">News Analysis</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="option-three" id="option-three" />
                <Label htmlFor="option-three">Economic Analysis</Label>
              </div>
            </RadioGroup>
          </CommandGroup>
        </CommandList>
      </Command>
      <CommandDialog open={dialogOpen} onOpenChange={(open) => setDialogOpen(open)}>
        <div className="relative">
          <CommandInput
            onKeyDown={(e) => e.key === 'Enter' && handleSearch(inputValue)}
            value={inputValue}
            onValueChange={setInputValue}
            placeholder="e.g. Economy of Oman"
            style={{ fontSize: '16px' }} // Ensure the font size is 16px or larger
          />
          <Button onClick={() => handleSearch(inputValue)} className="absolute right-0 top-0 h-full">Search</Button>
        </div>
        <CommandList>
          <div className="hidden md:block">
            <CommandGroup heading="Suggestions">
              <CommandItem onSelect={() => handleSuggestionSelect('The economic situation of South Africa')}>
                The economic situation of South Africa
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('How has Iran positioned itself towards Ukraine?')}>
                How has Iran positioned itself towards Ukraine?
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('News from Singapore')}>
                News from Singapore
              </CommandItem>
              <CommandItem onSelect={() => handleSuggestionSelect('Political climate in Brazil')}>
                Political climate in Brazil
              </CommandItem>
            </CommandGroup>
          </div>
          <CommandSeparator />
          <CommandGroup heading="Recent Searches">
            {/* Future place for recent search items */}
          </CommandGroup>
        </CommandList>
      </CommandDialog>
    </div>
  );
};

export default Search;
