module.exports = {

"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * From https://github.com/pixijs/pixi.js/blob/3dd0ff9a935f0bc13a09aefff9eb2872f02c51b9/packages/canvas/canvas-renderer/src/utils/mapCanvasBlendModesToPixi.ts#L13
 */ __turbopack_esm__({
    "BlendMode": ()=>BlendMode
});
var BlendMode;
(function(BlendMode) {
    BlendMode["ADD"] = "lighter";
    BlendMode["COLOR"] = "color";
    BlendMode["COLOR_BURN"] = "color-burn";
    BlendMode["COLOR_DODGE"] = "color-dodge";
    BlendMode["DARKEN"] = "darken";
    BlendMode["DIFFERENCE"] = "difference";
    BlendMode["DST_OVER"] = "destination-over";
    BlendMode["EXCLUSION"] = "exclusion";
    BlendMode["HARD_LIGHT"] = "hard-light";
    BlendMode["HUE"] = "hue";
    BlendMode["LIGHTEN"] = "lighten";
    BlendMode["LUMINOSITY"] = "luminosity";
    BlendMode["MULTIPLY"] = "multiply";
    BlendMode["NORMAL"] = "source-over";
    BlendMode["OVERLAY"] = "overlay";
    BlendMode["SATURATION"] = "saturation";
    BlendMode["SCREEN"] = "screen";
    BlendMode["SOFT_LIGHT"] = "soft-light";
    BlendMode["SRC_ATOP"] = "source-atop";
    BlendMode["XOR"] = "xor";
})(BlendMode || (BlendMode = {})); //# sourceMappingURL=Renderer.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Bullet.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Bullet": ()=>Bullet
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Bullet extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    constructor(){
        super(...arguments);
        // used by MapPolygons where one data item can have multiple bullets of the same kind
        Object.defineProperty(this, "_index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Target series object if it's a bullet for series.
         */ Object.defineProperty(this, "series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _afterNew() {
        // Applying themes because bullet will not have parent
        super._afterNewApplyThemes();
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("sprite")) {
            const sprite = this.get("sprite");
            if (sprite) {
                sprite.setAll({
                    position: "absolute",
                    role: "figure"
                });
                this._disposers.push(sprite);
            }
        }
        if (this.isDirty("locationX") || this.isDirty("locationY")) {
            if (this.series) {
                this.series._positionBullet(this);
            }
        }
    }
}
Object.defineProperty(Bullet, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Bullet"
});
Object.defineProperty(Bullet, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Bullet.className
    ])
}); //# sourceMappingURL=Bullet.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Pattern": ()=>Pattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Pattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeGraphics()
        });
        Object.defineProperty(this, "_backgroundDisplay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeGraphics()
        });
        Object.defineProperty(this, "_clear", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _afterNew() {
        // Applying themes because pattern will not have parent
        super._afterNewApplyThemes();
    }
    get pattern() {
        return this._pattern;
    }
    _draw() {}
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("repetition") || this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation") || this.isDirty("strokeWidth") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("colorOpacity") || this.isDirty("fillOpacity")) {
            this._clear = true;
        }
        this._checkDirtyFill();
    }
    _checkDirtyFill() {
        if (this.isDirty("color") || this.isDirty("fill")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            const repetition = this.get("repetition", "");
            const width = this.get("width", 100);
            const height = this.get("height", 100);
            const fill = this.get("fill");
            const fillOpacity = this.get("fillOpacity", 1);
            const backgroundDisplay = this._backgroundDisplay;
            const display = this._display;
            display.clear();
            backgroundDisplay.clear();
            if (fill && fillOpacity > 0) {
                backgroundDisplay.beginFill(fill, fillOpacity);
                backgroundDisplay.drawRect(0, 0, width, height);
                backgroundDisplay.endFill();
            }
            display.angle = this.get("rotation", 0);
            //display.pivot = { x: width / 2, y: height / 2 };
            this._draw();
            this._pattern = this._root._renderer.createPattern(display, backgroundDisplay, repetition, width, height);
        }
        this._clear = false;
    }
}
Object.defineProperty(Pattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Pattern"
});
Object.defineProperty(Pattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Pattern.className
    ])
}); //# sourceMappingURL=Pattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/PicturePattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "PicturePattern": ()=>PicturePattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class PicturePattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _beforeChanged() {
        super._beforeChanged();
        this._clear = true;
        if (this.isDirty("src")) {
            this._load();
        }
        const canvas = this.get("canvas");
        if (canvas) {
            this.set("width", canvas.width);
            this.set("height", canvas.height);
        }
    }
    _draw() {
        super._draw();
        const image = this._image;
        if (image) {
            const patternWidth = this.get("width", 100);
            const patternHeight = this.get("height", 100);
            // Fit
            const fit = this.get("fit", "image");
            let width = 0;
            let height = 0;
            if (fit == "pattern") {
                width = patternWidth;
                height = patternHeight;
            } else {
                width = image.width;
                height = image.height;
                if (fit == "image") {
                    this.set("width", width);
                    this.set("height", height);
                }
            }
            // Position
            const centered = this.get("centered", true);
            let x = 0;
            let y = 0;
            if (centered) {
                x = patternWidth / 2 - width / 2;
                y = patternHeight / 2 - height / 2;
            }
            this._display.image(image, width, height, x, y);
        }
        const canvas = this.get("canvas");
        if (canvas) {
            this._display.image(canvas, canvas.width, canvas.height, 0, 0);
        }
    }
    _load() {
        const src = this.get("src");
        if (src) {
            const image = new Image();
            //image.crossOrigin = "Anonymous";
            image.src = src;
            image.decode().then(()=>{
                this._image = image;
                this._draw();
                if (this.events.isEnabled("loaded")) {
                    this.events.dispatch("loaded", {
                        type: "loaded",
                        target: this
                    });
                }
            }).catch((_error)=>{
            // TODO: maybe raise error?
            });
        }
    }
}
Object.defineProperty(PicturePattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "PicturePattern"
});
Object.defineProperty(PicturePattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        PicturePattern.className
    ])
}); //# sourceMappingURL=PicturePattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Sprite": ()=>Sprite
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tslib/tslib.es6.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Template.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
;
;
//import { populateString } from "../util/PopulateString";
/**
 * An [[EventDispatcher]] for [[Sprite]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
 */ class SpriteEventDispatcher extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"] {
    constructor(sprite){
        super();
        Object.defineProperty(this, "_sprite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rendererDisposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dispatchParents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        this._sprite = sprite;
    }
    _makePointerEvent(key, event) {
        return {
            type: key,
            originalEvent: event.event,
            point: event.point,
            simulated: event.simulated,
            native: event.native,
            target: this._sprite
        };
    }
    _onRenderer(key, dispatch) {
        // TODO: is this OK? it'd be good not to require to set this on each individual element
        this._sprite.set("interactive", true);
        this._sprite._display.interactive = true;
        let events = this._rendererDisposers[key];
        if (events === undefined) {
            const disposer = this._sprite._display.on(key, (e)=>{
                dispatch.call(this, e);
            });
            events = this._rendererDisposers[key] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CounterDisposer"](()=>{
                delete this._rendererDisposers[key];
                disposer.dispose();
            });
        }
        return events.increment();
    }
    _on(once, type, callback, context, shouldClone, dispatch) {
        const info = super._on(once, type, callback, context, shouldClone, dispatch);
        const rendererEvent = SpriteEventDispatcher.RENDERER_EVENTS[type];
        if (rendererEvent !== undefined) {
            info.disposer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                info.disposer,
                this._onRenderer(type, rendererEvent)
            ]);
        }
        return info;
    }
    /**
     * Will stop any bubbling up of the event to element's parents.
     *
     * Should be called in an event handler, e.g.:
     *
     * ```TypeScript
     * element.events.on("pointerdown", function(ev) {
     *   // Do something here and prevent from "pointerdown" bubbling up
     *   // ...
     *   ev.target.events.stopParentDispatch();
     * });
     * ```
     * ```JavaScript
     * element.events.on("pointerdown", function(ev) {
     *   // Do something here and prevent from "pointerdown" bubbling up
     *   // ...
     *   ev.target.events.stopParentDispatch();
     * });
     * ```
     */ stopParentDispatch() {
        this._dispatchParents = false;
    }
    /**
     * @ignore
     */ dispatchParents(type, event) {
        const old = this._dispatchParents;
        this._dispatchParents = true;
        try {
            this.dispatch(type, event);
            if (this._dispatchParents && this._sprite.parent) {
                this._sprite.parent.events.dispatchParents(type, event);
            }
        } finally{
            this._dispatchParents = old;
        }
    }
}
Object.defineProperty(SpriteEventDispatcher, "RENDERER_EVENTS", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        "click": function(event) {
            if (this.isEnabled("click") && !this._sprite.isDragging() && this._sprite._hasDown() && !this._sprite._hasMoved(this._makePointerEvent("click", event))) {
                this.dispatch("click", this._makePointerEvent("click", event));
            }
        },
        "rightclick": function(event) {
            if (this.isEnabled("rightclick")) {
                this.dispatch("rightclick", this._makePointerEvent("rightclick", event));
            }
        },
        "middleclick": function(event) {
            if (this.isEnabled("middleclick")) {
                this.dispatch("middleclick", this._makePointerEvent("middleclick", event));
            }
        },
        "dblclick": function(event) {
            this.dispatchParents("dblclick", this._makePointerEvent("dblclick", event));
        },
        "pointerover": function(event) {
            const sprite = this._sprite;
            let dispatch = true;
            if (sprite.getPrivate("trustBounds")) {
                sprite._getBounds();
                const bounds = sprite.globalBounds();
                if (sprite.isType("Graphics")) {
                    const strokeWidth = sprite.get("strokeWidth", 1) / 2;
                    if (strokeWidth >= 1) {
                        bounds.left -= strokeWidth;
                        bounds.right += strokeWidth;
                        bounds.top -= strokeWidth;
                        bounds.bottom += strokeWidth;
                    }
                }
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.inBounds(event.point, bounds)) {
                    dispatch = false;
                    sprite._root._renderer.removeHovering(sprite._display);
                }
            }
            if (dispatch && this.isEnabled("pointerover")) {
                this.dispatch("pointerover", this._makePointerEvent("pointerover", event));
            }
        },
        "pointerout": function(event) {
            if (this.isEnabled("pointerout")) {
                this.dispatch("pointerout", this._makePointerEvent("pointerout", event));
            }
        },
        "pointerdown": function(event) {
            this.dispatchParents("pointerdown", this._makePointerEvent("pointerdown", event));
        },
        "pointerup": function(event) {
            if (this.isEnabled("pointerup")) {
                this.dispatch("pointerup", this._makePointerEvent("pointerup", event));
            }
        },
        "globalpointerup": function(event) {
            if (this.isEnabled("globalpointerup")) {
                this.dispatch("globalpointerup", this._makePointerEvent("globalpointerup", event));
            }
        },
        "globalpointermove": function(event) {
            if (this.isEnabled("globalpointermove")) {
                this.dispatch("globalpointermove", this._makePointerEvent("globalpointermove", event));
            }
        },
        "wheel": function(event) {
            this.dispatchParents("wheel", {
                type: "wheel",
                target: this._sprite,
                originalEvent: event.event,
                point: event.point
            });
        }
    }
});
class Sprite extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_adjustedLocalBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }
        });
        Object.defineProperty(this, "_localBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }
        });
        Object.defineProperty(this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_dataItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_templateField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_sizeDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // Will be true only when dragging
        Object.defineProperty(this, "_isDragging", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // The event when the dragging starts
        Object.defineProperty(this, "_dragEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The position when dragging starts
        Object.defineProperty(this, "_dragPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_isHidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_isShowing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_isHiding", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_isDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_downPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_downPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_toggleDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_dragDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tooltipDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_hoverDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_focusDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tooltipMoveDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tooltipPointerDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_statesHandled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _afterNew() {
        this.setPrivateRaw("visible", true);
        super._afterNew();
    }
    /**
     * Marks some setting as dirty. Could be used to trigger adapter.
     * @param key
     */ markDirtyKey(key) {
        this._markDirtyKey(key);
    }
    _markDirtyKey(key) {
        super._markDirtyKey(key);
        if (key == "x" || key == "y" || key == "dx" || key == "dy") {
            this.markDirtyBounds();
            this._addPercentagePositionChildren();
            this.markDirtyPosition();
        }
    }
    _markDirtyPrivateKey(key) {
        super._markDirtyPrivateKey(key);
        if (key == "x" || key == "y") {
            this.markDirtyPosition();
        }
    }
    _removeTemplateField() {
        if (this._templateField) {
            this._templateField._removeObjectTemplate(this);
        }
    }
    _createEvents() {
        return new SpriteEventDispatcher(this);
    }
    _processTemplateField() {
        let template;
        const field = this.get("templateField");
        if (field) {
            const dataItem = this.dataItem;
            if (dataItem) {
                const context = dataItem.dataContext;
                if (context) {
                    template = context[field];
                    if (!(template instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"]) && template) {
                        template = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new(template);
                    }
                }
            }
        }
        if (this._templateField !== template) {
            this._removeTemplateField();
            this._templateField = template;
            if (template) {
                template._setObjectTemplate(this);
            }
            this._applyTemplates();
        }
    }
    // TODO change this to run before the element is added to the parent, so that way
    //      it doesn't need to apply the themes twice
    _setDataItem(dataItem) {
        const oldDataItem = this._dataItem;
        this._dataItem = dataItem;
        this._processTemplateField();
        const eventType = "dataitemchanged";
        if (dataItem != oldDataItem) {
            if (this.events.isEnabled(eventType)) {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this,
                    oldDataItem: oldDataItem,
                    newDataItem: dataItem
                });
            }
        }
    }
    /**
     * A [[DataItem]] used for this element.
     *
     * NOTE: data item is being assigned automatically in most cases where it
     * matters. Use this accessor to set data item only if you know what you're
     * doing.
     *
     * @param  value  Data item
     */ set dataItem(value) {
        this._setDataItem(value);
    }
    /**
     * @return DataItem
     */ get dataItem() {
        if (this._dataItem) {
            return this._dataItem;
        } else {
            let parent = this._parent;
            while(parent){
                if (parent._dataItem) {
                    return parent._dataItem;
                } else {
                    parent = parent._parent;
                }
            }
        }
    }
    _addPercentageSizeChildren() {
        let parent = this.parent;
        if (parent) {
            if (this.get("width") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"] || this.get("height") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pushOne(parent._percentageSizeChildren, this);
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(parent._percentageSizeChildren, this);
            }
        }
    }
    _addPercentagePositionChildren() {
        let parent = this.parent;
        if (parent) {
            if (this.get("x") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"] || this.get("y") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pushOne(parent._percentagePositionChildren, this);
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(parent._percentagePositionChildren, this);
            }
        }
    }
    /**
     * @ignore
     */ markDirtyPosition() {
        this._root._addDirtyPosition(this);
    }
    updatePivotPoint() {
        const bounds = this._localBounds;
        if (bounds) {
            const centerX = this.get("centerX");
            if (centerX != null) {
                this._display.pivot.x = bounds.left + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(centerX, bounds.right - bounds.left);
            }
            const centerY = this.get("centerY");
            if (centerY != null) {
                this._display.pivot.y = bounds.top + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(centerY, bounds.bottom - bounds.top);
            }
        }
    }
    _beforeChanged() {
        super._beforeChanged();
        // handling states in beforeChanged, otherwise states is not applied without animated theme
        this._handleStates();
        if (this.isDirty("tooltip")) {
            const previous = this._prevSettings.tooltip;
            if (previous) {
                previous.dispose();
            }
        }
        if (this.isDirty("layer") || this.isDirty("layerMargin")) {
            this._display.setLayer(this.get("layer"), this.get("layerMargin"));
            this.markDirtyLayer();
        }
        if (this.isDirty("tooltipPosition")) {
            const tooltipMoveDp = this._tooltipMoveDp;
            if (tooltipMoveDp) {
                tooltipMoveDp.dispose();
                this._tooltipMoveDp = undefined;
            }
            const tooltipPointerDp = this._tooltipPointerDp;
            if (tooltipPointerDp) {
                tooltipPointerDp.dispose();
                this._tooltipPointerDp = undefined;
            }
            if (this.get("tooltipPosition") == "pointer") {
                if (this.isHover()) {
                    this._tooltipMoveDp = this.events.on("globalpointermove", (e)=>{
                        this.showTooltip(e.point);
                    });
                }
                this._tooltipPointerDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    this.events.on("pointerover", ()=>{
                        this._tooltipMoveDp = this.events.on("globalpointermove", (e)=>{
                            this.showTooltip(e.point);
                        });
                    }),
                    this.events.on("pointerout", ()=>{
                        const tooltipMoveDp = this._tooltipMoveDp;
                        if (tooltipMoveDp) {
                            tooltipMoveDp.dispose();
                            this._tooltipMoveDp = undefined;
                        }
                    })
                ]);
            }
        }
    }
    _handleStates() {
        if (!this._statesHandled) {
            if (this.isDirty("active")) {
                if (this.get("active")) {
                    this.states.applyAnimate("active");
                    this.set("ariaChecked", true);
                } else {
                    if (!this.isHidden()) {
                        this.states.applyAnimate("default");
                    }
                    this.set("ariaChecked", false);
                }
                this.markDirtyAccessibility();
            }
            if (this.isDirty("disabled")) {
                if (this.get("disabled")) {
                    this.states.applyAnimate("disabled");
                    this.set("ariaChecked", false);
                } else {
                    if (!this.isHidden()) {
                        this.states.applyAnimate("default");
                    }
                    this.set("ariaChecked", true);
                }
                this.markDirtyAccessibility();
            }
            this._statesHandled = true;
        }
    }
    _changed() {
        super._changed();
        const display = this._display;
        const events = this.events;
        if (this.isDirty("draggable")) {
            const draggable = this.get("draggable");
            if (draggable) {
                this.set("interactive", true);
                this._dragDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    events.on("pointerdown", (ev)=>{
                        this.dragStart(ev);
                    }),
                    events.on("globalpointermove", (ev)=>{
                        this.dragMove(ev);
                    }),
                    events.on("globalpointerup", (ev)=>{
                        this.dragStop(ev);
                    })
                ]);
            } else {
                if (this._dragDp) {
                    this._dragDp.dispose();
                    this._dragDp = undefined;
                }
            }
            display.cancelTouch = draggable ? true : false;
        }
        if (this.isDirty("tooltipText") || this.isDirty("tooltipHTML") || this.isDirty("showTooltipOn")) {
            const tooltipText = this.get("tooltipText");
            const tooltipHTML = this.get("tooltipHTML");
            const showTooltipOn = this.get("showTooltipOn", "hover");
            if (this._tooltipDp) {
                this._tooltipDp.dispose();
                this._tooltipDp = undefined;
            }
            if (tooltipText || tooltipHTML) {
                if (showTooltipOn == "click") {
                    this._tooltipDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                        events.on("click", ()=>{
                            this.setTimeout(()=>this.showTooltip(), 10);
                        }),
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(document, "click", (_ev)=>{
                            this.hideTooltip();
                        })
                    ]);
                    this._disposers.push(this._tooltipDp);
                } else if (showTooltipOn == "always") {
                // nothing
                } else {
                    this._tooltipDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                        events.on("pointerover", ()=>{
                            this.showTooltip();
                        }),
                        events.on("pointerout", ()=>{
                            this.hideTooltip();
                        })
                    ]);
                    this._disposers.push(this._tooltipDp);
                }
            }
        }
        if (this.isDirty("toggleKey")) {
            let toggleKey = this.get("toggleKey");
            if (toggleKey && toggleKey != "none") {
                this._toggleDp = events.on("click", ()=>{
                    if (!this._isDragging) {
                        this.set(toggleKey, !this.get(toggleKey));
                    }
                });
            } else {
                if (this._toggleDp) {
                    this._toggleDp.dispose();
                    this._toggleDp = undefined;
                }
            }
        }
        if (this.isDirty("opacity")) {
            display.alpha = Math.max(0, this.get("opacity", 1));
            if (this.get("focusable")) {
                this.markDirtyAccessibility();
            }
        }
        if (this.isDirty("rotation")) {
            this.markDirtyBounds();
            display.angle = this.get("rotation", 0);
        }
        if (this.isDirty("scale")) {
            this.markDirtyBounds();
            display.scale = this.get("scale", 0);
        }
        if (this.isDirty("centerX") || this.isDirty("centerY")) {
            this.markDirtyBounds();
            this.updatePivotPoint();
        }
        if (this.isDirty("visible") || this.isPrivateDirty("visible") || this.isDirty("forceHidden")) {
            if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                display.visible = false;
                this.hideTooltip();
            } else {
                display.visible = true;
            }
            this.markDirtyBounds();
            if (this.get("focusable")) {
                this.markDirtyAccessibility();
            }
        }
        if (this.isDirty("width") || this.isDirty("height")) {
            this.markDirtyBounds();
            this._addPercentageSizeChildren();
            const parent = this.parent;
            if (parent) {
                if (this.isDirty("width") && this.get("width") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"] || this.isDirty("height") && this.get("height") instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                    parent.markDirty();
                    parent._prevWidth = 0;
                }
            }
            this._sizeDirty = true;
        }
        if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("minWidth") || this.isDirty("minHeight") || this.isPrivateDirty("maxWidth") || this.isPrivateDirty("maxHeight") || this.isPrivateDirty("minWidth") || this.isPrivateDirty("minHeight") || this.isDirty("marginLeft") || this.isDirty("marginTop") || this.isDirty("marginRight") || this.isDirty("marginBottom")) {
            this.markDirtyBounds();
            this._sizeDirty = true;
        }
        if (this._sizeDirty) {
            this._updateSize();
        }
        if (this.isDirty("wheelable")) {
            const wheelable = this.get("wheelable");
            if (wheelable) {
                this.set("interactive", true);
            }
            display.wheelable = wheelable ? true : false;
        }
        // Accessibility
        if (this.isDirty("tabindexOrder") || this.isDirty("focusableGroup")) {
            if (this.get("focusable")) {
                this._root._registerTabindexOrder(this);
            } else {
                this._root._unregisterTabindexOrder(this);
            }
        }
        if (this.isDirty("filter")) {
            //this.markDirtyBounds();
            display.filter = this.get("filter");
        }
        let filter = this.get("filter", "");
        if (this.isDirty("blur")) {
            const blur = this.get("blur", 0);
            if (blur != 0) {
                filter += " blur(" + blur + "px)";
            }
        }
        if (this.isDirty("saturate")) {
            const saturate = this.get("saturate", 1);
            if (saturate != 1) {
                filter += " saturate(" + saturate + ")";
            }
        }
        if (this.isDirty("brightness")) {
            const brightness = this.get("brightness", 1);
            if (brightness != 1) {
                filter += " brightness(" + brightness + ")";
            }
        }
        if (this.isDirty("contrast")) {
            const contrast = this.get("contrast", 1);
            if (contrast != 1) {
                filter += " contrast(" + contrast + ")";
            }
        }
        if (this.isDirty("sepia")) {
            const sepia = this.get("sepia", 0);
            if (sepia != 0) {
                filter += " sepia(" + sepia + ")";
            }
        }
        if (this.isDirty("hue")) {
            const hue = this.get("hue", 0);
            if (hue != 0) {
                filter += " hue-rotate(" + hue + "deg)";
            }
        }
        if (this.isDirty("invert")) {
            const invert = this.get("invert", 0);
            if (invert != 0) {
                filter += " invert(" + invert + ")";
            }
        }
        if (filter) {
            display.filter = filter;
        }
        if (this.isDirty("cursorOverStyle")) {
            display.cursorOverStyle = this.get("cursorOverStyle");
        }
        if (this.isDirty("hoverOnFocus")) {
            if (this.get("hoverOnFocus")) {
                this._focusDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    events.on("focus", ()=>{
                        // TODO: proper hover, not just tooltip
                        this.showTooltip();
                    }),
                    events.on("blur", ()=>{
                        // TODO: proper hover, not just tooltip
                        this.hideTooltip();
                    })
                ]);
            } else {
                if (this._focusDp) {
                    this._focusDp.dispose();
                    this._focusDp = undefined;
                }
            }
        }
        if (this.isDirty("focusable")) {
            if (this.get("focusable")) {
                this._root._registerTabindexOrder(this);
            } else {
                this._root._unregisterTabindexOrder(this);
            }
            this.markDirtyAccessibility();
        }
        if (this.isPrivateDirty("focusable")) {
            this.markDirtyAccessibility();
        }
        if (this.isDirty("role") || this.isDirty("ariaLive") || this.isDirty("ariaChecked") || this.isDirty("ariaHidden") || this.isDirty("ariaOrientation") || this.isDirty("ariaValueNow") || this.isDirty("ariaValueMin") || this.isDirty("ariaValueMax") || this.isDirty("ariaValueText") || this.isDirty("ariaLabel") || this.isDirty("ariaControls")) {
            // display.accessibility.ariaLabel = populateString(this, this.get("ariaLabel", ""));
            // @todo make sure ariaLabel gets populated in Root
            this.markDirtyAccessibility();
        }
        if (this.isDirty("exportable")) {
            display.exportable = this.get("exportable");
        }
        if (this.isDirty("interactive")) {
            const events = this.events;
            if (this.get("interactive") && !events.isDisposed()) {
                this._hoverDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    events.on("click", (ev)=>{
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isTouchEvent(ev.originalEvent)) {
                            if (!this.getPrivate("touchHovering")) {
                                this.setTimeout(()=>{
                                    this._handleOver();
                                    if (this.get("tooltipText") || this.get("tooltipHTML")) {
                                        this.showTooltip();
                                    }
                                    this.setPrivateRaw("touchHovering", true);
                                    this.events.dispatch("pointerover", {
                                        type: "pointerover",
                                        target: ev.target,
                                        originalEvent: ev.originalEvent,
                                        point: ev.point,
                                        simulated: ev.simulated
                                    });
                                }, 10);
                            }
                        }
                    }),
                    events.on("globalpointerup", (ev)=>{
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isTouchEvent(ev.originalEvent)) {
                            if (this.getPrivate("touchHovering")) {
                                this._handleOut();
                                if (this.get("tooltipText") || this.get("tooltipHTML")) {
                                    this.hideTooltip();
                                }
                                this.setPrivateRaw("touchHovering", false);
                                this.events.dispatch("pointerout", {
                                    type: "pointerout",
                                    target: ev.target,
                                    originalEvent: ev.originalEvent,
                                    point: ev.point,
                                    simulated: ev.simulated
                                });
                            }
                        }
                        if (this._isDown) {
                            this._handleUp(ev);
                        }
                    //this._isDown = false;
                    }),
                    events.on("pointerover", ()=>{
                        this._handleOver();
                    }),
                    events.on("pointerout", ()=>{
                        this._handleOut();
                    }),
                    events.on("pointerdown", (e)=>{
                        this._handleDown(e);
                    })
                ]);
            } else {
                this._display.interactive = false;
                if (this._hoverDp) {
                    this._hoverDp.dispose();
                    this._hoverDp = undefined;
                }
            }
        }
        if (this.isDirty("forceInactive")) {
            this._display.inactive = this.get("forceInactive", null);
        }
        if (this.get("showTooltipOn") == "always" && this._display.visible) {
            this.showTooltip();
        }
    }
    /**
     * @ignore
     * @todo should this be user-accessible?
     */ dragStart(e) {
        this._dragEvent = e;
        this.events.stopParentDispatch();
    }
    /**
     * @ignore
     * @todo should this be user-accessible?
     */ dragStop(e) {
        this._dragEvent = undefined;
        this._dragPoint = undefined;
        this.events.stopParentDispatch();
        if (this._isDragging) {
            this._isDragging = false;
            const type = "dragstop";
            if (this.events.isEnabled(type)) {
                this.events.dispatch(type, {
                    type: type,
                    target: this,
                    originalEvent: e.originalEvent,
                    point: e.point,
                    simulated: e.simulated
                });
            }
        }
    }
    _handleOver() {
        if (!this.isHidden()) {
            if (this.get("active") && this.states.lookup("hoverActive")) {
                this.states.applyAnimate("hoverActive");
            } else if (this.get("disabled") && this.states.lookup("hoverDisabled")) {
                this.states.applyAnimate("hoverDisabled");
            } else {
                this.states.applyAnimate("hover");
            }
            if (this.get("draggable") && this._isDown && this.states.lookup("down")) {
                this.states.applyAnimate("down");
            }
        }
    }
    _handleOut() {
        if (!this.isHidden()) {
            if (this.get("active") && this.states.lookup("active")) {
                this.states.applyAnimate("active");
            } else if (this.get("disabled") && this.states.lookup("disabled")) {
                this.states.applyAnimate("disabled");
            } else {
                if (this.states.lookup("hover") || this.states.lookup("hoverActive")) {
                    this.states.applyAnimate("default");
                }
            }
            if (this.get("draggable") && this._isDown && this.states.lookup("down")) {
                this.states.applyAnimate("down");
            }
        }
    }
    _handleUp(e) {
        if (!this.isHidden()) {
            if (this.get("active") && this.states.lookup("active")) {
                this.states.applyAnimate("active");
            } else if (this.get("disabled") && this.states.lookup("disabled")) {
                this.states.applyAnimate("disabled");
            } else if (this.states.lookup("down")) {
                if (this.isHover()) {
                    this.states.applyAnimate("hover");
                } else {
                    this.states.applyAnimate("default");
                }
            }
            // @todo remove this once migrated to _downPoints
            this._downPoint = undefined;
            const pointerId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getPointerId(e.originalEvent);
            delete this._downPoints[pointerId];
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._downPoints).length == 0) {
                this._isDown = false;
            }
        }
    }
    _hasMoved(e) {
        // @todo remove this once migrated to _downPoints
        // if (this._downPoint) {
        // 	const x = Math.abs(this._downPoint.x - e.point.x);
        // 	const y = Math.abs(this._downPoint.y - e.point.y);
        // 	return (x > 5) || (y > 5);
        // }
        const pointerId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getPointerId(e.originalEvent);
        const downPoint = this._downPoints[pointerId];
        if (downPoint) {
            const x = Math.abs(downPoint.x - e.point.x);
            const y = Math.abs(downPoint.y - e.point.y);
            return x > 5 || y > 5;
        }
        return false;
    }
    _hasDown() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._downPoints).length > 0;
    }
    _handleDown(e) {
        const parent = this.parent;
        if (parent && !this.get("draggable")) {
            parent._handleDown(e);
        }
        if (this.get("interactive") && !this.isHidden()) {
            if (this.states.lookup("down")) {
                this.states.applyAnimate("down");
            }
            this._downPoint = {
                x: e.point.x,
                y: e.point.y
            };
            // @todo remove this once migrated to _downPoints
            this._isDown = true;
            const pointerId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getPointerId(e.originalEvent);
            this._downPoints[pointerId] = {
                x: e.point.x,
                y: e.point.y
            };
        }
    }
    /**
     * @ignore
     * @todo should this be user-accessible?
     */ dragMove(e) {
        let dragEvent = this._dragEvent;
        if (dragEvent) {
            if (dragEvent.simulated && !e.simulated) {
                return true;
            }
            let angle = 0;
            let parent = this.parent;
            let scale = 1;
            while(parent != null){
                angle += parent.get("rotation", 0);
                parent = parent.parent;
                if (parent) {
                    scale *= parent.get("scale", 1);
                }
            }
            let x = (e.point.x - dragEvent.point.x) / scale;
            let y = (e.point.y - dragEvent.point.y) / scale;
            const events = this.events;
            if (dragEvent.simulated && !this._isDragging) {
                this._isDragging = true;
                this._dragEvent = e;
                this._dragPoint = {
                    x: this.x(),
                    y: this.y()
                };
                const type = "dragstart";
                if (events.isEnabled(type)) {
                    events.dispatch(type, {
                        type: type,
                        target: this,
                        originalEvent: e.originalEvent,
                        point: e.point,
                        simulated: e.simulated
                    });
                }
            }
            if (this._isDragging) {
                let dragPoint = this._dragPoint;
                this.set("x", dragPoint.x + x * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(angle) + y * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(angle));
                this.set("y", dragPoint.y + y * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(angle) - x * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(angle));
                const type = "dragged";
                if (events.isEnabled(type)) {
                    events.dispatch(type, {
                        type: type,
                        target: this,
                        originalEvent: e.originalEvent,
                        point: e.point,
                        simulated: e.simulated
                    });
                }
            } else {
                if (Math.hypot(x, y) > 5) {
                    this._isDragging = true;
                    this._dragEvent = e;
                    this._dragPoint = {
                        x: this.x(),
                        y: this.y()
                    };
                    const type = "dragstart";
                    if (events.isEnabled(type)) {
                        events.dispatch(type, {
                            type: type,
                            target: this,
                            originalEvent: e.originalEvent,
                            point: e.point,
                            simulated: e.simulated
                        });
                    }
                }
            }
        }
    }
    _updateSize() {}
    _getBounds() {
        this._localBounds = this._display.getLocalBounds();
    }
    /**
     * Returns depth (how deep in the hierachy of the content tree) of this
     * element.
     *
     * @return Depth
     */ depth() {
        let self = this.parent;
        let depth = 0;
        while(true){
            if (self) {
                ++depth;
                self = self.parent;
            } else {
                return depth;
            }
        }
    }
    /**
     * @ignore
     */ markDirtySize() {
        this._sizeDirty = true;
        this.markDirty();
    }
    /**
     * @ignore
     */ markDirtyBounds() {
        const display = this._display;
        if (this.get("isMeasured")) {
            this._root._addDirtyBounds(this);
            display.isMeasured = true;
            display.invalidateBounds();
            const parent = this.parent;
            if (parent && this.get("position") != "absolute") {
                if (parent.get("width") == null || parent.get("height") == null || parent.get("layout")) {
                    parent.markDirtyBounds();
                }
            }
            if (this.get("focusable") && this.isFocus()) {
                this.markDirtyAccessibility();
            }
        }
    }
    /**
     * @ignore
     */ markDirtyAccessibility() {
        //if (this._root.focused(this)) {
        this._root._invalidateAccessibility(this);
    //}
    }
    /**
     * @ignore
     */ markDirtyLayer() {
        //this._display.markDirtyLayer(this.isDirty("opacity") || this.isDirty("visible")); https://codepen.io/team/amcharts/pen/gOWZPmP <- problems
        this._display.markDirtyLayer(true);
    }
    /**
     * @ignore
     */ markDirty() {
        super.markDirty();
        this.markDirtyLayer();
    }
    _updateBounds() {
        const oldBounds = this._adjustedLocalBounds;
        let newBounds;
        // if display.visible == false, it still returns bounds
        if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
            newBounds = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            };
            this._localBounds = newBounds;
            this._adjustedLocalBounds = newBounds;
        } else {
            this._getBounds();
            this._fixMinBounds(this._localBounds);
            this.updatePivotPoint();
            this._adjustedLocalBounds = this._display.getAdjustedBounds(this._localBounds);
            newBounds = this._adjustedLocalBounds;
        }
        if (!oldBounds || oldBounds.left !== newBounds.left || oldBounds.top !== newBounds.top || oldBounds.right !== newBounds.right || oldBounds.bottom !== newBounds.bottom) {
            const eventType = "boundschanged";
            if (this.events.isEnabled(eventType)) {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
            if (this.parent) {
                this.parent.markDirty();
                this.parent.markDirtyBounds();
            }
            // Update tooltip position together with the Sprite
            if (this.getPrivate("showingTooltip")) {
                this.showTooltip();
            }
        }
    }
    _fixMinBounds(bounds) {
        let minWidth = this.get("minWidth", this.getPrivate("minWidth"));
        let minHeight = this.get("minHeight", this.getPrivate("minHeight"));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minWidth)) {
            if (bounds.right - bounds.left < minWidth) {
                bounds.right = bounds.left + minWidth;
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minHeight)) {
            if (bounds.bottom - bounds.top < minHeight) {
                bounds.bottom = bounds.top + minHeight;
            }
        }
        let privateWidth = this.getPrivate("width");
        let privateHeight = this.getPrivate("height");
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(privateWidth)) {
            if (privateWidth > 0) {
                bounds.right = bounds.left + privateWidth;
            } else {
                bounds.left = bounds.right + privateWidth;
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(privateHeight)) {
            if (privateHeight > 0) {
                bounds.bottom = bounds.top + privateHeight;
            } else {
                bounds.top = bounds.bottom + privateHeight;
            }
        }
    }
    _removeParent(parent) {
        if (parent) {
            parent.children.removeValue(this);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(parent._percentageSizeChildren, this);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(parent._percentagePositionChildren, this);
        }
    }
    _clearDirty() {
        super._clearDirty();
        this._sizeDirty = false;
        this._statesHandled = false;
    }
    /**
     * Simulate hover over element.
     */ hover() {
        this.showTooltip();
        this._handleOver();
    }
    /**
     * Simulate unhover over element.
     */ unhover() {
        this.hideTooltip();
        this._handleOut();
    }
    /**
     * Shows element's [[Tooltip]].
     */ showTooltip(point) {
        const tooltip = this.getTooltip();
        const tooltipText = this.get("tooltipText");
        const tooltipHTML = this.get("tooltipHTML");
        if ((tooltipText || tooltipHTML) && tooltip) {
            const tooltipPosition = this.get("tooltipPosition");
            const tooltipTarget = this.getPrivate("tooltipTarget", this);
            if (tooltipPosition == "fixed" || !point) {
                this._display._setMatrix();
                point = this.toGlobal(tooltipTarget._getTooltipPoint());
            }
            tooltip.set("pointTo", point);
            tooltip.set("tooltipTarget", tooltipTarget);
            if (!tooltip.get("x")) {
                tooltip.set("x", point.x);
            }
            if (!tooltip.get("y")) {
                tooltip.set("y", point.y);
            }
            if (tooltipText) {
                tooltip.label.set("text", tooltipText);
            }
            if (tooltipHTML) {
                tooltip.label.set("html", tooltipHTML);
            }
            const dataItem = this.dataItem;
            if (dataItem) {
                tooltip.label._setDataItem(dataItem);
            }
            if (this.get("showTooltipOn") == "always" && (point.x < 0 || point.x > this._root.width() || point.y < 0 || point.y > this._root.height())) {
                this.hideTooltip();
                return;
            }
            tooltip.label.text.markDirtyText();
            const promise = tooltip.show();
            this.setPrivateRaw("showingTooltip", true);
            return promise;
        }
    }
    /**
     * Hides element's [[Tooltip]].
     */ hideTooltip() {
        const tooltip = this.getTooltip();
        if (tooltip) {
            if (tooltip.get("tooltipTarget") == this.getPrivate("tooltipTarget", this) || this.get("tooltip") == tooltip) {
                let timeout = tooltip.get("keepTargetHover") && tooltip.get("stateAnimationDuration", 0) == 0 ? 400 : undefined;
                const promise = tooltip.hide(timeout);
                this.setPrivateRaw("showingTooltip", false);
                return promise;
            }
        }
    }
    _getTooltipPoint() {
        const bounds = this._localBounds;
        if (bounds) {
            let x = 0;
            let y = 0;
            if (!this.get("isMeasured")) {
                x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("tooltipX", 0), this.width());
                y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("tooltipY", 0), this.height());
            } else {
                x = bounds.left + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("tooltipX", 0), bounds.right - bounds.left);
                y = bounds.top + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("tooltipY", 0), bounds.bottom - bounds.top);
            }
            return {
                x,
                y
            };
        }
        return {
            x: 0,
            y: 0
        };
    }
    /**
     * Returns [[Tooltip]] used for this element.
     *
     * @return Tooltip
     */ getTooltip() {
        let tooltip = this.get("tooltip");
        if (!tooltip) {
            let parent = this.parent;
            if (parent) {
                return parent.getTooltip();
            }
        } else {
            return tooltip;
        }
    }
    _updatePosition() {
        const parent = this.parent;
        let dx = this.get("dx", 0);
        let dy = this.get("dy", 0);
        let x = this.get("x");
        let _x = this.getPrivate("x");
        let xx = 0;
        let yy = 0;
        const position = this.get("position");
        if (x instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
            if (parent) {
                x = parent.innerWidth() * x.value + parent.get("paddingLeft", 0);
            } else {
                x = 0;
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(x)) {
            xx = x + dx;
        } else {
            if (_x != null) {
                xx = _x;
            } else if (parent) {
                if (position == "relative") {
                    xx = parent.get("paddingLeft", 0) + dx;
                }
            }
        }
        let y = this.get("y");
        let _y = this.getPrivate("y");
        if (y instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
            if (parent) {
                y = parent.innerHeight() * y.value + parent.get("paddingTop", 0);
            } else {
                y = 0;
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(y)) {
            yy = y + dy;
        } else {
            if (_y != null) {
                yy = _y;
            } else if (parent) {
                if (position == "relative") {
                    yy = parent.get("paddingTop", 0) + dy;
                }
            }
        }
        const display = this._display;
        if (display.x != xx || display.y != yy) {
            display.invalidateBounds();
            display.x = xx;
            display.y = yy;
            const eventType = "positionchanged";
            if (this.events.isEnabled(eventType)) {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
        // Update tooltip position together with the Sprite
        if (this.getPrivate("showingTooltip")) {
            this.showTooltip();
        }
    }
    /**
     * Returns element's actual X position in pixels.
     *
     * @return X (px)
     */ x() {
        let x = this.get("x");
        let _x = this.getPrivate("x");
        const parent = this.parent;
        if (parent) {
            if (x instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(x, parent.innerWidth()) + parent.get("paddingLeft", 0);
            } else {
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(x)) {
                    if (_x != null) {
                        return _x;
                    } else {
                        return parent.get("paddingLeft", this._display.x);
                    }
                } else {
                    return x;
                }
            }
        }
        return this._display.x;
    }
    /**
     * Returns element's actual Y position in pixels.
     *
     * @return Y (px)
     */ y() {
        let _y = this.getPrivate("y");
        if (_y != null) {
            return _y;
        }
        let y = this.get("y");
        const parent = this.parent;
        if (parent) {
            if (y instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(y, parent.innerHeight()) + parent.get("paddingTop", 0);
            } else {
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(y)) {
                    if (_y != null) {
                        return _y;
                    } else {
                        return parent.get("paddingTop", this._display.y);
                    }
                } else {
                    return y;
                }
            }
        }
        return this._display.y;
    }
    _dispose() {
        super._dispose();
        this._display.dispose();
        this._removeTemplateField();
        this._removeParent(this.parent);
        this._root._removeFocusElement(this);
        const tooltip = this.get("tooltip");
        if (tooltip) {
            tooltip.dispose();
        }
        this.markDirty();
    }
    /**
     * @ignore
     */ adjustedLocalBounds() {
        this._fixMinBounds(this._adjustedLocalBounds);
        return this._adjustedLocalBounds;
    }
    /**
     * Returns local coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */ localBounds() {
        return this._localBounds;
    }
    /**
     * Returns adjusted local coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */ bounds() {
        const bounds = this._adjustedLocalBounds;
        const x = this.x();
        const y = this.y();
        return {
            left: bounds.left + x,
            right: bounds.right + x,
            top: bounds.top + y,
            bottom: bounds.bottom + y
        };
    }
    /**
     * Returns global coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */ globalBounds() {
        const bounds = this.localBounds();
        const p0 = this.toGlobal({
            x: bounds.left,
            y: bounds.top
        });
        const p1 = this.toGlobal({
            x: bounds.right,
            y: bounds.top
        });
        const p2 = this.toGlobal({
            x: bounds.right,
            y: bounds.bottom
        });
        const p3 = this.toGlobal({
            x: bounds.left,
            y: bounds.bottom
        });
        return {
            left: Math.min(p0.x, p1.x, p2.x, p3.x),
            top: Math.min(p0.y, p1.y, p2.y, p3.y),
            right: Math.max(p0.x, p1.x, p2.x, p3.x),
            bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
        };
    }
    _onShow(_duration) {}
    _onHide(_duration) {}
    /**
     * Plays initial reveal animation regardless if element is currently hidden
     * or visible.
     *
     * @param   duration  Duration of the animation in milliseconds
     * @param   delay     Delay showing of the element by X milliseconds
     * @return            Promise
     */ appear(duration, delay) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            yield this.hide(0);
            if (delay) {
                return new Promise((success, _error)=>{
                    this.setTimeout(()=>{
                        success(this.show(duration));
                    }, delay);
                });
            } else {
                return this.show(duration);
            }
        });
    }
    /**
     * Shows currently hidden element and returns a `Promise` which completes
     * when all showing animations are finished.
     *
     * ```TypeScript
     * series.show().then(function(ev) {
     *   console.log("Series is now fully visible");
     * })
     * ```
     * ```JavaScript
     * series.show().then(function(ev) {
     *   console.log("Series is now fully visible");
     * })
     * ```
     *
     * @return Promise
     */ show(duration) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            if (!this._isShowing) {
                this._isHidden = false;
                this._isShowing = true;
                this._isHiding = false;
                if (this.states.lookup("default").get("visible")) {
                    this.set("visible", true);
                }
                this._onShow(duration);
                const animations = this.states.applyAnimate("default", duration);
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForAnimations"])(animations);
                this._isShowing = false;
            }
        });
    }
    /**
     * Hides the element and returns a `Promise` which completes when all hiding
     * animations are finished.
     *
     * ```TypeScript
     * series.hide().then(function(ev) {
     *   console.log("Series finished hiding");
     * })
     * ```
     * ```JavaScript
     * series.hide().then(function(ev) {
     *   console.log("Series finished hiding");
     * })
     * ```
     *
     * @return Promise
     */ hide(duration) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            if (!this._isHiding && !this._isHidden) {
                this._isHiding = true;
                this._isShowing = false;
                let state = this.states.lookup("hidden");
                if (!state) {
                    state = this.states.create("hidden", {
                        "opacity": 0,
                        "visible": false
                    });
                }
                this._isHidden = true;
                this._onHide(duration);
                const animations = this.states.applyAnimate("hidden", duration);
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForAnimations"])(animations);
                this._isHiding = false;
            }
        });
    }
    /**
     * Returns `true` if this element is currently hidden.
     *
     * @return Is hidden?
     */ isHidden() {
        return this._isHidden;
    }
    /**
     * Returns `true` if this element is currently animating to a default state.
     *
     * @return Is showing?
     */ isShowing() {
        return this._isShowing;
    }
    /**
     * Returns `true` if this element is currently animating to a hidden state.
     *
     * @return Is hiding?
     */ isHiding() {
        return this._isHiding;
    }
    /**
     * Returns `true` if this element is currently hovered by a pointer.
     *
     * @return Is hovered?
     */ isHover() {
        return this._display.hovering();
    }
    /**
     * Returns `true` if this element does currently have focus.
     *
     * @return Is focused?
     */ isFocus() {
        return this._root.focused(this);
    }
    /**
     * Returns `true` if this element is currently being dragged.
     *
     * @return Is dragged?
     */ isDragging() {
        return this._isDragging;
    }
    /**
     * Returns `false` if if either public or private setting `visible` is set
     * to `false`, or `forceHidden` is set to `true`.
     *
     * @return Visible?
     */ isVisible() {
        if (this.get("visible") && this.getPrivate("visible") && !this.get("forceHidden")) {
            return true;
        }
        return false;
    }
    /**
     * Same as `isVisible()`, except it checks all ascendants, too.
     *
     * @since 5.2.7
     * @return Visible?
     */ isVisibleDeep() {
        return this._parent ? this._parent.isVisibleDeep() && this.isVisible() : this.isVisible();
    }
    /**
     * Returns an actual opacity of the element, taking into account all parents.
     *
     * @return Opacity
     * @since 5.2.11
     */ compositeOpacity() {
        const opacity = this.get("opacity", 1);
        return this._parent ? this._parent.compositeOpacity() * opacity : opacity;
    }
    /**
     * Returns an actual scale of the element, taking into account all parents.
     *
     * @return Opacity
     * @since 5.9.2
     */ compositeScale() {
        const scale = this.get("scale", 1);
        return this._parent ? this._parent.compositeScale() * scale : scale;
    }
    /**
     * Returns an actual roation of the element, taking into account all parents.
     *
     * @return Opacity
     * @since 5.9.2
     */ compositeRotation() {
        const rotation = this.get("rotation", 0);
        return this._parent ? this._parent.compositeRotation() + rotation : rotation;
    }
    /**
     * Returns width of this element in pixels.
     *
     * @return Width (px)
     */ width() {
        let width = this.get("width");
        let maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
        let minWidth = this.get("minWidth", this.getPrivate("minWidth"));
        let privateWidth = this.getPrivate("width");
        let w = 0;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(privateWidth)) {
            w = privateWidth;
        } else {
            if (width == null) {
                if (this._adjustedLocalBounds) {
                    w = this._adjustedLocalBounds.right - this._adjustedLocalBounds.left;
                }
            } else {
                if (width instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                    const parent = this.parent;
                    if (parent) {
                        w = parent.innerWidth() * width.value;
                    } else {
                        w = this._root.width() * width.value;
                    }
                } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(width)) {
                    w = width;
                }
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minWidth)) {
            w = Math.max(minWidth, w);
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth)) {
            w = Math.min(maxWidth, w);
        }
        return w;
    }
    /**
     * Returns maximum allowed width of this element in pixels.
     *
     * @return Maximum width (px)
     */ maxWidth() {
        let maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth)) {
            return maxWidth;
        } else {
            let width = this.get("width");
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(width)) {
                return width;
            }
        }
        const parent = this.parent;
        if (parent) {
            return parent.innerWidth();
        }
        return this._root.width();
    }
    /**
     * Returns maximum allowed height of this element in pixels.
     *
     * @return Maximum height (px)
     */ maxHeight() {
        let maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxHeight)) {
            return maxHeight;
        } else {
            let height = this.get("height");
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(height)) {
                return height;
            }
        }
        const parent = this.parent;
        if (parent) {
            return parent.innerHeight();
        }
        return this._root.height();
    }
    /**
     * Returns height of this element in pixels.
     *
     * @return Height (px)
     */ height() {
        let height = this.get("height");
        let maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
        let minHeight = this.get("minHeight", this.getPrivate("minHeight"));
        let privateHeight = this.getPrivate("height");
        let h = 0;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(privateHeight)) {
            h = privateHeight;
        } else {
            if (height == null) {
                if (this._adjustedLocalBounds) {
                    h = this._adjustedLocalBounds.bottom - this._adjustedLocalBounds.top;
                }
            } else {
                if (height instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                    const parent = this.parent;
                    if (parent) {
                        h = parent.innerHeight() * height.value;
                    } else {
                        h = this._root.height() * height.value;
                    }
                } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(height)) {
                    h = height;
                }
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minHeight)) {
            h = Math.max(minHeight, h);
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxHeight)) {
            h = Math.min(maxHeight, h);
        }
        return h;
    }
    _findStaticTemplate(f) {
        // templateField overrides template
        if (this._templateField && f(this._templateField)) {
            return this._templateField;
        }
        return super._findStaticTemplate(f);
    }
    _walkParents(f) {
        if (this._parent) {
            this._walkParent(f);
        }
    }
    _walkParent(f) {
        if (this._parent) {
            this._parent._walkParent(f);
        }
        f(this);
    }
    /**
     * Parent [[Container]] of this element.
     *
     * @return Parent container
     */ get parent() {
        return this._parent;
    }
    _setParent(parent, updateChildren = false) {
        const prevParent = this._parent;
        if (parent !== prevParent) {
            this.markDirtyBounds();
            parent.markDirty();
            this._parent = parent;
            if (updateChildren) {
                this._removeParent(prevParent);
                if (parent) {
                    this._addPercentageSizeChildren();
                    this._addPercentagePositionChildren();
                }
            }
            this.markDirtyPosition();
            this._applyThemes();
        }
    }
    /**
     * Returns an instance of [[NumberFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return NumberFormatter instace
     */ getNumberFormatter() {
        return this.get("numberFormatter", this._root.numberFormatter);
    }
    /**
     * Returns an instance of [[DateFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return DateFormatter instace
     */ getDateFormatter() {
        return this.get("dateFormatter", this._root.dateFormatter);
    }
    /**
     * Returns an instance of [[DurationFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return DurationFormatter instace
     */ getDurationFormatter() {
        return this.get("durationFormatter", this._root.durationFormatter);
    }
    /**
     * Converts X/Y coordinate within this element to a global coordinate.
     *
     * @param  point  Local coordinate
     * @return        Global coordinate
     */ toGlobal(point) {
        return this._display.toGlobal(point);
    }
    /**
     * Converts global X/Y coordinate to a coordinate within this element.
     *
     * @param  point  Global coordinate
     * @return        Local coordinate
     */ toLocal(point) {
        return this._display.toLocal(point);
    }
    _getDownPoint() {
        const id = this._getDownPointId();
        if (id) {
            return this._downPoints[id];
        }
    }
    _getDownPointId() {
        if (this._downPoints) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keysOrdered(this._downPoints, (a, b)=>{
                if (a > b) {
                    return 1;
                }
                if (a < b) {
                    return -1;
                }
                return 0;
            })[0];
        }
    }
    /**
     * Moves sprite to the end of the parent's children array.
     *
     * Depending on `layout` setting of the parten container, it may effect the
     * positioning or overlapping order of the elements.
     */ toFront() {
        const parent = this.parent;
        if (parent) {
            parent.children.moveValue(this, parent.children.length - 1);
        }
    }
    /**
     * Moves sprite to the beginning of the parent's children array.
     *
     * Depending on `layout` setting of the parten container, it may effect the
     * positioning or overlapping order of the elements.
     */ toBack() {
        const parent = this.parent;
        if (parent) {
            parent.children.moveValue(this, 0);
        }
    }
}
Object.defineProperty(Sprite, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Sprite"
});
Object.defineProperty(Sprite, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Sprite.className
    ])
}); //# sourceMappingURL=Sprite.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Graphics": ()=>Graphics,
    "visualSettings": ()=>visualSettings
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$PicturePattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/PicturePattern.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$backend$2f$Renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
const visualSettings = [
    "fill",
    "fillOpacity",
    "stroke",
    "strokeWidth",
    "strokeOpacity",
    "fillPattern",
    "strokePattern",
    "fillGradient",
    "strokeGradient",
    "strokeDasharray",
    "strokeDashoffset",
    "shadowBlur",
    "shadowColor",
    "shadowOpacity",
    "shadowOffsetX",
    "shadowOffsetY",
    "blur",
    "sepia",
    "invert",
    "brightness",
    "hue",
    "contrast",
    "saturate"
];
class Graphics extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeGraphics()
        });
        Object.defineProperty(this, "_clear", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("draw") || this.isDirty("svgPath")) {
            this.markDirtyBounds();
        }
        if (this.isDirty("fill") || this.isDirty("stroke") || this.isDirty("visible") || this.isDirty("forceHidden") || this.isDirty("scale") || this.isDirty("fillGradient") || this.isDirty("strokeGradient") || this.isDirty("fillPattern") || this.isDirty("strokePattern") || this.isDirty("fillOpacity") || this.isDirty("strokeOpacity") || this.isDirty("strokeWidth") || this.isDirty("draw") || this.isDirty("blendMode") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("svgPath") || this.isDirty("lineJoin") || this.isDirty("shadowColor") || this.isDirty("shadowBlur") || this.isDirty("shadowOffsetX") || this.isDirty("shadowOffsetY")) {
            this._clear = true;
        }
        this._display.crisp = this.get("crisp", false);
        if (this.isDirty("fillGradient")) {
            const gradient = this.get("fillGradient");
            if (gradient) {
                this._display.isMeasured = true;
                const gradientTarget = gradient.get("target");
                if (gradientTarget) {
                    this._disposers.push(gradientTarget.events.on("boundschanged", ()=>{
                        this._markDirtyKey("fill");
                    }));
                    this._disposers.push(gradientTarget.events.on("positionchanged", ()=>{
                        this._markDirtyKey("fill");
                    }));
                }
            }
        }
        if (this.isDirty("strokeGradient")) {
            const gradient = this.get("strokeGradient");
            if (gradient) {
                this._display.isMeasured = true;
                const gradientTarget = gradient.get("target");
                if (gradientTarget) {
                    this._disposers.push(gradientTarget.events.on("boundschanged", ()=>{
                        this._markDirtyKey("stroke");
                    }));
                    this._disposers.push(gradientTarget.events.on("positionchanged", ()=>{
                        this._markDirtyKey("stroke");
                    }));
                }
            }
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            this.markDirtyBounds();
            this.markDirtyLayer();
            this._display.clear();
            let strokeDasharray = this.get("strokeDasharray");
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(strokeDasharray)) {
                if (strokeDasharray < 0.5) {
                    strokeDasharray = [
                        0
                    ];
                } else {
                    strokeDasharray = [
                        strokeDasharray
                    ];
                }
            }
            this._display.setLineDash(strokeDasharray);
            const strokeDashoffset = this.get("strokeDashoffset");
            if (strokeDashoffset) {
                this._display.setLineDashOffset(strokeDashoffset);
            }
            const blendMode = this.get("blendMode", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$backend$2f$Renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BlendMode"].NORMAL);
            this._display.blendMode = blendMode;
            const draw = this.get("draw");
            if (draw && typeof draw === "function") {
                draw(this._display, this);
            }
            const svgPath = this.get("svgPath");
            if (svgPath != null) {
                this._display.svgPath(svgPath);
            }
        }
    }
    _afterChanged() {
        super._afterChanged();
        if (this._clear) {
            const fill = this.get("fill");
            const fillGradient = this.get("fillGradient");
            const fillPattern = this.get("fillPattern");
            const fillOpacity = this.get("fillOpacity");
            const stroke = this.get("stroke");
            const strokeGradient = this.get("strokeGradient");
            const strokePattern = this.get("strokePattern");
            const shadowColor = this.get("shadowColor");
            const shadowBlur = this.get("shadowBlur");
            const shadowOffsetX = this.get("shadowOffsetX");
            const shadowOffsetY = this.get("shadowOffsetY");
            const shadowOpacity = this.get("shadowOpacity");
            if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {
                this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);
            }
            if (fill && !fillGradient) {
                this._display.beginFill(fill, fillOpacity);
                this._display.endFill();
            }
            if (fillGradient) {
                if (fill) {
                    const stops = fillGradient.get("stops", []);
                    if (stops.length) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(stops, (stop)=>{
                            if ((!stop.color || stop.colorInherited) && fill) {
                                stop.color = fill;
                                stop.colorInherited = true;
                            }
                            if (stop.opacity == null || stop.opacityInherited) {
                                stop.opacity = fillOpacity;
                                stop.opacityInherited = true;
                            }
                        });
                    }
                }
                const gradient = fillGradient.getFill(this);
                if (gradient) {
                    this._display.beginFill(gradient, fillOpacity);
                    this._display.endFill();
                }
            }
            if (fillPattern) {
                const pattern = fillPattern.pattern;
                if (pattern) {
                    this._display.beginFill(pattern, fillOpacity);
                    this._display.endFill();
                    if (fillPattern instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$PicturePattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PicturePattern"]) {
                        fillPattern.events.once("loaded", ()=>{
                            this._clear = true;
                            this.markDirty();
                        });
                    }
                }
            }
            if (stroke || strokeGradient || strokePattern) {
                const strokeOpacity = this.get("strokeOpacity");
                let strokeWidth = this.get("strokeWidth", 1);
                if (this.get("nonScalingStroke")) {
                    strokeWidth = strokeWidth / this.get("scale", 1);
                }
                if (this.get("crisp")) {
                    strokeWidth /= this._root._renderer.resolution;
                }
                const lineJoin = this.get("lineJoin");
                if (stroke && !strokeGradient) {
                    this._display.lineStyle(strokeWidth, stroke, strokeOpacity, lineJoin);
                    this._display.endStroke();
                }
                if (strokeGradient) {
                    const stops = strokeGradient.get("stops", []);
                    if (stops.length) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(stops, (stop)=>{
                            if ((!stop.color || stop.colorInherited) && stroke) {
                                stop.color = stroke;
                                stop.colorInherited = true;
                            }
                            if (stop.opacity == null || stop.opacityInherited) {
                                stop.opacity = strokeOpacity;
                                stop.opacityInherited = true;
                            }
                        });
                    }
                    const gradient = strokeGradient.getFill(this);
                    if (gradient) {
                        this._display.lineStyle(strokeWidth, gradient, strokeOpacity, lineJoin);
                        this._display.endStroke();
                    }
                }
                if (strokePattern) {
                    /*
                    let changed = false;
                    
                    if (stroke && (!strokePattern.get("color") || strokePattern.get("colorInherited"))) {
                        strokePattern.set("color", stroke);
                        strokePattern.set("colorInherited", true);
                        changed = true;
                    }
                    if (changed) {
                        // @todo: is this OK?
                        strokePattern._changed();
                    }
                    */ let pattern = strokePattern.pattern;
                    if (pattern) {
                        this._display.lineStyle(strokeWidth, pattern, strokeOpacity, lineJoin);
                        this._display.endStroke();
                        if (strokePattern instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$PicturePattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PicturePattern"]) {
                            strokePattern.events.once("loaded", ()=>{
                                this._clear = true;
                                this.markDirty();
                            });
                        }
                    }
                }
            }
            if (this.getPrivate("showingTooltip")) {
                this.showTooltip();
            }
        }
        this._clear = false;
    }
}
Object.defineProperty(Graphics, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Graphics"
});
Object.defineProperty(Graphics, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"].classNames.concat([
        Graphics.className
    ])
}); //# sourceMappingURL=Graphics.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Rectangle": ()=>Rectangle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Rectangle extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _afterNew() {
        super._afterNew();
        this._display.isMeasured = true;
        this.setPrivateRaw("trustBounds", true);
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear && !this.get("draw")) {
            this._draw();
        }
    }
    _draw() {
        this._display.drawRect(0, 0, this.width(), this.height());
    }
    _updateSize() {
        this.markDirty();
        this._clear = true;
    }
}
Object.defineProperty(Rectangle, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Rectangle"
});
Object.defineProperty(Rectangle, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Rectangle.className
    ])
}); //# sourceMappingURL=Rectangle.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "RoundedRectangle": ()=>RoundedRectangle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
class RoundedRectangle extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("cornerRadiusTL") || this.isDirty("cornerRadiusTR") || this.isDirty("cornerRadiusBR") || this.isDirty("cornerRadiusBL")) {
            this._clear = true;
        }
    }
    _draw() {
        let width = this.width();
        let height = this.height();
        let w = width;
        let h = height;
        let wSign = w / Math.abs(width);
        let hSign = h / Math.abs(height);
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(w) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(h)) {
            let minSide = Math.min(w, h) / 2;
            let crtl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("cornerRadiusTL", 8), minSide);
            let crtr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("cornerRadiusTR", 8), minSide);
            let crbr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("cornerRadiusBR", 8), minSide);
            let crbl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("cornerRadiusBL", 8), minSide);
            let maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));
            crtl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(crtl, 0, maxcr);
            crtr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(crtr, 0, maxcr);
            crbr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(crbr, 0, maxcr);
            crbl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(crbl, 0, maxcr);
            const display = this._display;
            display.moveTo(crtl * wSign, 0);
            display.lineTo(w - crtr * wSign, 0);
            if (crtr > 0) {
                display.arcTo(w, 0, w, crtr * hSign, crtr);
            }
            display.lineTo(w, h - crbr * hSign);
            if (crbr > 0) {
                display.arcTo(w, h, w - crbr * wSign, h, crbr);
            }
            display.lineTo(crbl * wSign, h);
            if (crbl > 0) {
                display.arcTo(0, h, 0, h - crbl * hSign, crbl);
            }
            display.lineTo(0, crtl * hSign);
            if (crtl > 0) {
                display.arcTo(0, 0, crtl * wSign, 0, crtl);
            }
            display.closePath();
        }
    }
}
Object.defineProperty(RoundedRectangle, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RoundedRectangle"
});
Object.defineProperty(RoundedRectangle, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"].classNames.concat([
        RoundedRectangle.className
    ])
}); //# sourceMappingURL=RoundedRectangle.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Layout": ()=>Layout,
    "eachChildren": ()=>eachChildren
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function eachChildren(container, f) {
    if (container.get("reverseChildren", false)) {
        container.children.eachReverse(f);
    } else {
        container.children.each(f);
    }
}
class Layout extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
}
Object.defineProperty(Layout, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Layout"
});
Object.defineProperty(Layout, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Layout.className
    ])
}); //# sourceMappingURL=Layout.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "HorizontalLayout": ()=>HorizontalLayout
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
class HorizontalLayout extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"] {
    /**
     * @ignore
     */ updateContainer(container) {
        let paddingLeft = container.get("paddingLeft", 0);
        let availableWidth = container.innerWidth();
        let totalPercent = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.isVisible()) {
                if (child.get("position") == "relative") {
                    let childWidth = child.get("width");
                    if (childWidth instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        totalPercent += childWidth.value;
                        let w = availableWidth * childWidth.value;
                        let minWidth = child.get("minWidth", child.getPrivate("minWidth", -Infinity));
                        if (minWidth > w) {
                            availableWidth -= minWidth;
                            totalPercent -= childWidth.value;
                        }
                        let maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                        if (w > maxWidth) {
                            availableWidth -= maxWidth;
                            totalPercent -= childWidth.value;
                        }
                    } else {
                        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(childWidth)) {
                            childWidth = child.width();
                        }
                        availableWidth -= childWidth + child.get("marginLeft", 0) + child.get("marginRight", 0);
                    }
                }
            }
        });
        if (availableWidth <= 0 || availableWidth == Infinity) {
            availableWidth = .1;
        }
        //if (availableWidth > 0) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.isVisible()) {
                if (child.get("position") == "relative") {
                    let childWidth = child.get("width");
                    if (childWidth instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        let privateWidth = availableWidth * childWidth.value / totalPercent - child.get("marginLeft", 0) - child.get("marginRight", 0);
                        let minWidth = child.get("minWidth", child.getPrivate("minWidth", -Infinity));
                        let maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                        privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);
                        child.setPrivate("width", privateWidth);
                    } else {
                        if (child._prevSettings.width instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                            child.setPrivate("width", undefined);
                        }
                    }
                }
            }
        });
        //}
        let prevX = paddingLeft;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.get("position") == "relative") {
                if (child.isVisible()) {
                    let bounds = child.adjustedLocalBounds();
                    let marginLeft = child.get("marginLeft", 0);
                    let marginRight = child.get("marginRight", 0);
                    let maxWidth = child.get("maxWidth");
                    let left = bounds.left;
                    let right = bounds.right;
                    if (maxWidth) {
                        if (right - left > maxWidth) {
                            right = left + maxWidth;
                        }
                    }
                    let x = prevX + marginLeft - left;
                    child.setPrivate("x", x);
                    prevX = x + right + marginRight;
                } else {
                    child.setPrivate("x", undefined);
                }
            }
        });
    }
}
Object.defineProperty(HorizontalLayout, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "HorizontalLayout"
});
Object.defineProperty(HorizontalLayout, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"].classNames.concat([
        HorizontalLayout.className
    ])
}); //# sourceMappingURL=HorizontalLayout.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "VerticalLayout": ()=>VerticalLayout
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
class VerticalLayout extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"] {
    /**
     * @ignore
     */ updateContainer(container) {
        let paddingTop = container.get("paddingTop", 0);
        let availableHeight = container.innerHeight();
        let totalPercent = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.isVisible()) {
                if (child.get("position") == "relative") {
                    let childHeight = child.get("height");
                    if (childHeight instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        totalPercent += childHeight.value;
                        let h = availableHeight * childHeight.value;
                        let minHeight = child.get("minHeight", child.getPrivate("minHeight", -Infinity));
                        if (minHeight > h) {
                            availableHeight -= minHeight;
                            totalPercent -= childHeight.value;
                        }
                        let maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                        if (h > maxHeight) {
                            availableHeight -= maxHeight;
                            totalPercent -= childHeight.value;
                        }
                    } else {
                        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(childHeight)) {
                            childHeight = child.height();
                        }
                        availableHeight -= childHeight + child.get("marginTop", 0) + child.get("marginBottom", 0);
                    }
                }
            }
        });
        if (availableHeight <= 0 || availableHeight == Infinity) {
            availableHeight = .1;
        }
        //if (availableHeight > 0) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.isVisible()) {
                if (child.get("position") == "relative") {
                    let childHeight = child.get("height");
                    if (childHeight instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        let privateHeight = availableHeight * childHeight.value / totalPercent - child.get("marginTop", 0) - child.get("marginBottom", 0);
                        let minHeight = child.get("minHeight", child.getPrivate("minHeight", -Infinity));
                        let maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                        privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);
                        child.setPrivate("height", privateHeight);
                    } else {
                        if (child._prevSettings.height instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                            child.setPrivate("height", undefined);
                        }
                    }
                }
            }
        });
        //}
        let prevY = paddingTop;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.get("position") == "relative") {
                if (child.isVisible()) {
                    let bounds = child.adjustedLocalBounds();
                    let marginTop = child.get("marginTop", 0);
                    let top = bounds.top;
                    let bottom = bounds.bottom;
                    let maxHeight = child.get("maxHeight");
                    if (maxHeight) {
                        if (bottom - top > maxHeight) {
                            bottom = top + maxHeight;
                        }
                    }
                    let marginBottom = child.get("marginBottom", 0);
                    let y = prevY + marginTop - top;
                    child.setPrivate("y", y);
                    prevY = y + bottom + marginBottom;
                } else {
                    child.setPrivate("y", undefined);
                }
            }
        });
    }
}
Object.defineProperty(VerticalLayout, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "VerticalLayout"
});
Object.defineProperty(VerticalLayout, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"].classNames.concat([
        VerticalLayout.className
    ])
}); //# sourceMappingURL=VerticalLayout.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "GridLayout": ()=>GridLayout
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
class GridLayout extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"] {
    _afterNew() {
        this._setRawDefault("maxColumns", Number.MAX_VALUE);
        super._afterNew();
    }
    /**
     * @ignore
     */ updateContainer(container) {
        let paddingLeft = container.get("paddingLeft", 0);
        let paddingRight = container.get("paddingRight", 0);
        let paddingTop = container.get("paddingTop", 0);
        let availableWidth = container.maxWidth() - paddingLeft - paddingRight;
        let minCellWidth = availableWidth;
        let maxCellWidth = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.get("visible") && child.getPrivate("visible") && !child.get("forceHidden")) {
                if (child.get("position") != "absolute") {
                    let childWidth = child.width();
                    if (childWidth < minCellWidth) {
                        minCellWidth = childWidth;
                    }
                    if (childWidth > maxCellWidth) {
                        maxCellWidth = childWidth;
                    }
                }
            }
        });
        minCellWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(minCellWidth, 1, availableWidth);
        maxCellWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(maxCellWidth, 1, availableWidth);
        let columnCount = 1;
        if (this.get("fixedWidthGrid")) {
            columnCount = availableWidth / maxCellWidth;
        } else {
            columnCount = availableWidth / minCellWidth;
        }
        columnCount = Math.max(1, Math.floor(columnCount));
        columnCount = Math.min(this.get("maxColumns", Number.MAX_VALUE), columnCount);
        let columnWidths = this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
        let prevY = paddingTop;
        let column = 0;
        let maxColumnHeight = 0;
        columnCount = columnWidths.length;
        let prevX = paddingLeft;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            if (child.get("position") == "relative" && child.isVisible()) {
                const marginTop = child.get("marginTop", 0);
                const marginBottom = child.get("marginBottom", 0);
                let bounds = child.adjustedLocalBounds();
                let marginLeft = child.get("marginLeft", 0);
                let marginRight = child.get("marginRight", 0);
                let x = prevX + marginLeft - bounds.left;
                let y = prevY + marginTop - bounds.top;
                child.setPrivate("x", x);
                child.setPrivate("y", y);
                prevX += columnWidths[column] + marginRight;
                maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);
                column++;
                if (column >= columnCount) {
                    column = 0;
                    prevX = paddingLeft;
                    prevY += maxColumnHeight;
                }
            }
        });
    }
    /**
     * @ignore
     */ getColumnWidths(container, columnCount, maxCellWidth, availableWidth) {
        let totalWidth = 0;
        let columnWidths = [];
        let column = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["eachChildren"])(container, (child)=>{
            let bounds = child.adjustedLocalBounds();
            if (child.get("position") != "absolute" && child.isVisible()) {
                if (this.get("fixedWidthGrid")) {
                    columnWidths[column] = maxCellWidth;
                } else {
                    columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get("marginLeft", 0) + child.get("marginRight", 0));
                }
                if (column < container.children.length - 1) {
                    column++;
                    if (column == columnCount) {
                        column = 0;
                    }
                }
            }
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(columnWidths, (w)=>{
            totalWidth += w;
        });
        if (totalWidth > availableWidth) {
            if (columnCount > 2) {
                columnCount -= 1;
                return this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
            } else {
                return [
                    availableWidth
                ];
            }
        }
        return columnWidths;
    }
}
Object.defineProperty(GridLayout, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "GridLayout"
});
Object.defineProperty(GridLayout, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Layout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Layout"].classNames.concat([
        GridLayout.className
    ])
}); //# sourceMappingURL=GridLayout.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Container": ()=>Container
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Children$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Children.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$HorizontalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$VerticalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$GridLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
;
class Container extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeContainer()
        });
        Object.defineProperty(this, "_childrenDisplay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeContainer()
        });
        /**
         * List of Container's child elements.
         */ Object.defineProperty(this, "children", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Children$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Children"](this)
        });
        Object.defineProperty(this, "_percentageSizeChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_percentagePositionChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_prevWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_prevHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_contentWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_contentHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_contentMask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_vsbd0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_vsbd1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _afterNew() {
        super._afterNew();
        this._display.addChild(this._childrenDisplay);
    }
    _dispose() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachReverse(this.allChildren(), (child)=>{
            child.dispose();
        });
        if (this.getPrivate("htmlElement")) {
            this._root._removeHTMLContent(this);
        }
        super._dispose();
    }
    _changed() {
        super._changed();
        if (this.isDirty("interactiveChildren")) {
            this._display.interactiveChildren = this.get("interactiveChildren", false);
        }
        if (this.isDirty("layout")) {
            this._prevWidth = 0;
            this._prevHeight = 0;
            this.markDirtyBounds();
            if (this._prevSettings.layout) {
                this.children.each((child)=>{
                    child.removePrivate("x");
                    child.removePrivate("y");
                });
            }
        }
        if (this.isDirty("paddingTop") || this.isDirty("paddingBottom") || this.isDirty("paddingLeft") || this.isDirty("paddingRight")) {
            this.children.each((child)=>{
                child.markDirtyPosition();
            });
        }
        if (this.isDirty("maskContent")) {
            const childrenDisplay = this._childrenDisplay;
            let contentMask = this._contentMask;
            if (this.get("maskContent")) {
                if (!contentMask) {
                    contentMask = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"].new(this._root, {
                        x: -.5,
                        y: -.5,
                        width: this.width() + 1,
                        height: this.height() + 1
                    });
                    this._contentMask = contentMask;
                    childrenDisplay.addChildAt(contentMask._display, 0);
                    childrenDisplay.mask = contentMask._display;
                }
            } else {
                if (contentMask) {
                    childrenDisplay.removeChild(contentMask._display);
                    childrenDisplay.mask = null;
                    contentMask.dispose();
                    this._contentMask = undefined;
                }
            }
        }
    }
    _updateSize() {
        super._updateSize();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._percentageSizeChildren, (child)=>{
            child._updateSize();
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._percentagePositionChildren, (child)=>{
            child.markDirtyPosition();
            child._updateSize();
        });
        this.updateBackground();
    }
    updateBackground() {
        const background = this.get("background");
        let bounds = this._localBounds;
        if (bounds && !this.isHidden()) {
            let x = bounds.left;
            let y = bounds.top;
            let w = bounds.right - x;
            let h = bounds.bottom - y;
            let maxWidth = this.get("maxWidth");
            let maxHeight = this.get("maxHeight");
            if (maxHeight) {
                if (h > maxHeight) {
                    h = maxHeight;
                }
            }
            if (maxWidth) {
                if (w > maxWidth) {
                    w = maxWidth;
                }
            }
            let width = this.width();
            let height = this.height();
            if (background) {
                background.setAll({
                    width: w,
                    height: h,
                    x: x,
                    y: y
                });
                if (this._display.interactive) {
                    background._display.interactive = true;
                }
            }
            const contentMask = this._contentMask;
            if (contentMask) {
                contentMask.setAll({
                    width: width + 1,
                    height: height + 1
                });
            }
            const verticalScrollbar = this.get("verticalScrollbar");
            if (verticalScrollbar) {
                verticalScrollbar.set("height", height);
                verticalScrollbar.set("x", width - verticalScrollbar.width() - verticalScrollbar.get("marginRight", 0));
                verticalScrollbar.set("end", verticalScrollbar.get("start", 0) + height / this._contentHeight);
                const bg = verticalScrollbar.get("background");
                if (bg) {
                    bg.setAll({
                        width: verticalScrollbar.width(),
                        height: height
                    });
                }
                let visible = true;
                if (this._contentHeight <= height) {
                    visible = false;
                }
                verticalScrollbar.setPrivate("visible", visible);
            }
        }
    }
    _applyThemes(force = false) {
        if (super._applyThemes(force)) {
            this.eachChildren((child)=>{
                child._applyThemes(force);
            });
            return true;
        } else {
            return false;
        }
    }
    _applyState(name) {
        super._applyState(name);
        if (this.get("setStateOnChildren")) {
            this.eachChildren((child)=>{
                child.states.apply(name);
            });
        }
    }
    _applyStateAnimated(name, duration) {
        super._applyStateAnimated(name, duration);
        if (this.get("setStateOnChildren")) {
            this.eachChildren((child)=>{
                child.states.applyAnimate(name, duration);
            });
        }
    }
    /**
     * Returns container's inner width (width without padding) in pixels.
     *
     * @return Inner width (px)
     */ innerWidth() {
        return this.width() - this.get("paddingRight", 0) - this.get("paddingLeft", 0);
    }
    /**
     * Returns container's inner height (height without padding) in pixels.
     *
     * @return Inner height (px)
     */ innerHeight() {
        return this.height() - this.get("paddingTop", 0) - this.get("paddingBottom", 0);
    }
    _getBounds() {
        let width = this.get("width");
        let height = this.get("height");
        let pWidth = this.getPrivate("width");
        let pHeight = this.getPrivate("height");
        let bounds = {
            left: 0,
            top: 0,
            right: this.width(),
            bottom: this.height()
        };
        let layout = this.get("layout");
        let horizontal = false;
        let vertical = false;
        if (layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$HorizontalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HorizontalLayout"] || layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$GridLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GridLayout"]) {
            horizontal = true;
        }
        if (layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$VerticalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VerticalLayout"]) {
            vertical = true;
        }
        if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get("verticalScrollbar")) {
        // void
        } else {
            let m = Number.MAX_VALUE;
            let l = m;
            let r = -m;
            let t = m;
            let b = -m;
            const paddingLeft = this.get("paddingLeft", 0);
            const paddingTop = this.get("paddingTop", 0);
            const paddingRight = this.get("paddingRight", 0);
            const paddingBottom = this.get("paddingBottom", 0);
            this.children.each((child)=>{
                if (child.get("position") != "absolute" && child.get("isMeasured")) {
                    let childBounds = child.adjustedLocalBounds();
                    let childX = child.x();
                    let childY = child.y();
                    let cl = childX + childBounds.left;
                    let cr = childX + childBounds.right;
                    let ct = childY + childBounds.top;
                    let cb = childY + childBounds.bottom;
                    if (horizontal) {
                        cl -= child.get("marginLeft", 0);
                        cr += child.get("marginRight", 0);
                    }
                    if (vertical) {
                        ct -= child.get("marginTop", 0);
                        cb += child.get("marginBottom", 0);
                    }
                    if (cl < l) {
                        l = cl;
                    }
                    if (cr > r) {
                        r = cr;
                    }
                    if (ct < t) {
                        t = ct;
                    }
                    if (cb > b) {
                        b = cb;
                    }
                }
            });
            if (l == m) {
                l = 0;
            }
            if (r == -m) {
                r = 0;
            }
            if (t == m) {
                t = 0;
            }
            if (b == -m) {
                b = 0;
            }
            bounds.left = l - paddingLeft;
            bounds.top = t - paddingTop;
            bounds.right = r + paddingRight;
            bounds.bottom = b + paddingBottom;
            const minWidth = this.get("minWidth");
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minWidth) && minWidth > 0) {
                if (bounds.right - bounds.left < minWidth) {
                    if (bounds.right >= minWidth) {
                        bounds.left = bounds.right - minWidth;
                    } else {
                        bounds.right = bounds.left + minWidth;
                    }
                }
            }
            const minHeight = this.get("minHeight");
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(minHeight) && minHeight > 0) {
                if (bounds.bottom - bounds.top < minHeight) {
                    if (bounds.bottom >= minHeight) {
                        bounds.top = bounds.bottom - minHeight;
                    } else {
                        bounds.bottom = bounds.top + minHeight;
                    }
                }
            }
        }
        this._contentWidth = bounds.right - bounds.left;
        this._contentHeight = bounds.bottom - bounds.top;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(width)) {
            bounds.left = 0;
            bounds.right = width;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(pWidth)) {
            bounds.left = 0;
            bounds.right = pWidth;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(height)) {
            bounds.top = 0;
            bounds.bottom = height;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(pHeight)) {
            bounds.top = 0;
            bounds.bottom = pHeight;
        }
        this._localBounds = bounds;
    }
    _updateBounds() {
        const layout = this.get("layout");
        if (layout) {
            layout.updateContainer(this);
        }
        super._updateBounds();
        this.updateBackground();
    }
    /**
     * @ignore
     */ markDirty() {
        super.markDirty();
        this._root._addDirtyParent(this);
    }
    _prepareChildren() {
        const innerWidth = this.innerWidth();
        const innerHeight = this.innerHeight();
        if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {
            let layout = this.get("layout");
            let horizontal = false;
            let vertical = false;
            if (layout) {
                if (layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$HorizontalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HorizontalLayout"] || layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$GridLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GridLayout"]) {
                    horizontal = true;
                }
                if (layout instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$VerticalLayout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VerticalLayout"]) {
                    vertical = true;
                }
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._percentageSizeChildren, (child)=>{
                if (!horizontal) {
                    let width = child.get("width");
                    if (width instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        child.setPrivate("width", width.value * innerWidth);
                    }
                }
                if (!vertical) {
                    let height = child.get("height");
                    if (height instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                        child.setPrivate("height", height.value * innerHeight);
                    }
                }
            });
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._percentagePositionChildren, (child)=>{
                child.markDirtyPosition();
                child.markDirtyBounds();
            });
            this._prevWidth = innerWidth;
            this._prevHeight = innerHeight;
            this._sizeDirty = true;
            this.updateBackground();
        }
        this._handleStates();
    }
    _updateHTMLContent() {
        const html = this.get("html");
        if (html && html !== "") {
            this._root._setHTMLContent(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["populateString"])(this, this.get("html", "")));
        } else {
            this._root._removeHTMLContent(this);
        }
        this._root._positionHTMLElement(this);
    }
    _updateChildren() {
        if (this.isDirty("html")) {
            this._updateHTMLContent();
        }
        if (this.isDirty("verticalScrollbar")) {
            const verticalScrollbar = this.get("verticalScrollbar");
            if (verticalScrollbar) {
                verticalScrollbar._setParent(this);
                verticalScrollbar.startGrip.setPrivate("visible", false);
                verticalScrollbar.endGrip.setPrivate("visible", false);
                this.set("maskContent", true);
                this.set("paddingRight", verticalScrollbar.width() + verticalScrollbar.get("marginRight", 0) + verticalScrollbar.get("marginLeft", 0));
                let background = this.get("background");
                if (!background) {
                    background = this.set("background", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"].new(this._root, {
                        themeTags: [
                            "background"
                        ],
                        fillOpacity: 0,
                        fill: this._root.interfaceColors.get("alternativeBackground")
                    }));
                }
                this._vsbd0 = this.events.on("wheel", (event)=>{
                    const wheelEvent = event.originalEvent;
                    // Ignore wheel event if it is happening on a non-chart element, e.g. if
                    // some page element is over the chart.
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isLocalEvent(wheelEvent, this)) {
                        wheelEvent.preventDefault();
                    } else {
                        return;
                    }
                    let shiftY = wheelEvent.deltaY / 5000;
                    const start = verticalScrollbar.get("start", 0);
                    const end = verticalScrollbar.get("end", 1);
                    if (start + shiftY <= 0) {
                        shiftY = -start;
                    }
                    if (end + shiftY >= 1) {
                        shiftY = 1 - end;
                    }
                    if (start + shiftY >= 0 && end + shiftY <= 1) {
                        verticalScrollbar.set("start", start + shiftY);
                        verticalScrollbar.set("end", end + shiftY);
                    }
                });
                this._disposers.push(this._vsbd0);
                this._vsbd1 = verticalScrollbar.events.on("rangechanged", ()=>{
                    let h = this._contentHeight;
                    const childrenDisplay = this._childrenDisplay;
                    const contentMask = this._contentMask;
                    childrenDisplay.y = -verticalScrollbar.get("start", 0) * h;
                    childrenDisplay.markDirtyLayer();
                    if (contentMask) {
                        contentMask._display.y = -childrenDisplay.y;
                        childrenDisplay.mask = contentMask._display;
                    }
                });
                this._disposers.push(this._vsbd1);
                this._display.addChild(verticalScrollbar._display);
            } else {
                const previous = this._prevSettings.verticalScrollbar;
                if (previous) {
                    this._display.removeChild(previous._display);
                    if (this._vsbd0) {
                        this._vsbd0.dispose();
                    }
                    if (this._vsbd1) {
                        this._vsbd1.dispose();
                    }
                    const childrenDisplay = this._childrenDisplay;
                    childrenDisplay.y = 0;
                    this.setPrivate("height", undefined);
                    this.set("maskContent", false);
                    this.set("paddingRight", undefined);
                }
            }
        }
        if (this.isDirty("background")) {
            // TODO maybe this should dispose ?
            const previous = this._prevSettings["background"];
            if (previous) {
                this._display.removeChild(previous._display);
            }
            const background = this.get("background");
            if (background instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"]) {
                background.set("isMeasured", false);
                background._setParent(this);
                this._display.addChildAt(background._display, 0);
            }
        }
        if (this.isDirty("mask")) {
            const mask = this.get("mask");
            const previous = this._prevSettings["mask"];
            if (previous) {
                this._display.removeChild(previous._display);
                if (previous != mask) {
                    previous.dispose();
                }
            }
            if (mask) {
                const parent = mask.parent;
                if (parent) {
                    parent.children.removeValue(mask);
                }
                mask._setParent(this);
                this._display.addChildAt(mask._display, 0);
                this._childrenDisplay.mask = mask._display;
            }
        }
    }
    _processTemplateField() {
        super._processTemplateField();
        this.children.each((child)=>{
            child._processTemplateField();
        });
    }
    /**
     * @ignore
     */ walkChildren(f) {
        this.children.each((child)=>{
            if (child instanceof Container) {
                child.walkChildren(f);
            }
            f(child);
        });
    }
    eachChildren(f) {
        const background = this.get("background");
        if (background) {
            f(background);
        }
        const verticalScrollbar = this.get("verticalScrollbar");
        if (verticalScrollbar) {
            f(verticalScrollbar);
        }
        const mask = this.get("mask");
        if (mask) {
            f(mask);
        }
        this.children.values.forEach((child)=>{
            f(child);
        });
    }
    allChildren() {
        const output = [];
        this.eachChildren((x)=>{
            output.push(x);
        });
        return output;
    }
    _setDataItem(dataItem) {
        const updated = dataItem !== this._dataItem;
        super._setDataItem(dataItem);
        const html = this.get("html", "");
        if (html && html !== "" && updated) {
            this._root._setHTMLContent(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["populateString"])(this, html));
        }
    }
}
Object.defineProperty(Container, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Container"
});
Object.defineProperty(Container, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"].classNames.concat([
        Container.className
    ])
}); //# sourceMappingURL=Container.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Button.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Button": ()=>Button
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
class Button extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    _afterNew() {
        this._settings.themeTags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
            "button"
        ]);
        super._afterNew();
        if (!this._settings.background) {
            this.set("background", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
                themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
                    "background"
                ])
            }));
        }
        this.setPrivate("trustBounds", true);
    }
    _prepareChildren() {
        super._prepareChildren();
        if (this.isDirty("icon")) {
            const previous = this._prevSettings.icon;
            const icon = this.get("icon");
            if (icon !== previous) {
                this._disposeProperty("icon");
                if (previous) {
                    previous.dispose();
                }
                if (icon) {
                    this.children.push(icon);
                }
                this._prevSettings.icon = icon;
            }
        }
        if (this.isDirty("label")) {
            const previous = this._prevSettings.label;
            const label = this.get("label");
            if (label !== previous) {
                this._disposeProperty("label");
                if (previous) {
                    previous.dispose();
                }
                if (label) {
                    this.children.push(label);
                }
                this._prevSettings.label = label;
            }
        }
    }
}
Object.defineProperty(Button, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Button"
});
Object.defineProperty(Button, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Button.className
    ])
}); //# sourceMappingURL=Button.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/backend/CanvasRenderer.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/** @ignore */ /** */ __turbopack_esm__({
    "CanvasContainer": ()=>CanvasContainer,
    "CanvasDisplayObject": ()=>CanvasDisplayObject,
    "CanvasGraphics": ()=>CanvasGraphics,
    "CanvasImage": ()=>CanvasImage,
    "CanvasLayer": ()=>CanvasLayer,
    "CanvasPivot": ()=>CanvasPivot,
    "CanvasRadialText": ()=>CanvasRadialText,
    "CanvasRenderer": ()=>CanvasRenderer,
    "CanvasRendererEvent": ()=>CanvasRendererEvent,
    "CanvasText": ()=>CanvasText,
    "CanvasTextStyle": ()=>CanvasTextStyle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$backend$2f$Renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$svg$2d$arc$2d$to$2d$cubic$2d$bezier$2f$modules$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/svg-arc-to-cubic-bezier/modules/index.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @ignore
 */ function checkArgs(name, actual, expected) {
    if (actual !== expected) {
        throw new Error("Required " + expected + " arguments for " + name + " but got " + actual);
    }
}
/**
 * @ignore
 */ function checkMinArgs(name, actual, expected) {
    if (actual < expected) {
        throw new Error("Required at least " + expected + " arguments for " + name + " but got " + actual);
    }
}
/**
 * @ignore
 */ function checkEvenArgs(name, actual, expected) {
    checkMinArgs(name, actual, expected);
    if (actual % expected !== 0) {
        throw new Error("Arguments for " + name + " must be in pairs of " + expected);
    }
}
/**
 * @ignore
 * This splits the flag so that way 0017 will be processed as 0 0 17
 *
 * This is important for weird paths like `M17 5A1 1 0 0017 30 1 1 0 0017 5`
 */ function splitArcFlags(args) {
    for(let i = 0; i < args.length; i += 7){
        let index = i + 3;
        let flag = args[index];
        if (flag.length > 1) {
            const a = /^([01])([01])(.*)$/.exec(flag);
            if (a !== null) {
                args.splice(index, 0, a[1]);
                ++index;
                args.splice(index, 0, a[2]);
                ++index;
                if (a[3].length > 0) {
                    args[index] = a[3];
                } else {
                    args.splice(index, 1);
                }
            }
        }
        ++index;
        flag = args[index];
        if (flag.length > 1) {
            const a = /^([01])(.+)$/.exec(flag);
            if (a !== null) {
                args.splice(index, 0, a[1]);
                ++index;
                args[index] = a[2];
            }
        }
    }
}
/**
 * @ignore
 */ function assertBinary(value) {
    if (value === 0 || value === 1) {
        return value;
    } else {
        throw new Error("Flag must be 0 or 1");
    }
}
//  1 -> 0xffffff * (2 / 2)
//  2 -> 0xffffff * (1 / 2)
//
//  3 -> 0xffffff * (3 / 4)
//  4 -> 0xffffff * (1 / 4)
//
//  5 -> 0xffffff * (7 / 8)
//  6 -> 0xffffff * (5 / 8)
//  7 -> 0xffffff * (3 / 8)
//  8 -> 0xffffff * (1 / 8)
//
//  9 -> 0xffffff * (15 / 16)
// 10 -> 0xffffff * (13 / 16)
// 11 -> 0xffffff * (11 / 16)
// 12 -> 0xffffff *  (9 / 16)
// 13 -> 0xffffff *  (7 / 16)
// 14 -> 0xffffff *  (5 / 16)
// 15 -> 0xffffff *  (3 / 16)
// 16 -> 0xffffff *  (1 / 16)
// @todo remove this old color distribution algo if the new one pans out
/*function distributeId(id: number): number {
    if (id === 1) {
        return 0x000001;

    } else {
        // Finds the closest power of 2
        const base = Math.pow(2, Math.ceil(Math.log(id) / Math.log(2)));

        // Translates the id into an odd fraction index
        const index = ((base - id) * 2) + 1;

        // TODO is Math.round correct ?
        return Math.round(0xffffff * (index / base));
    }
}*/ /**
 * Function by smeans:
 * https://lowcode.life/generating-unique-contrasting-colors-in-javascript/
 * @ignore
 */ function distributeId(id) {
    const rgb = [
        0,
        0,
        0
    ];
    for(let i = 0; i < 24; i++){
        rgb[i % 3] <<= 1;
        rgb[i % 3] |= id & 0x01;
        id >>= 1;
    }
    return (rgb[0] | 0) + (rgb[1] << 8) + (rgb[2] << 16);
}
/**
 * @ignore
 */ function eachTargets(hitTarget, f) {
    for(;;){
        if (hitTarget.interactive) {
            if (!f(hitTarget)) {
                break;
            }
        }
        if (hitTarget._parent) {
            hitTarget = hitTarget._parent;
        } else {
            break;
        }
    }
}
// TODO feature detection for mouse/touch/pointer
/**
 * @ignore
 */ function onPointerEvent(element, name, f) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(element, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getRendererEvent(name), (event)=>{
        const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getEventTarget(event);
        let touches = event.touches;
        if (touches) {
            if (touches.length == 0) {
                touches = event.changedTouches;
            }
            f(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(touches), target);
        } else {
            f([
                event
            ], target);
        }
    });
}
/**
 * @ignore
 */ function isTainted(image) {
    const canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    context.drawImage(image, 0, 0, 1, 1);
    try {
        context.getImageData(0, 0, 1, 1);
        return false;
    } catch (err) {
        console.warn("Image \"" + image.src + "\" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors");
        return true;
    }
}
/**
 * This is needed to workaround a bug in iOS which causes it to not GC canvas elements.
 *
 * @ignore
 */ function clearCanvas(view) {
    view.width = 0;
    view.height = 0;
    view.style.width = "0px";
    view.style.height = "0px";
}
/**
 * Aligns the coordinate to the pixel, so it renders crisp
 *
 * @ignore
 */ function crisp(x) {
    return Math.floor(x) + .5;
}
class CanvasPivot {
    constructor(){
        Object.defineProperty(this, "_x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    set x(value) {
        this._x = value;
    }
    set y(value) {
        this._y = value;
    }
}
class CanvasDisplayObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DisposerClass"] {
    constructor(renderer){
        super();
        Object.defineProperty(this, "_layer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "mask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "visible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "exportable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "interactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "inactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "wheelable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "cancelTouch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "isMeasured", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "buttonMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "alpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "compoundAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "angle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "crisp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "pivot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new CanvasPivot()
        });
        Object.defineProperty(this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cursorOverStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_replacedCursorStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_localMatrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix"]()
        });
        Object.defineProperty(this, "_matrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix"]()
        });
        // TODO can this be replaced with _localMatrix ?
        Object.defineProperty(this, "_uMatrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix"]()
        });
        Object.defineProperty(this, "_renderer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_localBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_bounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_colorId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._renderer = renderer;
    }
    subStatus(status) {
        return {
            inactive: this.inactive == null ? status.inactive : this.inactive,
            layer: this._layer || status.layer
        };
    }
    _dispose() {
        this._renderer._removeObject(this);
        this.getLayer().dirty = true;
    }
    getCanvas() {
        return this.getLayer().view;
    }
    getLayer() {
        let self = this;
        for(;;){
            if (self._layer) {
                return self._layer;
            } else if (self._parent) {
                self = self._parent;
            } else {
                return this._renderer.defaultLayer;
            }
        }
    }
    setLayer(order, margin) {
        if (order == null) {
            this._layer = undefined;
        } else {
            const visible = true;
            this._layer = this._renderer.getLayer(order, visible);
            this._layer.visible = visible;
            this._layer.margin = margin;
            if (margin) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.setInteractive(this._layer.view, false);
            }
            this._renderer._ghostLayer.setMargin(this._renderer.layers);
            if (this._parent) {
                this._parent.registerChildLayer(this._layer);
            }
            this._layer.dirty = true;
            this._renderer.resizeLayer(this._layer);
            this._renderer.resizeGhost();
        }
    }
    markDirtyLayer() {
        this.getLayer().dirty = true;
    }
    clear() {
        this.invalidateBounds();
    }
    invalidateBounds() {
        this._localBounds = undefined;
    }
    _addBounds(_bounds) {}
    _getColorId() {
        if (this._colorId === undefined) {
            this._colorId = this._renderer.paintId(this);
        }
        return this._colorId;
    }
    _isInteractive(status) {
        return !status.inactive && (this.interactive || this._renderer._forceInteractive > 0);
    }
    _isInteractiveMask(status) {
        return this._isInteractive(status);
    }
    contains(child) {
        for(;;){
            if (child === this) {
                return true;
            } else if (child._parent) {
                child = child._parent;
            } else {
                return false;
            }
        }
    }
    toGlobal(point) {
        return this._matrix.apply(point);
    }
    toLocal(point) {
        return this._matrix.applyInverse(point);
    }
    getLocalMatrix() {
        this._uMatrix.setTransform(0, 0, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
        return this._uMatrix;
    }
    getLocalBounds() {
        if (!this._localBounds) {
            const bn = 10000000;
            this._localBounds = {
                left: bn,
                top: bn,
                right: -bn,
                bottom: -bn
            };
            this._addBounds(this._localBounds);
        }
        return this._localBounds;
    }
    getAdjustedBounds(bounds) {
        this._setMatrix();
        const matrix = this.getLocalMatrix();
        const p0 = matrix.apply({
            x: bounds.left,
            y: bounds.top
        });
        const p1 = matrix.apply({
            x: bounds.right,
            y: bounds.top
        });
        const p2 = matrix.apply({
            x: bounds.right,
            y: bounds.bottom
        });
        const p3 = matrix.apply({
            x: bounds.left,
            y: bounds.bottom
        });
        return {
            left: Math.min(p0.x, p1.x, p2.x, p3.x),
            top: Math.min(p0.y, p1.y, p2.y, p3.y),
            right: Math.max(p0.x, p1.x, p2.x, p3.x),
            bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
        };
    }
    on(key, callback, context) {
        if (this.interactive) {
            return this._renderer._addEvent(this, key, callback, context);
        } else {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{});
        }
    }
    _setMatrix() {
        // TODO only calculate this if it has actually changed
        this._localMatrix.setTransform(this.x, this.y, this.pivot.x, this.pivot.y, // Converts degrees to radians
        this.angle * Math.PI / 180, this.scale);
        this._matrix.copyFrom(this._localMatrix);
        if (this._parent) {
            // TODO only calculate this if it has actually changed
            this._matrix.prepend(this._parent._matrix);
        }
    }
    _transform(context, resolution) {
        const m = this._matrix;
        let tx = m.tx * resolution;
        let ty = m.ty * resolution;
        if (this.crisp) {
            tx = crisp(tx);
            ty = crisp(ty);
        }
        context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, tx, ty);
    }
    _transformMargin(context, resolution, margin) {
        const m = this._matrix;
        context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, (m.tx + margin.left) * resolution, (m.ty + margin.top) * resolution);
    }
    _transformLayer(context, resolution, layer) {
        if (layer.margin) {
            this._transformMargin(context, layer.scale || resolution, layer.margin);
        } else {
            this._transform(context, layer.scale || resolution);
        }
    }
    render(status) {
        if (this.visible && (this.exportable !== false || !this._renderer._omitTainted)) {
            this._setMatrix();
            const subStatus = this.subStatus(status);
            const resolution = this._renderer.resolution;
            const layers = this._renderer.layers;
            const ghostLayer = this._renderer._ghostLayer;
            const ghostContext = ghostLayer.context;
            const mask = this.mask;
            if (mask) {
                mask._setMatrix();
            }
            // TODO improve this
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(layers, (layer)=>{
                if (layer) {
                    const context = layer.context;
                    context.save();
                    // We must apply the mask before we transform the element
                    if (mask) {
                        mask._transformLayer(context, resolution, layer);
                        mask._runPath(context);
                        context.clip();
                    }
                    context.globalAlpha = this.compoundAlpha * this.alpha;
                    this._transformLayer(context, resolution, layer);
                    if (this.filter) {
                        context.filter = this.filter;
                    }
                }
            });
            ghostContext.save();
            // We must apply the mask before we transform the element
            if (mask && this._isInteractiveMask(subStatus)) {
                mask._transformMargin(ghostContext, resolution, ghostLayer.margin);
                mask._runPath(ghostContext);
                ghostContext.clip();
            }
            this._transformMargin(ghostContext, resolution, ghostLayer.margin);
            this._render(subStatus);
            ghostContext.restore();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(layers, (layer)=>{
                if (layer) {
                    layer.context.restore();
                }
            });
        }
    }
    _render(status) {
        if (this.exportable === false) {
            status.layer.tainted = true;
        }
    }
    hovering() {
        return this._renderer._hovering.has(this);
    }
    dragging() {
        return this._renderer._dragging.some((x)=>x.value === this);
    }
    shouldCancelTouch() {
        const renderer = this._renderer;
        if (renderer.tapToActivate && !renderer._touchActive) {
            return false;
        }
        if (this.cancelTouch) {
            return true;
        } else if (this._parent) {
            return this._parent.shouldCancelTouch();
        }
        return false;
    }
}
class CanvasContainer extends CanvasDisplayObject {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "interactiveChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_childLayers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_children", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    _isInteractiveMask(status) {
        return this.interactiveChildren || super._isInteractiveMask(status);
    }
    addChild(child) {
        child._parent = this;
        this._children.push(child);
        if (child._layer) {
            this.registerChildLayer(child._layer);
        }
    }
    addChildAt(child, index) {
        child._parent = this;
        this._children.splice(index, 0, child);
        if (child._layer) {
            this.registerChildLayer(child._layer);
        }
    }
    removeChild(child) {
        child._parent = undefined;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(this._children, child);
    }
    _render(status) {
        super._render(status);
        const renderer = this._renderer;
        if (this.interactive && this.interactiveChildren) {
            ++renderer._forceInteractive;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._children, (child)=>{
            child.compoundAlpha = this.compoundAlpha * this.alpha;
            child.render(status);
        });
        if (this.interactive && this.interactiveChildren) {
            --renderer._forceInteractive;
        }
    }
    registerChildLayer(layer) {
        if (!this._childLayers) {
            this._childLayers = [];
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pushOne(this._childLayers, layer);
        if (this._parent) {
            this._parent.registerChildLayer(layer);
        }
    }
    markDirtyLayer(deep = false) {
        super.markDirtyLayer();
        if (deep && this._childLayers) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._childLayers, (layer)=>layer.dirty = true);
        }
    }
    _dispose() {
        super._dispose();
        if (this._childLayers) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._childLayers, (layer)=>{
                layer.dirty = true;
            });
        }
    }
}
/**
 * @ignore
 */ function setPoint(bounds, point) {
    bounds.left = Math.min(bounds.left, point.x);
    bounds.top = Math.min(bounds.top, point.y);
    bounds.right = Math.max(bounds.right, point.x);
    bounds.bottom = Math.max(bounds.bottom, point.y);
}
/**
 * @ignore
 */ class Op {
    colorize(_context, _forceColor) {}
    colorizeGhost(context, forceColor) {
        this.colorize(context, forceColor);
    }
    path(_context) {}
    pathGhost(context) {
        this.path(context);
    }
    addBounds(_bounds) {}
}
/**
 * @ignore
 */ class BeginPath extends Op {
    colorize(context, _forceColor) {
        context.beginPath();
    }
}
/**
 * @ignore
 */ class BeginFill extends Op {
    constructor(color){
        super();
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
    }
    colorize(context, forceColor) {
        if (forceColor !== undefined) {
            context.fillStyle = forceColor;
        } else {
            context.fillStyle = this.color;
        }
    }
}
/**
 * @ignore
 */ class EndFill extends Op {
    constructor(clearShadow){
        super();
        Object.defineProperty(this, "clearShadow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clearShadow
        });
    }
    colorize(context, _forceColor) {
        context.fill();
        if (this.clearShadow) {
            context.shadowColor = "";
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
    }
}
/**
 * @ignore
 */ class EndStroke extends Op {
    colorize(context, _forceColor) {
        context.stroke();
    }
}
/**
 * @ignore
 */ class LineStyle extends Op {
    constructor(width, color, lineJoin){
        super();
        Object.defineProperty(this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: width
        });
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
        Object.defineProperty(this, "lineJoin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lineJoin
        });
    }
    colorize(context, forceColor) {
        if (forceColor !== undefined) {
            context.strokeStyle = forceColor;
        } else {
            context.strokeStyle = this.color;
        }
        context.lineWidth = this.width;
        if (this.lineJoin) {
            context.lineJoin = this.lineJoin;
        }
    }
}
/**
 * @ignore
 */ class LineDash extends Op {
    constructor(dash){
        super();
        Object.defineProperty(this, "dash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dash
        });
    }
    colorize(context, _forceColor) {
        context.setLineDash(this.dash);
    }
}
/**
 * @ignore
 */ class LineDashOffset extends Op {
    constructor(dashOffset){
        super();
        Object.defineProperty(this, "dashOffset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dashOffset
        });
    }
    colorize(context, _forceColor) {
        context.lineDashOffset = this.dashOffset;
    }
}
/**
 * @ignore
 */ class DrawRect extends Op {
    constructor(x, y, width, height){
        super();
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        Object.defineProperty(this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: width
        });
        Object.defineProperty(this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: height
        });
    }
    path(context) {
        context.rect(this.x, this.y, this.width, this.height);
    }
    addBounds(bounds) {
        const l = this.x;
        const t = this.y;
        const r = l + this.width;
        const b = t + this.height;
        setPoint(bounds, {
            x: l,
            y: t
        });
        setPoint(bounds, {
            x: r,
            y: t
        });
        setPoint(bounds, {
            x: l,
            y: b
        });
        setPoint(bounds, {
            x: r,
            y: b
        });
    }
}
/**
 * @ignore
 */ class DrawCircle extends Op {
    constructor(x, y, radius){
        super();
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        Object.defineProperty(this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
    }
    path(context) {
        context.moveTo(this.x + this.radius, this.y);
        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
    }
    // TODO handle skewing and rotation
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.x - this.radius,
            y: this.y - this.radius
        });
        setPoint(bounds, {
            x: this.x + this.radius,
            y: this.y + this.radius
        });
    }
}
/**
 * @ignore
 */ class DrawEllipse extends Op {
    constructor(x, y, radiusX, radiusY){
        super();
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        Object.defineProperty(this, "radiusX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radiusX
        });
        Object.defineProperty(this, "radiusY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radiusY
        });
    }
    path(context) {
        context.ellipse(0, 0, this.radiusX, this.radiusY, 0, 0, Math.PI * 2);
    }
    // TODO handle skewing and rotation
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.x - this.radiusX,
            y: this.y - this.radiusY
        });
        setPoint(bounds, {
            x: this.x + this.radiusX,
            y: this.y + this.radiusY
        });
    }
}
/**
 * @ignore
 */ class Arc extends Op {
    constructor(cx, cy, radius, startAngle, endAngle, anticlockwise){
        super();
        Object.defineProperty(this, "cx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cx
        });
        Object.defineProperty(this, "cy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cy
        });
        Object.defineProperty(this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
        Object.defineProperty(this, "startAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: startAngle
        });
        Object.defineProperty(this, "endAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: endAngle
        });
        Object.defineProperty(this, "anticlockwise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: anticlockwise
        });
    }
    path(context) {
        if (this.radius > 0) {
            context.arc(this.cx, this.cy, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
        }
    }
    addBounds(bounds) {
        let arcBounds = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getArcBounds(this.cx, this.cy, this.startAngle * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.DEGREES, this.endAngle * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.DEGREES, this.radius);
        setPoint(bounds, {
            x: arcBounds.left,
            y: arcBounds.top
        });
        setPoint(bounds, {
            x: arcBounds.right,
            y: arcBounds.bottom
        });
    }
}
/**
 * @ignore
 */ class ArcTo extends Op {
    constructor(x1, y1, x2, y2, radius){
        super();
        Object.defineProperty(this, "x1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x1
        });
        Object.defineProperty(this, "y1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y1
        });
        Object.defineProperty(this, "x2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x2
        });
        Object.defineProperty(this, "y2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y2
        });
        Object.defineProperty(this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
    }
    path(context) {
        if (this.radius > 0) {
            context.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
        }
    }
    // TODO: add points
    addBounds(_bounds) {
    /*
        // not finished
        https://math.stackexchange.com/questions/1781438/finding-the-center-of-a-circle-given-two-points-and-a-radius-algebraically

        if (prevPoint) {
            let x1 = prevPoint.x;
            let y1 = prevPoint.y;
            let x2 = this.x2;
            let y2 = this.y2;
            let r = this.radius;

            let xa = (x2 - x1) / 2;
            let ya = (y2 - y1) / 2;

            let x0 = x1 + xa;
            let y0 = y1 + ya;

            let a = Math.hypot(xa, ya);
            let b = Math.sqrt(r * r - a * a);

            let cx = x0 + b * ya / a;
            let cy = y0 - b * xa / a;

            console.log(cx, cy);
        }*/ }
}
/**
 * @ignore
 */ class LineTo extends Op {
    constructor(x, y){
        super();
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
    }
    path(context) {
        context.lineTo(this.x, this.y);
    }
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.x,
            y: this.y
        });
    }
}
/**
 * @ignore
 */ class MoveTo extends Op {
    constructor(x, y){
        super();
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
    }
    path(context) {
        context.moveTo(this.x, this.y);
    }
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.x,
            y: this.y
        });
    }
}
/**
 * @ignore
 */ class ClosePath extends Op {
    path(context) {
        context.closePath();
    }
}
/**
 * @ignore
 */ class BezierCurveTo extends Op {
    constructor(cpX, cpY, cpX2, cpY2, toX, toY){
        super();
        Object.defineProperty(this, "cpX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX
        });
        Object.defineProperty(this, "cpY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY
        });
        Object.defineProperty(this, "cpX2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX2
        });
        Object.defineProperty(this, "cpY2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY2
        });
        Object.defineProperty(this, "toX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toX
        });
        Object.defineProperty(this, "toY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toY
        });
    }
    path(context) {
        context.bezierCurveTo(this.cpX, this.cpY, this.cpX2, this.cpY2, this.toX, this.toY);
    }
    // TODO: OK?
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.cpX,
            y: this.cpY
        });
        setPoint(bounds, {
            x: this.cpX2,
            y: this.cpY2
        });
        setPoint(bounds, {
            x: this.toX,
            y: this.toY
        });
    }
}
/**
 * @ignore
 */ class QuadraticCurveTo extends Op {
    constructor(cpX, cpY, toX, toY){
        super();
        Object.defineProperty(this, "cpX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX
        });
        Object.defineProperty(this, "cpY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY
        });
        Object.defineProperty(this, "toX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toX
        });
        Object.defineProperty(this, "toY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toY
        });
    }
    path(context) {
        context.quadraticCurveTo(this.cpX, this.cpY, this.toX, this.toY);
    }
    // TODO: OK?
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.cpX,
            y: this.cpY
        });
        setPoint(bounds, {
            x: this.toX,
            y: this.toY
        });
    }
}
/**
 * @ignore
 */ class Shadow extends Op {
    constructor(color, blur, offsetX, offsetY, opacity){
        super();
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
        Object.defineProperty(this, "blur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: blur
        });
        Object.defineProperty(this, "offsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: offsetX
        });
        Object.defineProperty(this, "offsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: offsetY
        });
        Object.defineProperty(this, "opacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: opacity
        });
    }
    colorize(context, _forceColor) {
        if (this.opacity) {
            context.fillStyle = this.color;
        }
        context.shadowColor = this.color;
        context.shadowBlur = this.blur;
        context.shadowOffsetX = this.offsetX;
        context.shadowOffsetY = this.offsetY;
    }
    colorizeGhost(_context, _forceColor) {}
}
/**
 * @ignore
 */ class GraphicsImage extends Op {
    constructor(image, width, height, x, y){
        super();
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: image
        });
        Object.defineProperty(this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: width
        });
        Object.defineProperty(this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: height
        });
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
    }
    path(context) {
        context.drawImage(this.image, this.x, this.y, this.width, this.height);
    }
    // TODO: OK?
    addBounds(bounds) {
        setPoint(bounds, {
            x: this.x,
            y: this.y
        });
        setPoint(bounds, {
            x: this.width,
            y: this.height
        });
    }
}
class CanvasGraphics extends CanvasDisplayObject {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_operations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "blendMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$backend$2f$Renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BlendMode"].NORMAL
        });
        Object.defineProperty(this, "_hasShadows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_fillAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_strokeAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    clear() {
        super.clear();
        this._operations.length = 0;
    }
    _pushOp(op) {
        this._operations.push(op);
    }
    beginFill(color, alpha = 1) {
        this._fillAlpha = alpha;
        if (color) {
            if (color instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                this._pushOp(new BeginFill(color.toCSS(alpha)));
            } else {
                this.isMeasured = true;
                this._pushOp(new BeginFill(color));
            }
        } else {
            this._pushOp(new BeginFill("rgba(0, 0, 0, " + alpha + ")"));
        }
    }
    endFill() {
        this._pushOp(new EndFill(this._hasShadows));
    }
    endStroke() {
        this._pushOp(new EndStroke());
    }
    beginPath() {
        this._pushOp(new BeginPath());
    }
    lineStyle(width = 0, color, alpha = 1, lineJoin) {
        this._strokeAlpha = alpha;
        if (color) {
            if (color instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                this._pushOp(new LineStyle(width, color.toCSS(alpha), lineJoin));
            } else {
                this._pushOp(new LineStyle(width, color, lineJoin));
            }
        } else {
            this._pushOp(new LineStyle(width, "rgba(0, 0, 0, " + alpha + ")", lineJoin));
        }
    }
    setLineDash(dash) {
        this._pushOp(new LineDash(dash ? dash : []));
    }
    setLineDashOffset(dashOffset = 0) {
        this._pushOp(new LineDashOffset(dashOffset));
    }
    drawRect(x, y, width, height) {
        this._pushOp(new DrawRect(x, y, width, height));
    }
    drawCircle(x, y, radius) {
        this._pushOp(new DrawCircle(x, y, radius));
    }
    drawEllipse(x, y, radiusX, radiusY) {
        this._pushOp(new DrawEllipse(x, y, radiusX, radiusY));
    }
    arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false) {
        this._pushOp(new Arc(cx, cy, radius, startAngle, endAngle, anticlockwise));
    }
    arcTo(x1, y1, x2, y2, radius) {
        this._pushOp(new ArcTo(x1, y1, x2, y2, radius));
    }
    lineTo(x, y) {
        this._pushOp(new LineTo(x, y));
    }
    moveTo(x, y) {
        this._pushOp(new MoveTo(x, y));
    }
    bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {
        this._pushOp(new BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY));
    }
    quadraticCurveTo(cpX, cpY, toX, toY) {
        this._pushOp(new QuadraticCurveTo(cpX, cpY, toX, toY));
    }
    closePath() {
        this._pushOp(new ClosePath());
    }
    shadow(color, blur = 0, offsetX = 0, offsetY = 0, opacity) {
        this._hasShadows = true;
        this._pushOp(new Shadow(opacity ? color.toCSS(opacity) : color.toCSS(this._fillAlpha || this._strokeAlpha), blur, offsetX, offsetY));
    }
    image(image, width, height, x, y) {
        this._pushOp(new GraphicsImage(image, width, height, x, y));
    }
    // https://svgwg.org/svg2-draft/paths.html#DProperty
    // TODO better error checking
    svgPath(path) {
        let x = 0;
        let y = 0;
        let cpx = null;
        let cpy = null;
        let qcpx = null;
        let qcpy = null;
        const SEGMENTS_REGEXP = /([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g;
        const ARGS_REGEXP = /[\u0009\u0020\u000A\u000C\u000D]*([\+\-]?[0-9]*\.?[0-9]+(?:[eE][\+\-]?[0-9]+)?)[\u0009\u0020\u000A\u000C\u000D]*,?/g;
        let match;
        while((match = SEGMENTS_REGEXP.exec(path)) !== null){
            const name = match[1];
            const rest = match[2];
            const args = [];
            while((match = ARGS_REGEXP.exec(rest)) !== null){
                args.push(match[1]);
            }
            // Reset control point
            if (name !== "S" && name !== "s" && name !== "C" && name !== "c") {
                cpx = null;
                cpy = null;
            }
            // Reset control point
            if (name !== "Q" && name !== "q" && name !== "T" && name !== "t") {
                qcpx = null;
                qcpy = null;
            }
            switch(name){
                case "M":
                    checkEvenArgs(name, args.length, 2);
                    x = +args[0];
                    y = +args[1];
                    this.moveTo(x, y);
                    for(let i = 2; i < args.length; i += 2){
                        x = +args[i];
                        y = +args[i + 1];
                        this.lineTo(x, y);
                    }
                    break;
                case "m":
                    checkEvenArgs(name, args.length, 2);
                    x += +args[0];
                    y += +args[1];
                    this.moveTo(x, y);
                    for(let i = 2; i < args.length; i += 2){
                        x += +args[i];
                        y += +args[i + 1];
                        this.lineTo(x, y);
                    }
                    break;
                case "L":
                    checkEvenArgs(name, args.length, 2);
                    for(let i = 0; i < args.length; i += 2){
                        x = +args[i];
                        y = +args[i + 1];
                        this.lineTo(x, y);
                    }
                    break;
                case "l":
                    checkEvenArgs(name, args.length, 2);
                    for(let i = 0; i < args.length; i += 2){
                        x += +args[i];
                        y += +args[i + 1];
                        this.lineTo(x, y);
                    }
                    break;
                case "H":
                    checkMinArgs(name, args.length, 1);
                    for(let i = 0; i < args.length; ++i){
                        x = +args[i];
                        this.lineTo(x, y);
                    }
                    break;
                case "h":
                    checkMinArgs(name, args.length, 1);
                    for(let i = 0; i < args.length; ++i){
                        x += +args[i];
                        this.lineTo(x, y);
                    }
                    break;
                case "V":
                    checkMinArgs(name, args.length, 1);
                    for(let i = 0; i < args.length; ++i){
                        y = +args[i];
                        this.lineTo(x, y);
                    }
                    break;
                case "v":
                    checkMinArgs(name, args.length, 1);
                    for(let i = 0; i < args.length; ++i){
                        y += +args[i];
                        this.lineTo(x, y);
                    }
                    break;
                case "C":
                    checkEvenArgs(name, args.length, 6);
                    for(let i = 0; i < args.length; i += 6){
                        const x1 = +args[i];
                        const y1 = +args[i + 1];
                        cpx = +args[i + 2];
                        cpy = +args[i + 3];
                        x = +args[i + 4];
                        y = +args[i + 5];
                        this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                    }
                    break;
                case "c":
                    checkEvenArgs(name, args.length, 6);
                    for(let i = 0; i < args.length; i += 6){
                        const x1 = +args[i] + x;
                        const y1 = +args[i + 1] + y;
                        cpx = +args[i + 2] + x;
                        cpy = +args[i + 3] + y;
                        x += +args[i + 4];
                        y += +args[i + 5];
                        this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                    }
                    break;
                case "S":
                    checkEvenArgs(name, args.length, 4);
                    if (cpx === null || cpy === null) {
                        cpx = x;
                        cpy = y;
                    }
                    for(let i = 0; i < args.length; i += 4){
                        const x1 = 2 * x - cpx;
                        const y1 = 2 * y - cpy;
                        cpx = +args[i];
                        cpy = +args[i + 1];
                        x = +args[i + 2];
                        y = +args[i + 3];
                        this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                    }
                    break;
                case "s":
                    checkEvenArgs(name, args.length, 4);
                    if (cpx === null || cpy === null) {
                        cpx = x;
                        cpy = y;
                    }
                    for(let i = 0; i < args.length; i += 4){
                        const x1 = 2 * x - cpx;
                        const y1 = 2 * y - cpy;
                        cpx = +args[i] + x;
                        cpy = +args[i + 1] + y;
                        x += +args[i + 2];
                        y += +args[i + 3];
                        this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                    }
                    break;
                case "Q":
                    checkEvenArgs(name, args.length, 4);
                    for(let i = 0; i < args.length; i += 4){
                        qcpx = +args[i];
                        qcpy = +args[i + 1];
                        x = +args[i + 2];
                        y = +args[i + 3];
                        this.quadraticCurveTo(qcpx, qcpy, x, y);
                    }
                    break;
                case "q":
                    checkEvenArgs(name, args.length, 4);
                    for(let i = 0; i < args.length; i += 4){
                        qcpx = +args[i] + x;
                        qcpy = +args[i + 1] + y;
                        x += +args[i + 2];
                        y += +args[i + 3];
                        this.quadraticCurveTo(qcpx, qcpy, x, y);
                    }
                    break;
                case "T":
                    checkEvenArgs(name, args.length, 2);
                    if (qcpx === null || qcpy === null) {
                        qcpx = x;
                        qcpy = y;
                    }
                    for(let i = 0; i < args.length; i += 2){
                        qcpx = 2 * x - qcpx;
                        qcpy = 2 * y - qcpy;
                        x = +args[i];
                        y = +args[i + 1];
                        this.quadraticCurveTo(qcpx, qcpy, x, y);
                    }
                    break;
                case "t":
                    checkEvenArgs(name, args.length, 2);
                    if (qcpx === null || qcpy === null) {
                        qcpx = x;
                        qcpy = y;
                    }
                    for(let i = 0; i < args.length; i += 2){
                        qcpx = 2 * x - qcpx;
                        qcpy = 2 * y - qcpy;
                        x += +args[i];
                        y += +args[i + 1];
                        this.quadraticCurveTo(qcpx, qcpy, x, y);
                    }
                    break;
                case "A":
                case "a":
                    const relative = name === "a";
                    splitArcFlags(args);
                    checkEvenArgs(name, args.length, 7);
                    for(let i = 0; i < args.length; i += 7){
                        let cx = +args[i + 5];
                        let cy = +args[i + 6];
                        if (relative) {
                            cx += x;
                            cy += y;
                        }
                        const bs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$svg$2d$arc$2d$to$2d$cubic$2d$bezier$2f$modules$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
                            px: x,
                            py: y,
                            rx: +args[i],
                            ry: +args[i + 1],
                            xAxisRotation: +args[i + 2],
                            largeArcFlag: assertBinary(+args[i + 3]),
                            sweepFlag: assertBinary(+args[i + 4]),
                            cx,
                            cy
                        });
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(bs, (b)=>{
                            this.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y);
                            x = b.x;
                            y = b.y;
                        });
                    }
                    break;
                case "Z":
                case "z":
                    checkArgs(name, args.length, 0);
                    this.closePath();
                    break;
            }
        }
    }
    _runPath(context) {
        context.beginPath();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._operations, (op)=>{
            op.path(context);
        });
    }
    _render(status) {
        super._render(status);
        const layerDirty = status.layer.dirty;
        const interactive = this._isInteractive(status);
        if (layerDirty || interactive) {
            const context = status.layer.context;
            const ghostContext = this._renderer._ghostLayer.context;
            if (layerDirty) {
                context.globalCompositeOperation = this.blendMode;
                context.beginPath();
            }
            let color;
            if (interactive) {
                ghostContext.beginPath();
                color = this._getColorId();
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._operations, (op)=>{
                if (layerDirty) {
                    op.path(context);
                    op.colorize(context, undefined);
                }
                if (interactive) {
                    op.pathGhost(ghostContext);
                    op.colorizeGhost(ghostContext, color);
                }
            });
        }
    }
    renderDetached(context) {
        if (this.visible) {
            this._setMatrix();
            context.save();
            // We must apply the mask before we transform the element
            const mask = this.mask;
            if (mask) {
                mask._setMatrix();
                mask._transform(context, 1);
                mask._runPath(context);
                context.clip();
            }
            // TODO handle compoundAlpha somehow ?
            context.globalAlpha = this.compoundAlpha * this.alpha;
            this._transform(context, 1);
            if (this.filter) {
                context.filter = this.filter;
            }
            context.globalCompositeOperation = this.blendMode;
            context.beginPath();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._operations, (op)=>{
                op.path(context);
                op.colorize(context, undefined);
            });
            context.restore();
        }
    }
    _addBounds(bounds) {
        if (this.visible && this.isMeasured) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._operations, (op)=>{
                op.addBounds(bounds);
            });
        }
    }
}
class CanvasText extends CanvasDisplayObject {
    constructor(renderer, text, style){
        super(renderer);
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "style", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "textVisible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_textInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_originalScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        this.text = text;
        this.style = style;
    }
    invalidateBounds() {
        super.invalidateBounds();
        this._textInfo = undefined;
    }
    _shared(context) {
        if (this.style.textAlign) {
            context.textAlign = this.style.textAlign;
        }
        if (this.style.direction) {
            context.direction = this.style.direction;
        }
        if (this.style.textBaseline) {
            context.textBaseline = this.style.textBaseline;
        }
    }
    _prerender(status, ignoreGhost = false, ignoreFontWeight = false) {
        super._render(status);
        const context = status.layer.context;
        const ghostContext = this._renderer._ghostLayer.context;
        // Font style
        const style = this.style;
        let fontStyle = this._getFontStyle(undefined, ignoreFontWeight);
        context.font = fontStyle;
        if (this._isInteractive(status) && !ignoreGhost) {
            ghostContext.font = fontStyle;
        }
        // Other parameters
        if (style.fill) {
            if (style.fill instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                context.fillStyle = style.fill.toCSS(style.fillOpacity != undefined ? style.fillOpacity : 1);
            } else {
                context.fillStyle = style.fill;
            }
        }
        if (style.shadowColor) {
            status.layer.context.shadowColor = style.shadowColor.toCSS(style.shadowOpacity || 1);
        }
        if (style.shadowBlur) {
            status.layer.context.shadowBlur = style.shadowBlur;
        }
        if (style.shadowOffsetX) {
            status.layer.context.shadowOffsetX = style.shadowOffsetX;
        }
        if (style.shadowOffsetY) {
            status.layer.context.shadowOffsetY = style.shadowOffsetY;
        }
        this._shared(context);
        if (this._isInteractive(status) && !ignoreGhost) {
            ghostContext.fillStyle = this._getColorId();
            this._shared(ghostContext);
        }
    }
    _getFontStyle(style2, ignoreFontWeight = false) {
        // Process defaults
        const style = this.style;
        let fontStyle = [];
        if (style2 && style2.fontVariant) {
            fontStyle.push(style2.fontVariant);
        } else if (style.fontVariant) {
            fontStyle.push(style.fontVariant);
        }
        if (!ignoreFontWeight) {
            if (style2 && style2.fontWeight) {
                fontStyle.push(style2.fontWeight);
            } else if (style.fontWeight) {
                fontStyle.push(style.fontWeight);
            }
        }
        if (style2 && style2.fontStyle) {
            fontStyle.push(style2.fontStyle);
        } else if (style.fontStyle) {
            fontStyle.push(style.fontStyle);
        }
        if (style2 && style2.fontSize) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(style2.fontSize)) {
                style2.fontSize = style2.fontSize + "px";
            }
            fontStyle.push(style2.fontSize);
        } else if (style.fontSize) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(style.fontSize)) {
                style.fontSize = style.fontSize + "px";
            }
            fontStyle.push(style.fontSize);
        }
        if (style2 && style2.fontFamily) {
            fontStyle.push(style2.fontFamily);
        } else if (style.fontFamily) {
            fontStyle.push(style.fontFamily);
        } else if (fontStyle.length) {
            fontStyle.push("Arial");
        }
        return fontStyle.join(" ");
    }
    _render(status) {
        // We need measurements in order to properly position text for alignment
        if (!this._textInfo) {
            this._measure(status);
        }
        if (this.textVisible) {
            const interactive = this._isInteractive(status);
            const context = status.layer.context;
            const layerDirty = status.layer.dirty;
            const ghostContext = this._renderer._ghostLayer.context;
            context.save();
            ghostContext.save();
            this._prerender(status);
            // const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
            // const x = this._localBounds && (this._localBounds.left < 0) ? Math.abs(this._localBounds.left) : 0;
            // Process text info produced by _measure()
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textInfo, (line, _index)=>{
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(line.textChunks, (chunk, _index)=>{
                    // Set style
                    if (chunk.style) {
                        context.save();
                        ghostContext.save();
                        context.font = chunk.style;
                        if (this._isInteractive(status)) {
                            ghostContext.font = chunk.style;
                        }
                    }
                    if (chunk.fill) {
                        context.save();
                        context.fillStyle = chunk.fill.toCSS();
                    // Color does not affect ghostContext so we not set it
                    }
                    // Draw text
                    if (layerDirty) {
                        context.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                    }
                    // Draw underline
                    if (chunk.textDecoration == "underline" || chunk.textDecoration == "line-through") {
                        let thickness = 1;
                        let offset = 1;
                        let fontSize = chunk.height;
                        let offsetX = chunk.offsetX;
                        switch(this.style.textAlign){
                            case "right":
                            case "end":
                                offsetX -= chunk.width;
                                break;
                            case "center":
                                offsetX -= chunk.width / 2;
                                break;
                        }
                        if (chunk.style) {
                            const format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].getTextStyle(chunk.style);
                            switch(format.fontWeight){
                                case "bolder":
                                case "bold":
                                case "700":
                                case "800":
                                case "900":
                                    thickness = 2;
                                    break;
                            }
                        }
                        if (fontSize) {
                            offset = fontSize / 20;
                        }
                        let y;
                        if (chunk.textDecoration == "line-through") {
                            y = thickness + line.offsetY + chunk.offsetY - chunk.height / 2;
                        } else {
                            y = thickness + offset * 1.5 + line.offsetY + chunk.offsetY;
                        }
                        context.save();
                        context.beginPath();
                        if (chunk.fill) {
                            context.strokeStyle = chunk.fill.toCSS();
                        } else if (this.style.fill && this.style.fill instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                            context.strokeStyle = this.style.fill.toCSS();
                        }
                        context.lineWidth = thickness * offset;
                        context.moveTo(offsetX, y);
                        context.lineTo(offsetX + chunk.width, y);
                        context.stroke();
                        context.restore();
                    }
                    if (interactive && this.interactive) {
                        // Draw text in ghost canvas ONLY if it is set as interactive
                        // explicitly. This way we avoid hit test anomalies caused by anti
                        // aliasing of text.
                        ghostContext.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                    }
                    if (chunk.fill) {
                        context.restore();
                    // Color does not affect ghostContext so we not set it
                    }
                    // Reset style
                    if (chunk.style) {
                        context.restore();
                        ghostContext.restore();
                    }
                });
            });
            context.restore();
            ghostContext.restore();
        }
    }
    _addBounds(bounds) {
        if (this.visible && this.isMeasured) {
            //if (this._textVisible) {
            const x = this._measure({
                inactive: this.inactive,
                layer: this.getLayer()
            });
            setPoint(bounds, {
                x: x.left,
                y: x.top
            });
            setPoint(bounds, {
                x: x.right,
                y: x.bottom
            });
        //}
        }
    }
    _ignoreFontWeight() {
        return /apple/i.test(navigator.vendor);
    }
    _measure(status) {
        const context = status.layer.context;
        const ghostContext = this._renderer._ghostLayer.context;
        const rtl = this.style.direction == "rtl";
        // Reset text info
        this._textInfo = [];
        // Init
        const oversizedBehavior = this.style.oversizedBehavior;
        const maxWidth = this.style.maxWidth;
        const truncate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth) && oversizedBehavior == "truncate";
        const wrap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth) && (oversizedBehavior == "wrap" || oversizedBehavior == "wrap-no-break");
        // Pre-render
        context.save();
        ghostContext.save();
        this._prerender(status, true, this._ignoreFontWeight());
        // Get default font metrix
        const refText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ";
        // Split up text into lines
        const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
        let styleRestored = true;
        let minX = 0;
        let maxX = 0;
        // Iterate through the lines
        let offsetY = 0;
        let currentStyle;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(lines, (line, _index)=>{
            // Split up line into format/value chunks
            let chunks;
            if (line == "") {
                chunks = [
                    {
                        type: "value",
                        text: ""
                    }
                ];
            } else {
                chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].chunk(line, false, this.style.ignoreFormatting);
            }
            while(chunks.length > 0){
                // Init line object
                let lineInfo = {
                    offsetY: offsetY,
                    ascent: 0,
                    width: 0,
                    height: 0,
                    left: 0,
                    right: 0,
                    textChunks: []
                };
                // Measure reference text
                const metrics = this._measureText(refText, context);
                const height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                lineInfo.height = height;
                lineInfo.ascent = metrics.actualBoundingBoxAscent;
                let currentFormat;
                let currentDecoration = this.style.textDecoration;
                let currentFill;
                let currentChunkWidth;
                let skipFurtherText = false;
                let firstTextChunk = true;
                let leftoverChunks = [];
                let currentVerticalAlign;
                //let offsetX = 0;
                //let chunk;
                //while(chunk = chunks.shift()) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachContinue(chunks, (chunk, index)=>{
                    // Format chunk
                    if (chunk.type == "format") {
                        if (chunk.text == "[/]") {
                            if (!styleRestored) {
                                context.restore();
                                ghostContext.restore();
                                styleRestored = true;
                            }
                            currentFill = undefined;
                            currentStyle = undefined;
                            currentChunkWidth = undefined;
                            currentDecoration = this.style.textDecoration;
                            currentVerticalAlign = undefined;
                            currentFormat = chunk.text;
                        } else {
                            if (!styleRestored) {
                                context.restore();
                                ghostContext.restore();
                            }
                            let format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].getTextStyle(chunk.text);
                            const fontStyle = this._getFontStyle(format);
                            context.save();
                            ghostContext.save();
                            context.font = fontStyle;
                            currentStyle = fontStyle;
                            currentFormat = chunk.text;
                            if (format.textDecoration) {
                                currentDecoration = format.textDecoration;
                            }
                            if (format.fill) {
                                currentFill = format.fill;
                            }
                            if (format.width) {
                                currentChunkWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(format.width);
                            }
                            if (format.verticalAlign) {
                                currentVerticalAlign = format.verticalAlign;
                            }
                            styleRestored = false;
                            // Measure reference text after change of format
                            const metrics = this._measureText(refText, context);
                            const height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                            if (height > lineInfo.height) {
                                lineInfo.height = height;
                            }
                            if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                                lineInfo.ascent = metrics.actualBoundingBoxAscent;
                            }
                        }
                    } else if (chunk.type == "value" && !skipFurtherText) {
                        // Measure
                        const metrics = this._measureText(chunk.text, context);
                        let chunkWidth = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
                        // Check for fit
                        if (truncate) {
                            // Break words?
                            let breakWords = firstTextChunk || this.style.breakWords || false;
                            // Measure ellipsis and check if it fits
                            const ellipsis = this.style.ellipsis || "";
                            const ellipsisMetrics = this._measureText(ellipsis, context);
                            const ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                            // Check fit
                            if (lineInfo.width + chunkWidth > maxWidth) {
                                const excessWidth = maxWidth - lineInfo.width - ellipsisWidth;
                                chunk.text = this._truncateText(context, chunk.text, excessWidth, breakWords);
                                chunk.text += ellipsis;
                                skipFurtherText = true;
                            }
                        } else if (wrap) {
                            // Check fit
                            if (lineInfo.width + chunkWidth > maxWidth) {
                                const excessWidth = maxWidth - lineInfo.width;
                                const tmpText = this._truncateText(context, chunk.text, excessWidth, false, firstTextChunk && this.style.oversizedBehavior != "wrap-no-break");
                                if (tmpText == "") {
                                    // Unable to fit a single letter - hide the whole label
                                    this.textVisible = true;
                                    return false;
                                }
                                //skipFurtherText = true;
                                //Add remaining chunks for the next line
                                leftoverChunks = chunks.slice(index + 1);
                                //Add remaining text of current chunk if it was forced-cut
                                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.trim(tmpText) != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.trim(chunk.text)) {
                                    leftoverChunks.unshift({
                                        type: "value",
                                        text: chunk.text.substr(tmpText.length)
                                    });
                                    if (currentFormat) {
                                        leftoverChunks.unshift({
                                            type: "format",
                                            text: currentFormat
                                        });
                                    }
                                }
                                // Set current chunk (truncated)
                                chunk.text = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.trim(tmpText);
                                chunks = [];
                                skipFurtherText = true;
                            }
                        }
                        // Chunk width?
                        let leftBoundMod = 1;
                        let rightBoundMod = 1;
                        if (currentStyle && currentChunkWidth && currentChunkWidth > chunkWidth) {
                            // increase horizontal bounding boxes accordingly
                            const boundsMod = chunkWidth / currentChunkWidth;
                            switch(this.style.textAlign){
                                case "right":
                                case "end":
                                    leftBoundMod = boundsMod;
                                    break;
                                case "center":
                                    leftBoundMod = boundsMod;
                                    rightBoundMod = boundsMod;
                                    break;
                                default:
                                    rightBoundMod = boundsMod;
                            }
                            chunkWidth = currentChunkWidth;
                        }
                        const chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                        if (chunkHeight > lineInfo.height) {
                            lineInfo.height = chunkHeight;
                        }
                        if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                            lineInfo.ascent = metrics.actualBoundingBoxAscent;
                        }
                        lineInfo.width += chunkWidth;
                        lineInfo.left += metrics.actualBoundingBoxLeft / leftBoundMod;
                        lineInfo.right += metrics.actualBoundingBoxRight / rightBoundMod;
                        lineInfo.textChunks.push({
                            style: currentStyle,
                            fill: currentFill,
                            text: chunk.text,
                            width: chunkWidth,
                            height: chunkHeight,
                            left: metrics.actualBoundingBoxLeft,
                            right: metrics.actualBoundingBoxRight,
                            ascent: metrics.actualBoundingBoxAscent,
                            offsetX: 0,
                            offsetY: 0,
                            textDecoration: currentDecoration,
                            verticalAlign: currentVerticalAlign
                        });
                        //offsetX += chunkWidth;
                        firstTextChunk = false;
                    }
                    if (leftoverChunks) {
                    //return false;
                    }
                    return true;
                //}
                });
                if (this.style.lineHeight instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                    lineInfo.height *= this.style.lineHeight.value;
                    lineInfo.ascent *= this.style.lineHeight.value;
                } else {
                    lineInfo.height *= this.style.lineHeight || 1.2;
                    lineInfo.ascent *= this.style.lineHeight || 1.2;
                }
                if (minX < lineInfo.left) {
                    minX = lineInfo.left;
                }
                if (maxX < lineInfo.right) {
                    maxX = lineInfo.right;
                }
                this._textInfo.push(lineInfo);
                //lineInfo.offsetY += lineInfo.ascent;
                offsetY += lineInfo.height;
                // Reset chunks so that it can proceed to the next line
                chunks = leftoverChunks || [];
            }
        });
        if (!styleRestored) {
            context.restore();
            ghostContext.restore();
        }
        // Adjust chunk internal offsets
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textInfo, (lineInfo, _index)=>{
            let currentChunkOffset = 0;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(lineInfo.textChunks, (chunk)=>{
                chunk.offsetX = currentChunkOffset + chunk.left - lineInfo.left;
                chunk.offsetY += lineInfo.height - lineInfo.height * (this.style.baselineRatio || 0.19);
                currentChunkOffset += chunk.width;
                if (chunk.verticalAlign) {
                    switch(chunk.verticalAlign){
                        case "super":
                            chunk.offsetY -= lineInfo.height / 2 - chunk.height / 2;
                            break;
                        case "sub":
                            chunk.offsetY += chunk.height / 2;
                            break;
                    }
                }
            });
        });
        const bounds = {
            left: rtl ? -maxX : -minX,
            top: 0,
            right: rtl ? minX : maxX,
            bottom: offsetY
        };
        // We need to fit?
        if (oversizedBehavior !== "none") {
            const ratio = this._fitRatio(bounds);
            if (ratio < 1) {
                if (oversizedBehavior == "fit") {
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(this.style.minScale) && ratio < this.style.minScale) {
                        this.textVisible = false;
                        bounds.left = 0;
                        bounds.top = 0;
                        bounds.right = 0;
                        bounds.bottom = 0;
                    } else {
                        if (!this._originalScale || this._originalScale == 1) {
                            this._originalScale = this.scale;
                        }
                        this.scale = ratio;
                        this.textVisible = true;
                    }
                } else if (oversizedBehavior == "hide") {
                    this.textVisible = false;
                    bounds.left = 0;
                    bounds.top = 0;
                    bounds.right = 0;
                    bounds.bottom = 0;
                } else {
                    switch(this.style.textAlign){
                        case "right":
                        case "end":
                            bounds.left = -maxWidth;
                            bounds.right = 0;
                            break;
                        case "center":
                            bounds.left = -maxWidth / 2;
                            bounds.right = maxWidth / 2;
                            break;
                        default:
                            bounds.left = 0;
                            bounds.right = maxWidth;
                    }
                    this.scale = this._originalScale || 1;
                    this._originalScale = undefined;
                    this.textVisible = true;
                }
            } else {
                this.scale = this._originalScale || 1;
                this._originalScale = undefined;
                this.textVisible = true;
            }
        }
        context.restore();
        ghostContext.restore();
        return bounds;
    }
    _fitRatio(bounds) {
        const maxW = this.style.maxWidth;
        const maxH = this.style.maxHeight;
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxW) && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxH)) {
            return 1;
        }
        const w = bounds.right - bounds.left;
        const h = bounds.bottom - bounds.top;
        return Math.min(maxW / w || 1, maxH / h || 1);
    }
    _truncateText(context, text, maxWidth, breakWords = false, fallbackBreakWords = true) {
        let width;
        do {
            if (breakWords) {
                text = text.slice(0, -1);
            } else {
                let tmp = text.replace(/[^,;:!?\\\/\s​]+[,;:!?\\\/\s​]*$/g, "");
                if ((tmp == "" || tmp === text) && fallbackBreakWords) {
                    breakWords = true;
                } else if (tmp == "") {
                    return text;
                } else {
                    text = tmp;
                }
            }
            const metrics = this._measureText(text, context);
            width = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
        }while (width > maxWidth && text != "")
        return text;
    }
    _measureText(text, context) {
        let metrics = context.measureText(text);
        let fakeMetrics = {};
        if (metrics.actualBoundingBoxAscent == null) {
            const div = document.createElement("div");
            div.innerText = text;
            div.style.visibility = "hidden";
            div.style.position = "absolute";
            div.style.top = "-1000000px;";
            div.style.fontFamily = this.style.fontFamily || "";
            div.style.fontSize = this.style.fontSize + "";
            document.body.appendChild(div);
            const bbox = div.getBoundingClientRect();
            document.body.removeChild(div);
            const h = bbox.height;
            const w = metrics.width;
            let left = 0;
            let right = w;
            fakeMetrics = {
                actualBoundingBoxAscent: h,
                actualBoundingBoxDescent: 0,
                actualBoundingBoxLeft: left,
                actualBoundingBoxRight: right,
                fontBoundingBoxAscent: h,
                fontBoundingBoxDescent: 0,
                width: w
            };
        //return fake;
        } else {
            fakeMetrics = {
                actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,
                actualBoundingBoxRight: metrics.actualBoundingBoxRight,
                fontBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                fontBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                width: metrics.width
            };
        }
        const w = metrics.width;
        switch(this.style.textAlign){
            case "right":
            case "end":
                fakeMetrics.actualBoundingBoxLeft = w;
                fakeMetrics.actualBoundingBoxRight = 0;
                break;
            case "center":
                fakeMetrics.actualBoundingBoxLeft = w / 2;
                fakeMetrics.actualBoundingBoxRight = w / 2;
                break;
            default:
                fakeMetrics.actualBoundingBoxLeft = 0;
                fakeMetrics.actualBoundingBoxRight = w;
        }
        return fakeMetrics;
    }
}
class CanvasTextStyle {
    constructor(){
        //public wordWrapWidth: number = 100;
        Object.defineProperty(this, "fill", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fillOpacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textAlign", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontFamily", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontWeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontVariant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textDecoration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowColor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowBlur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOpacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // leading?: number;
        // letterSpacing?: number;
        Object.defineProperty(this, "lineHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["percent"])(120)
        });
        Object.defineProperty(this, "baselineRatio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0.19
        });
        // padding?: number;
        // stroke?: number;
        // strokeThickness?: number;
        // trim?: number;
        // wordWrap?: boolean;
        Object.defineProperty(this, "direction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textBaseline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oversizedBehavior", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "none"
        });
        Object.defineProperty(this, "breakWords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "ellipsis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "…"
        });
        Object.defineProperty(this, "maxWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "maxHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "minScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ignoreFormatting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
}
class CanvasRadialText extends CanvasText {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "textType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "circular"
        });
        Object.defineProperty(this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "startAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inside", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "orientation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "auto"
        });
        Object.defineProperty(this, "kerning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_textReversed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _render(status) {
        switch(this.textType){
            case "circular":
                this._renderCircular(status);
                break;
            default:
                super._render(status);
                break;
        }
    }
    _renderCircular(status) {
        if (this.textVisible) {
            this._prerender(status);
            const interactive = this._isInteractive(status);
            const context = status.layer.context;
            const layerDirty = status.layer.dirty;
            const ghostContext = this._renderer._ghostLayer.context;
            // Savepoint
            context.save();
            if (interactive) {
                ghostContext.save();
            }
            // We need measurements in order to properly position text for alignment
            if (!this._textInfo) {
                this._measure(status);
            }
            // Init
            let radius = this.radius || 0;
            let startAngle = this.startAngle || 0;
            let deltaAngle = 0;
            let orientation = this.orientation;
            let inward = orientation == "auto" ? "auto" : orientation == "inward";
            const inside = this.inside;
            const align = this.style.textAlign || "left";
            const kerning = this.kerning || 0;
            let clockwise = align == "left" ? 1 : -1;
            const shouldReverse = !this._textReversed;
            // Check if we need to invert the whole stuff
            if (inward == "auto") {
                // Calc max angle so we know whether we need to flip it
                let maxAngle = 0;
                let midAngle = 0;
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textInfo, (line, _index)=>{
                    const deltaAngle = startAngle + line.width / (radius - line.height) / 2 * -clockwise;
                    if (deltaAngle > maxAngle) {
                        maxAngle = deltaAngle;
                    }
                });
                if (align == "left") {
                    midAngle = (maxAngle + deltaAngle / 2) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.DEGREES;
                } else if (align == "right") {
                    midAngle = (maxAngle - deltaAngle / 2) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.DEGREES;
                } else {
                    midAngle = startAngle * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.DEGREES;
                }
                midAngle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.normalizeAngle(midAngle);
                inward = midAngle >= 270 || midAngle <= 90;
            }
            if (inward == true && shouldReverse) {
                this._textInfo.reverse();
                this._textReversed = true;
            }
            // if ((inward == false && align == "left") || (inward == true && align == "right")) {
            // 	clockwise *= -1;
            // }
            // Process text info produced by _measure()
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textInfo, (line, _index)=>{
                const textHeight = line.height;
                // Adjust radius (for `inside = false`)
                // Radius adjustment for `inside = false` is below the line calculation
                if (!inside) {
                    radius += textHeight;
                }
                // Reverse letters if we're painting them counter-clockwise
                if ((clockwise == -1 && inward || clockwise == 1 && !inward) && shouldReverse) {
                    line.textChunks.reverse();
                }
                // Init angles
                let lineStartAngle = startAngle;
                deltaAngle = 0;
                // Adjust for center-align
                if (align == "center") {
                    lineStartAngle += line.width / (radius - textHeight) / 2 * -clockwise;
                    deltaAngle = lineStartAngle - startAngle;
                }
                // if (inward == "auto") {
                // 	let midAngle;
                // 	if (align == "left") {
                // 		midAngle = (lineStartAngle + deltaAngle / 2) * $math.DEGREES;
                // 	}
                // 	else if () {
                // 		midAngle = (lineStartAngle - deltaAngle / 2) * $math.DEGREES;
                // 	}
                // 	inward = (midAngle >= 270) || (midAngle <= 90);
                // }
                // Rotate letters if they are facing outward
                lineStartAngle += Math.PI * (inward ? 0 : 1); // Rotate 180 if outward
                // Savepoint
                context.save();
                if (interactive) {
                    ghostContext.save();
                }
                // Assume starting angle
                context.rotate(lineStartAngle);
                if (interactive) {
                    ghostContext.rotate(lineStartAngle);
                }
                let angleShift = 0;
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(line.textChunks, (chunk, _index)=>{
                    // Draw the letter
                    const char = chunk.text;
                    const charWidth = chunk.width;
                    // Rotate half a letter
                    angleShift = charWidth / 2 / (radius - textHeight) * clockwise;
                    context.rotate(angleShift);
                    if (interactive) {
                        ghostContext.rotate(angleShift);
                    }
                    // Set style
                    if (chunk.style) {
                        context.save();
                        ghostContext.save();
                        context.font = chunk.style;
                        if (interactive) {
                            ghostContext.font = chunk.style;
                        }
                    }
                    if (chunk.fill) {
                        context.save();
                        context.fillStyle = chunk.fill.toCSS();
                    // Color does not affect ghostContext so we not set it
                    }
                    // Center letters
                    context.textBaseline = "middle";
                    context.textAlign = "center";
                    if (interactive) {
                        ghostContext.textBaseline = "middle";
                        ghostContext.textAlign = "center";
                    }
                    // Plop the letter
                    if (layerDirty) {
                        context.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                    }
                    if (interactive) {
                        ghostContext.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                    }
                    if (chunk.fill) {
                        context.restore();
                    // Color does not affect ghostContext so we not set it
                    }
                    // Reset style
                    if (chunk.style) {
                        context.restore();
                        ghostContext.restore();
                    }
                    // Rotate half a letter and add spacing
                    angleShift = (charWidth / 2 + kerning) / (radius - textHeight) * clockwise;
                    context.rotate(angleShift);
                    if (interactive) {
                        ghostContext.rotate(angleShift);
                    }
                });
                // Restore angle
                context.restore();
                if (interactive) {
                    ghostContext.restore();
                }
                // Adjust radius (for `inside = true`)
                if (inside) {
                    radius -= textHeight;
                }
            });
            // Restore
            context.restore();
            if (interactive) {
                ghostContext.restore();
            }
        }
    }
    _measure(status) {
        switch(this.textType){
            case "circular":
                return this._measureCircular(status);
            default:
                return super._measure(status);
        }
    }
    _measureCircular(status) {
        const context = status.layer.context;
        const ghostContext = this._renderer._ghostLayer.context;
        const rtl = this.style.direction == "rtl";
        const oversizedBehavior = this.style.oversizedBehavior;
        const maxWidth = this.style.maxWidth;
        const truncate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth) && oversizedBehavior == "truncate";
        const ellipsis = this.style.ellipsis || "";
        let ellipsisMetrics;
        //const wrap = $type.isNumber(maxWidth) && (oversizedBehavior == "wrap" || oversizedBehavior == "wrap-no-break");
        // Reset text info
        this.textVisible = true;
        this._textInfo = [];
        this._textReversed = false;
        // Pre-render
        context.save();
        ghostContext.save();
        this._prerender(status, true);
        // Split up text into lines
        const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
        let styleRestored = true;
        let totalWidth = 0;
        // Iterate through the lines
        let offsetY = 0;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(lines, (line, _index)=>{
            // Split up line into format/value chunks
            let chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].chunk(line, false, this.style.ignoreFormatting);
            // Init line object
            let lineInfo = {
                offsetY: offsetY,
                ascent: 0,
                width: 0,
                height: 0,
                left: 0,
                right: 0,
                textChunks: []
            };
            let currentStyle;
            let currentFill;
            let currentChunkWidth;
            //while(chunk = chunks.shift()) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(chunks, (chunk, _index)=>{
                // Format chunk
                if (chunk.type == "format") {
                    if (chunk.text == "[/]") {
                        if (!styleRestored) {
                            context.restore();
                            ghostContext.restore();
                            styleRestored = true;
                        }
                        currentFill = undefined;
                        currentStyle = undefined;
                        currentChunkWidth = undefined;
                    } else {
                        let format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].getTextStyle(chunk.text);
                        const fontStyle = this._getFontStyle(format);
                        context.save();
                        ghostContext.save();
                        context.font = fontStyle;
                        currentStyle = fontStyle;
                        if (format.fill) {
                            currentFill = format.fill;
                        }
                        if (format.width) {
                            currentChunkWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(format.width);
                        }
                        styleRestored = false;
                    }
                    if (truncate) {
                        ellipsisMetrics = this._measureText(ellipsis, context);
                    }
                } else if (chunk.type == "value") {
                    // Measure each letter
                    let chars = chunk.text.match(/./ug) || [];
                    if (rtl) {
                        chars = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.splitString(chunk.text);
                        chars.reverse();
                    }
                    for(let i = 0; i < chars.length; i++){
                        const char = chars[i];
                        // Measure
                        const metrics = this._measureText(char, context);
                        let chunkWidth = metrics.width;
                        // Chunk width?
                        if (currentStyle && currentChunkWidth && currentChunkWidth > chunkWidth) {
                            chunkWidth = currentChunkWidth;
                        }
                        const chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                        if (chunkHeight > lineInfo.height) {
                            lineInfo.height = chunkHeight;
                        }
                        if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                            lineInfo.ascent = metrics.actualBoundingBoxAscent;
                        }
                        totalWidth += chunkWidth;
                        // Handle oversized behavior
                        if (truncate) {
                            // Measure ellipsis and check if it fits
                            if (!ellipsisMetrics) {
                                ellipsisMetrics = this._measureText(ellipsis, context);
                            }
                            const ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                            //totalWidth += ellipsisWidth;
                            if (totalWidth + ellipsisWidth > maxWidth) {
                                if (lineInfo.textChunks.length == 1) {
                                    this.textVisible = false;
                                } else {
                                    lineInfo.width += ellipsisWidth;
                                    lineInfo.left += ellipsisMetrics.actualBoundingBoxLeft;
                                    lineInfo.right += ellipsisMetrics.actualBoundingBoxRight;
                                    lineInfo.textChunks.push({
                                        style: currentStyle,
                                        fill: currentFill,
                                        text: ellipsis,
                                        width: ellipsisWidth,
                                        height: chunkHeight + ellipsisMetrics.actualBoundingBoxDescent,
                                        left: ellipsisMetrics.actualBoundingBoxLeft,
                                        right: ellipsisMetrics.actualBoundingBoxRight,
                                        ascent: ellipsisMetrics.actualBoundingBoxAscent,
                                        offsetX: 0,
                                        offsetY: chunkHeight,
                                        textDecoration: undefined
                                    });
                                }
                                break;
                            }
                        }
                        lineInfo.width += chunkWidth;
                        lineInfo.left += metrics.actualBoundingBoxLeft;
                        lineInfo.right += metrics.actualBoundingBoxRight;
                        lineInfo.textChunks.push({
                            style: currentStyle,
                            fill: currentFill,
                            text: char,
                            width: chunkWidth,
                            height: chunkHeight + metrics.actualBoundingBoxDescent,
                            left: metrics.actualBoundingBoxLeft,
                            right: metrics.actualBoundingBoxRight,
                            ascent: metrics.actualBoundingBoxAscent,
                            offsetX: 0,
                            offsetY: chunkHeight,
                            textDecoration: undefined
                        });
                        if (rtl) {
                        // @todo still needed?
                        //break;
                        }
                    }
                }
            });
            if (this.style.lineHeight instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                lineInfo.height *= this.style.lineHeight.value;
            } else {
                lineInfo.height *= this.style.lineHeight || 1.2;
            }
            this._textInfo.push(lineInfo);
            //lineInfo.offsetY += lineInfo.ascent;
            offsetY += lineInfo.height;
        });
        if (!styleRestored) {
            context.restore();
            ghostContext.restore();
        }
        if (oversizedBehavior == "hide" && totalWidth > maxWidth) {
            this.textVisible = false;
        }
        // Adjust chunk internal offsets
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textInfo, (lineInfo)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(lineInfo.textChunks, (chunk)=>{
                chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
            });
        });
        context.restore();
        ghostContext.restore();
        return {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
    }
}
class CanvasImage extends CanvasDisplayObject {
    constructor(renderer, image){
        super(renderer);
        Object.defineProperty(this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tainted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowColor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowBlur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOpacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_imageMask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.image = image;
    }
    _dispose() {
        super._dispose();
        if (this._imageMask) {
            clearCanvas(this._imageMask);
        }
    }
    getLocalBounds() {
        if (!this._localBounds) {
            let w = 0;
            let h = 0;
            if (this.width) {
                w = this.width;
            }
            if (this.height) {
                h = this.height;
            }
            this._localBounds = {
                left: 0,
                top: 0,
                right: w,
                bottom: h
            };
            this._addBounds(this._localBounds);
        }
        return this._localBounds;
    }
    _render(status) {
        super._render(status);
        if (this.image) {
            if (this.tainted === undefined) {
                this.tainted = isTainted(this.image);
                status.layer.tainted = true;
            }
            if (this.tainted && this._renderer._omitTainted) {
                return;
            }
            if (status.layer.dirty) {
                if (this.shadowColor) {
                    status.layer.context.shadowColor = this.shadowColor.toCSS(this.shadowOpacity || 1);
                }
                if (this.shadowBlur) {
                    status.layer.context.shadowBlur = this.shadowBlur;
                }
                if (this.shadowOffsetX) {
                    status.layer.context.shadowOffsetX = this.shadowOffsetX;
                }
                if (this.shadowOffsetY) {
                    status.layer.context.shadowOffsetY = this.shadowOffsetY;
                }
                // TODO should this round ?
                const width = this.width || this.image.naturalWidth;
                const height = this.height || this.image.naturalHeight;
                status.layer.context.drawImage(this.image, 0, 0, width, height);
            }
            if (this.interactive && this._isInteractive(status)) {
                const mask = this._getMask(this.image);
                this._renderer._ghostLayer.context.drawImage(mask, 0, 0);
            }
        }
    }
    clear() {
        super.clear();
        this.image = undefined;
        this._imageMask = undefined;
    }
    _getMask(image) {
        if (this._imageMask === undefined) {
            // TODO should this round ?
            const width = this.width || image.naturalWidth;
            const height = this.height || image.naturalHeight;
            // We need to create a second canvas because destination-in clears out the entire canvas
            const canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            const context = canvas.getContext("2d");
            context.imageSmoothingEnabled = false;
            context.fillStyle = this._getColorId();
            context.fillRect(0, 0, width, height);
            if (!isTainted(image)) {
                context.globalCompositeOperation = "destination-in";
                context.drawImage(image, 0, 0, width, height);
            }
            this._imageMask = canvas;
        }
        return this._imageMask;
    }
}
class CanvasRendererEvent {
    constructor(event, originalPoint, point, bbox){
        Object.defineProperty(this, "event", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: event
        });
        Object.defineProperty(this, "originalPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: originalPoint
        });
        Object.defineProperty(this, "point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: point
        });
        Object.defineProperty(this, "bbox", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: bbox
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "simulated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "native", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.supports("touchevents") && event instanceof Touch) {
            this.id = event.identifier;
        } else {
            this.id = null;
        }
    }
}
class CanvasRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ArrayDisposer"] {
    constructor(resolution){
        super();
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "_layerDom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "layers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_dirtyLayers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "defaultLayer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.getLayer(0)
        });
        Object.defineProperty(this, "_ghostLayer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new GhostLayer()
        });
        Object.defineProperty(this, "_patternCanvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("canvas")
        });
        Object.defineProperty(this, "_patternContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._patternCanvas.getContext("2d")
        });
        Object.defineProperty(this, "_realWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_realHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_calculatedWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_calculatedHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "interactionsEnabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_colorId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_colorMap", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_forceInteractive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_omitTainted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // TODO this should store the Id as well
        Object.defineProperty(this, "_hovering", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        Object.defineProperty(this, "_dragging", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_mousedown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_lastPointerMoveEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tapToActivate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "tapToActivateTimeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 3000
        });
        Object.defineProperty(this, "_touchActive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_touchActiveTimeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (resolution == null) {
            this.resolution = window.devicePixelRatio;
        } else {
            this.resolution = resolution;
        }
        this.view.style.position = "absolute";
        this.view.setAttribute("aria-hidden", "true");
        this.view.appendChild(this._layerDom);
        this._disposers.push(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._events, (_key, events)=>{
                events.disposer.dispose();
            });
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
                clearCanvas(layer.view);
                if (layer.exportableView) {
                    clearCanvas(layer.exportableView);
                }
            });
            clearCanvas(this._ghostLayer.view);
            clearCanvas(this._patternCanvas);
        }));
        /*
        this._disposers.push($utils.addEventListener(this._ghostLayer.view, "click", (originalEvent: MouseEvent) => {
            const event = this.getEvent(originalEvent);
            const target = this._getHitTarget(event.originalPoint, event.bbox);
            console.debug(target);
        }));
        */ // Monitor for possible pixel ratio changes (when page is zoomed)
        this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.onZoom(()=>{
            if (resolution == null) {
                this.resolution = window.devicePixelRatio;
            }
        }));
        // We need this in order top prevent default touch gestures when dragging
        // draggable elements
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.supports("touchevents")) {
            const listener = (ev)=>{
                if (this._dragging.length !== 0) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachContinue(this._dragging, (item)=>{
                        if (item.value.shouldCancelTouch()) {
                            ev.preventDefault();
                            return false;
                        }
                        return true;
                    });
                }
                // If touch down happends, delay touch out
                if (this._touchActiveTimeout) {
                    this._delayTouchDeactivate();
                }
            };
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(window, "touchstart", listener, {
                passive: false
            }));
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, "touchstart", listener, {
                passive: false
            }));
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, "touchmove", ()=>{
                // If touch is moving, delay touch out
                if (this._touchActiveTimeout) {
                    this._delayTouchDeactivate();
                }
            }, {
                passive: true
            }));
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(window, "click", (_ev)=>{
                this._touchActive = false;
            }, {
                passive: true
            }));
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, "click", (_ev)=>{
                window.setTimeout(()=>{
                    this._touchActive = true;
                    this._delayTouchDeactivate();
                }, 100);
            }, {
                passive: true
            }));
        }
        // Prevent scrolling of the window when hovering on "wheelable" object
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.supports("wheelevents")) {
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, "wheel", (ev)=>{
                let prevent = false;
                this._hovering.forEach((obj)=>{
                    if (obj.wheelable) {
                        prevent = true;
                        return false;
                    }
                });
                if (prevent) {
                    ev.preventDefault();
                }
            }, {
                passive: false
            }));
        }
    }
    /*protected _mouseMoveThrottler: Throttler = new Throttler(() => {
        this._dispatchGlobalMousemove(this._lastPointerMoveEvent.event, this._lastPointerMoveEvent.native);
    });
    */ resetImageArray() {
        this._ghostLayer.imageArray = undefined;
    }
    _delayTouchDeactivate() {
        if (this._touchActiveTimeout) {
            clearTimeout(this._touchActiveTimeout);
        }
        if (this.tapToActivateTimeout > 0) {
            this._touchActiveTimeout = window.setTimeout(()=>{
                this._touchActive = false;
            }, this.tapToActivateTimeout);
        }
    }
    get debugGhostView() {
        return !!this._ghostLayer.view.parentNode;
    }
    set debugGhostView(value) {
        if (value) {
            if (!this._ghostLayer.view.parentNode) {
                this.view.appendChild(this._ghostLayer.view);
            }
        } else {
            if (this._ghostLayer.view.parentNode) {
                this._ghostLayer.view.parentNode.removeChild(this._ghostLayer.view);
            }
        }
    }
    createLinearGradient(x1, y1, x2, y2) {
        return this.defaultLayer.context.createLinearGradient(x1, y1, x2, y2);
    }
    createRadialGradient(x1, y1, radius1, x2, y2, radius2) {
        return this.defaultLayer.context.createRadialGradient(x1, y1, radius1, x2, y2, radius2);
    }
    createPattern(graphics, background, repetition, width, height) {
        // const patternCanvas = document.createElement("canvas");
        // const patternContext = patternCanvas.getContext("2d")!;
        // patternCanvas.width = width;
        // patternCanvas.height = height;
        // if (fill) {
        // 	patternContext.fillStyle = fill.toCSS();
        // 	patternContext.fillRect(0, 0, patternCanvas.width, patternCanvas.height);
        // }
        // const layer = {
        // 	view: patternCanvas,
        // 	context: patternContext,
        // 	visible: true,
        // 	order: 0,
        // 	width: width,
        // 	height: height,
        // 	dirty: true
        // };
        // // patternContext.arc(0, 0, 50, 0, .5 * Math.PI);
        // // patternContext.stroke();
        // image.targetLayer = layer;
        // image.render(layer);
        //this._layerDom.appendChild(patternCanvas);
        this._patternCanvas.width = width;
        this._patternCanvas.height = height;
        this._patternContext.clearRect(0, 0, width, height);
        // patternCanvas.style.width = width * this.resolution + "px";
        // patternCanvas.style.height = height * this.resolution + "px";
        background.renderDetached(this._patternContext);
        graphics.renderDetached(this._patternContext);
        return this._patternContext.createPattern(this._patternCanvas, repetition);
    }
    makeContainer() {
        return new CanvasContainer(this);
    }
    makeGraphics() {
        return new CanvasGraphics(this);
    }
    makeText(text, style) {
        return new CanvasText(this, text, style);
    }
    makeTextStyle() {
        return new CanvasTextStyle();
    }
    makeRadialText(text, style) {
        return new CanvasRadialText(this, text, style);
    }
    makePicture(image) {
        return new CanvasImage(this, image);
    }
    resizeLayer(layer) {
        layer.resize(this._calculatedWidth, this._calculatedHeight, this._calculatedWidth, this._calculatedHeight, this.resolution);
    }
    resizeGhost() {
        this._ghostLayer.resize(this._calculatedWidth, this._calculatedHeight, this._calculatedWidth, this._calculatedHeight, this.resolution);
    }
    resize(realWidth, realHeight, calculatedWidth, calculatedHeight) {
        this._realWidth = realWidth;
        this._realHeight = realHeight;
        this._calculatedWidth = calculatedWidth;
        this._calculatedHeight = calculatedHeight;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
            if (layer) {
                layer.dirty = true;
                this.resizeLayer(layer);
            }
        });
        this.resizeGhost();
        this.view.style.width = calculatedWidth + "px";
        this.view.style.height = calculatedHeight + "px";
    }
    createDetachedLayer(willReadFrequently = false) {
        const view = document.createElement("canvas");
        const context = view.getContext("2d", {
            willReadFrequently: willReadFrequently
        });
        const layer = new CanvasLayer(view, context);
        view.style.position = "absolute";
        view.style.top = "0px";
        view.style.left = "0px";
        return layer;
    }
    getLayerByOrder(order) {
        const layers = this.layers;
        const length = layers.length;
        for(let i = 0; i < length; i++){
            const layer = layers[i];
            if (layer.order == order) {
                return layer;
            }
        }
    }
    getLayer(order, visible = true) {
        let existingLayer = this.getLayerByOrder(order);
        if (existingLayer) {
            return existingLayer;
        }
        const layer = this.createDetachedLayer(order == 99);
        layer.order = order;
        layer.visible = visible;
        layer.view.className = "am5-layer-" + order;
        if (layer.visible) {
            this.resizeLayer(layer);
        }
        const layers = this.layers;
        layers.push(layer);
        layers.sort((a, b)=>{
            if (a.order > b.order) {
                return 1;
            } else if (a.order < b.order) {
                return -1;
            } else {
                return 0;
            }
        });
        const length = layers.length;
        const layerIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.indexOf(layers, layer);
        let next;
        for(let i = layerIndex + 1; i < length; i++){
            if (layers[i].visible) {
                next = layers[i];
                break;
            }
        }
        if (layer.visible) {
            if (next === undefined) {
                this._layerDom.appendChild(layer.view);
            } else {
                this._layerDom.insertBefore(layer.view, next.view);
            }
        }
        return layer;
    }
    render(root) {
        this._dirtyLayers.length = 0;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
            if (layer) {
                if (layer.dirty && layer.visible) {
                    this._dirtyLayers.push(layer);
                    layer.clear();
                }
            }
        });
        this._ghostLayer.clear();
        root.render({
            inactive: null,
            layer: this.defaultLayer
        });
        this._ghostLayer.context.restore();
        //setTimeout(() => {
        // Remove this after the Chrome bug is fixed:
        // https://bugs.chromium.org/p/chromium/issues/detail?id=1279394
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
            if (layer) {
                const context = layer.context;
                context.beginPath();
                context.moveTo(0, 0);
                context.stroke();
            }
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._dirtyLayers, (layer)=>{
            layer.context.restore();
            layer.dirty = false;
        });
        //}, 100)
        if (this._hovering.size && this._lastPointerMoveEvent) {
            const { events, target, native } = this._lastPointerMoveEvent;
            //this._mouseMoveThrottler.run();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                this._dispatchGlobalMousemove(event, target, native);
            });
        }
    }
    paintId(obj) {
        const id = distributeId(++this._colorId);
        const color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromHex(id).toCSS();
        this._colorMap[color] = obj;
        return color;
    }
    _removeObject(obj) {
        if (obj._colorId !== undefined) {
            delete this._colorMap[obj._colorId];
        }
    }
    // protected _identifyObjectByColor(colorId: number): CanvasDisplayObject | undefined {
    // 	return this._colorMap[colorId];
    // }
    _adjustBoundingBox(bbox) {
        const margin = this._ghostLayer.margin;
        return new DOMRect(-margin.left, -margin.top, bbox.width + margin.left + margin.right, bbox.height + margin.top + margin.bottom);
    }
    getEvent(originalEvent, adjustPoint = true) {
        const bbox = this.view.getBoundingClientRect();
        const x = originalEvent.clientX || 0;
        const y = originalEvent.clientY || 0;
        const widthScale = this._calculatedWidth / this._realWidth;
        const heightScale = this._calculatedHeight / this._realHeight;
        const originalPoint = {
            x: x - bbox.left,
            y: y - bbox.top
        };
        const point = {
            x: (x - (adjustPoint ? bbox.left : 0)) * widthScale,
            y: (y - (adjustPoint ? bbox.top : 0)) * heightScale
        };
        return new CanvasRendererEvent(originalEvent, originalPoint, point, this._adjustBoundingBox(bbox));
    }
    _getHitTarget(point, bbox, target) {
        if (bbox.width === 0 || bbox.height === 0 || point.x < bbox.left || point.x > bbox.right || point.y < bbox.top || point.y > bbox.bottom) {
            return;
        }
        if (!target || !this._layerDom.contains(target)) {
            return;
        }
        const pixel = this._ghostLayer.getImageData(point, bbox);
        if (pixel.data[0] === 0 && pixel.data[1] === 0 && pixel.data[2] === 0) {
            return false;
        }
        const colorId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromRGB(pixel.data[0], pixel.data[1], pixel.data[2]).toCSS();
        const hit = this._colorMap[colorId];
        return hit;
    }
    getObjectAtPoint(point) {
        const data = this._ghostLayer.getImageArray(point);
        if (data[0] === 0 && data[1] === 0 && data[2] === 0) {
            return undefined;
        }
        const colorId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromRGB(data[0], data[1], data[2]).toCSS();
        const hit = this._colorMap[colorId];
        return hit;
    }
    _withEvents(key, f) {
        const events = this._events[key];
        if (events !== undefined) {
            events.dispatching = true;
            try {
                f(events);
            } finally{
                events.dispatching = false;
                if (events.cleanup) {
                    events.cleanup = false;
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keepIf(events.callbacks, (callback)=>{
                        return !callback.disposed;
                    });
                    if (events.callbacks.length === 0) {
                        events.disposer.dispose();
                        delete this._events[key];
                    }
                }
            }
        }
    }
    _dispatchEventAll(key, event) {
        if (!this.interactionsEnabled) {
            return;
        }
        this._withEvents(key, (events)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events.callbacks, (callback)=>{
                if (!callback.disposed) {
                    callback.callback.call(callback.context, event);
                }
            });
        });
    }
    _dispatchEvent(key, target, event) {
        if (!this.interactionsEnabled) {
            return false;
        }
        let dispatched = false;
        this._withEvents(key, (events)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events.callbacks, (callback)=>{
                if (!callback.disposed && callback.object === target) {
                    callback.callback.call(callback.context, event);
                    dispatched = true;
                }
            });
        });
        return dispatched;
    }
    _dispatchMousedown(originalEvent, originalTarget) {
        const button = originalEvent.button;
        if (button != 0 && button != 2 && button != 1 && button !== undefined) {
            // Ignore non-primary mouse buttons
            return;
        }
        const event = this.getEvent(originalEvent);
        const target = this._getHitTarget(event.originalPoint, event.bbox, originalTarget);
        if (target) {
            const id = event.id;
            let dragged = false;
            eachTargets(target, (obj)=>{
                const info = {
                    id: id,
                    value: obj
                };
                this._mousedown.push(info);
                if (!dragged && this._dispatchEvent("pointerdown", obj, event)) {
                    // Only dispatch the first element which matches
                    dragged = true;
                    const has = this._dragging.some((x)=>{
                        return x.value === obj && x.id === id;
                    });
                    if (!has) {
                        this._dragging.push(info);
                    }
                }
                return true;
            });
        }
    }
    _dispatchGlobalMousemove(originalEvent, originalTarget, native) {
        const event = this.getEvent(originalEvent);
        const target = this._getHitTarget(event.originalPoint, event.bbox, originalTarget);
        event.native = native;
        if (target) {
            this._hovering.forEach((obj)=>{
                if (!obj.contains(target)) {
                    this._hovering.delete(obj);
                    if (obj.cursorOverStyle) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.setStyle(document.body, "cursor", obj._replacedCursorStyle);
                    }
                    this._dispatchEvent("pointerout", obj, event);
                }
            });
            if (event.native) {
                eachTargets(target, (obj)=>{
                    if (!this._hovering.has(obj)) {
                        this._hovering.add(obj);
                        if (obj.cursorOverStyle) {
                            obj._replacedCursorStyle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getStyle(document.body, "cursor");
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.setStyle(document.body, "cursor", obj.cursorOverStyle);
                        }
                        this._dispatchEvent("pointerover", obj, event);
                    }
                    return true;
                });
            }
        //} else if (target === false) {
        } else {
            this._hovering.forEach((obj)=>{
                if (obj.cursorOverStyle) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.setStyle(document.body, "cursor", obj._replacedCursorStyle);
                }
                this._dispatchEvent("pointerout", obj, event);
            });
            this._hovering.clear();
        }
        this._dispatchEventAll("globalpointermove", event);
    }
    removeHovering(graphics) {
        this._hovering.delete(graphics);
        if (graphics.cursorOverStyle) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.setStyle(document.body, "cursor", graphics._replacedCursorStyle);
        }
    }
    _dispatchGlobalMouseup(originalEvent, native) {
        const event = this.getEvent(originalEvent);
        event.native = native;
        //const target = this._getHitTarget(event.originalPoint);
        this._dispatchEventAll("globalpointerup", event);
    }
    _dispatchDragMove(originalEvent) {
        if (this._dragging.length !== 0) {
            const event = this.getEvent(originalEvent);
            const id = event.id;
            this._dragging.forEach((obj)=>{
                if (obj.id === id) {
                    this._dispatchEvent("pointermove", obj.value, event);
                }
            });
        }
    }
    _dispatchDragEnd(originalEvent, originalTarget) {
        const button = originalEvent.button;
        let clickevent;
        if (button == 0 || button === undefined) {
            clickevent = "click";
        } else if (button == 2) {
            clickevent = "rightclick";
        } else if (button == 1) {
            clickevent = "middleclick";
        } else {
            // Ignore non-primary mouse buttons
            return;
        }
        const event = this.getEvent(originalEvent);
        const id = event.id;
        if (this._mousedown.length !== 0) {
            const target = this._getHitTarget(event.originalPoint, event.bbox, originalTarget);
            if (target) {
                this._mousedown.forEach((obj)=>{
                    if (obj.id === id && obj.value.contains(target)) {
                        this._dispatchEvent(clickevent, obj.value, event);
                    }
                });
            }
            this._mousedown.length = 0;
        }
        if (this._dragging.length !== 0) {
            this._dragging.forEach((obj)=>{
                if (obj.id === id) {
                    this._dispatchEvent("pointerup", obj.value, event);
                }
            });
            this._dragging.length = 0;
        }
    }
    _dispatchDoubleClick(originalEvent, originalTarget) {
        const event = this.getEvent(originalEvent);
        const target = this._getHitTarget(event.originalPoint, event.bbox, originalTarget);
        if (target) {
            eachTargets(target, (obj)=>{
                if (this._dispatchEvent("dblclick", obj, event)) {
                    return false;
                } else {
                    return true;
                }
            });
        }
    }
    _dispatchWheel(originalEvent, originalTarget) {
        const event = this.getEvent(originalEvent);
        const target = this._getHitTarget(event.originalPoint, event.bbox, originalTarget);
        if (target) {
            eachTargets(target, (obj)=>{
                if (this._dispatchEvent("wheel", obj, event)) {
                    return false;
                } else {
                    return true;
                }
            });
        }
    }
    _makeSharedEvent(key, f) {
        if (this._listeners[key] === undefined) {
            const listener = f();
            this._listeners[key] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CounterDisposer"](()=>{
                delete this._listeners[key];
                listener.dispose();
            });
        }
        return this._listeners[key].increment();
    }
    _onPointerEvent(name, f) {
        let native = false;
        let timer = null;
        function clear() {
            timer = null;
            native = false;
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
                if (timer !== null) {
                    clearTimeout(timer);
                }
                clear();
            }),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getRendererEvent(name), (_)=>{
                native = true;
                if (timer !== null) {
                    clearTimeout(timer);
                }
                timer = window.setTimeout(clear, 0);
            }),
            onPointerEvent(window, name, (ev, target)=>{
                if (timer !== null) {
                    clearTimeout(timer);
                    timer = null;
                }
                f(ev, target, native);
                native = false;
            })
        ]);
    }
    // This ensures that only a single DOM event is added (e.g. only a single mousemove event listener)
    _initEvent(key) {
        switch(key){
            case "globalpointermove":
            case "pointerover":
            case "pointerout":
                return this._makeSharedEvent("pointermove", ()=>{
                    const listener = (events, target, native)=>{
                        this._lastPointerMoveEvent = {
                            events,
                            target,
                            native
                        };
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                            this._dispatchGlobalMousemove(event, target, native);
                        });
                    };
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                        this._onPointerEvent("pointerdown", listener),
                        this._onPointerEvent("pointermove", listener)
                    ]);
                });
            case "globalpointerup":
                return this._makeSharedEvent("pointerup", ()=>{
                    const mouseup = this._onPointerEvent("pointerup", (events, target, native)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                            this._dispatchGlobalMouseup(event, native);
                        });
                        this._lastPointerMoveEvent = {
                            events,
                            target,
                            native
                        };
                    });
                    const pointercancel = this._onPointerEvent("pointercancel", (events, target, native)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                            this._dispatchGlobalMouseup(event, native);
                        });
                        this._lastPointerMoveEvent = {
                            events,
                            target,
                            native
                        };
                    });
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
                        mouseup.dispose();
                        pointercancel.dispose();
                    });
                });
            case "click":
            case "rightclick":
            case "middleclick":
            case "pointerdown":
            /*
                return this._makeSharedEvent("pointerdown", () => {
                    return this._onPointerEvent("pointerdown", (event, target, native) => {
                        this._lastPointerMoveEvent = { event, target, native };
                        this._dispatchMousedown(event)
                    });
                });
            */ case "pointermove":
            case "pointerup":
                return this._makeSharedEvent("pointerdown", ()=>{
                    //const throttler = new Throttler();
                    const mousedown = this._onPointerEvent("pointerdown", (events, target)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (ev)=>{
                            this._dispatchMousedown(ev, target);
                        });
                    });
                    // TODO handle throttling properly for multitouch
                    const mousemove = this._onPointerEvent("pointermove", (ev)=>{
                        //throttler.throttle(() => {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(ev, (ev)=>{
                            this._dispatchDragMove(ev);
                        });
                    //});
                    });
                    const mouseup = this._onPointerEvent("pointerup", (ev, target)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(ev, (ev)=>{
                            this._dispatchDragEnd(ev, target);
                        });
                    });
                    const pointercancel = this._onPointerEvent("pointercancel", (ev, target)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(ev, (ev)=>{
                            this._dispatchDragEnd(ev, target);
                        });
                    });
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
                        mousedown.dispose();
                        mousemove.dispose();
                        mouseup.dispose();
                        pointercancel.dispose();
                    });
                });
            case "dblclick":
                return this._makeSharedEvent("dblclick", ()=>{
                    return this._onPointerEvent("dblclick", (ev, target)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(ev, (ev)=>{
                            this._dispatchDoubleClick(ev, target);
                        });
                    });
                });
            case "wheel":
                return this._makeSharedEvent("wheel", ()=>{
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(this.view, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getRendererEvent("wheel"), (event)=>{
                        this._dispatchWheel(event, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getEventTarget(event));
                    }, {
                        passive: false
                    });
                });
        }
    }
    _addEvent(object, key, callback, context) {
        let events = this._events[key];
        if (events === undefined) {
            events = this._events[key] = {
                disposer: this._initEvent(key),
                callbacks: [],
                dispatching: false,
                cleanup: false
            };
        }
        const listener = {
            object,
            context,
            callback,
            disposed: false
        };
        events.callbacks.push(listener);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            listener.disposed = true;
            if (events.dispatching) {
                events.cleanup = true;
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events.callbacks, listener);
                if (events.callbacks.length === 0) {
                    events.disposer.dispose();
                    delete this._events[key];
                }
            }
        });
    }
    getCanvas(root, options) {
        // Make sure everything is rendered
        this.render(root);
        if (!options) {
            options = {};
        }
        let scale = this.resolution;
        let canvasWidth = Math.floor(this._calculatedWidth * this.resolution);
        let canvasHeight = Math.floor(this._calculatedHeight * this.resolution);
        // Check if we need to scale
        if (options.minWidth && options.minWidth > canvasWidth) {
            let minScale = options.minWidth / canvasWidth;
            if (minScale > scale) {
                scale = minScale * this.resolution;
            }
        }
        if (options.minHeight && options.minHeight > canvasHeight) {
            let minScale = options.minHeight / canvasHeight;
            if (minScale > scale) {
                scale = minScale * this.resolution;
            }
        }
        if (options.maxWidth && options.maxWidth < canvasWidth) {
            let maxScale = options.maxWidth / canvasWidth;
            if (maxScale < scale) {
                scale = maxScale * this.resolution;
            }
        }
        if (options.maxHeight && options.maxHeight > canvasHeight) {
            let maxScale = options.maxHeight / canvasHeight;
            if (maxScale < scale) {
                scale = maxScale * this.resolution;
            }
        }
        // Check if we need to compensate for pixel ratio
        if (options.maintainPixelRatio) {
            scale /= this.resolution;
        }
        // Init list canvases to remove from DOM after export
        const canvases = [];
        // Set up new canvas for export
        let forceRender = false;
        const canvas = document.createElement("canvas");
        if (scale != this.resolution) {
            forceRender = true;
            canvasWidth = canvasWidth * scale / this.resolution;
            canvasHeight = canvasHeight * scale / this.resolution;
        }
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        // Add to DOM so it inherits CSS
        canvas.style.position = "fixed";
        canvas.style.top = "-10000px";
        this.view.appendChild(canvas);
        canvases.push(canvas);
        // Context
        const context = canvas.getContext("2d");
        let width = 0;
        let height = 0;
        let needRerender = false;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
            if (layer && layer.visible) {
                if (layer.tainted || forceRender) {
                    needRerender = true;
                    layer.exportableView = layer.view;
                    layer.exportableContext = layer.context;
                    layer.view = document.createElement("canvas");
                    // Add to DOM so it inherits CSS
                    layer.view.style.position = "fixed";
                    layer.view.style.top = "-10000px";
                    this.view.appendChild(layer.view);
                    canvases.push(layer.view);
                    let extraX = 0;
                    let extraY = 0;
                    if (layer.margin) {
                        extraX += layer.margin.left || 0 + layer.margin.right || 0;
                        extraY += layer.margin.top || 0 + layer.margin.bottom || 0;
                    }
                    layer.view.width = canvasWidth + extraX;
                    layer.view.height = canvasHeight + extraY;
                    layer.context = layer.view.getContext("2d");
                    layer.dirty = true;
                    layer.scale = scale;
                }
            }
        });
        if (needRerender) {
            this._omitTainted = true;
            this.render(root);
            this._omitTainted = false;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.layers, (layer)=>{
            if (layer && layer.visible) {
                // Layer is fine. Just plop it into our target canvas
                let x = 0;
                let y = 0;
                if (layer.margin) {
                    x = -(layer.margin.left || 0) * this.resolution;
                    y = -(layer.margin.top || 0) * this.resolution;
                }
                context.drawImage(layer.view, x, y);
                // Restore layer original canvas
                if (layer.exportableView) {
                    layer.view = layer.exportableView;
                    layer.exportableView = undefined;
                }
                if (layer.exportableContext) {
                    layer.context = layer.exportableContext;
                    layer.exportableContext = undefined;
                }
                if (width < layer.view.clientWidth) {
                    width = layer.view.clientWidth;
                }
                if (height < layer.view.clientHeight) {
                    height = layer.view.clientHeight;
                }
                layer.scale = undefined;
            }
        });
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(canvases, (canvas)=>{
            canvas.style.position = "";
            canvas.style.top = "";
            this.view.removeChild(canvas);
        });
        return canvas;
    }
}
class GhostLayer {
    constructor(){
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "margin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }
        });
        Object.defineProperty(this, "_resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "_width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "imageArray", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.view = document.createElement("canvas");
        this.context = this.view.getContext("2d", {
            alpha: false,
            willReadFrequently: true
        });
        this.context.imageSmoothingEnabled = false;
        this.view.style.position = "absolute";
        this.view.style.top = "0px";
        this.view.style.left = "0px";
    }
    resize(canvasWidth, canvasHeight, domWidth, domHeight, resolution) {
        this._resolution = resolution;
        canvasWidth += this.margin.left + this.margin.right;
        canvasHeight += this.margin.top + this.margin.bottom;
        // TODO this should take into account calculateSize
        domWidth += this.margin.left + this.margin.right;
        domHeight += this.margin.top + this.margin.bottom;
        this.view.style.left = -this.margin.left + "px";
        this.view.style.top = -this.margin.top + "px";
        this._width = Math.floor(canvasWidth * resolution);
        this._height = Math.floor(canvasHeight * resolution);
        this.view.width = this._width;
        this.view.style.width = domWidth + "px";
        this.view.height = this._height;
        this.view.style.height = domHeight + "px";
    }
    getImageData(point, bbox) {
        return this.context.getImageData(// TODO should this round ?
        Math.round((point.x - bbox.left) / bbox.width * this._width), Math.round((point.y - bbox.top) / bbox.height * this._height), 1, 1);
    }
    getImageArray(point) {
        if (!this.imageArray) {
            this.imageArray = this.context.getImageData(0, 0, this._width, this._height).data;
        }
        const data = this.imageArray;
        const x = Math.round(point.x * this._resolution);
        const y = Math.round(point.y * this._resolution);
        const i = (y * this._width + x) * 4;
        return [
            data[i],
            data[i + 1],
            data[i + 2],
            data[i + 3]
        ];
    }
    setMargin(layers) {
        this.margin.left = 0;
        this.margin.right = 0;
        this.margin.top = 0;
        this.margin.bottom = 0;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(layers, (layer)=>{
            if (layer.margin) {
                this.margin.left = Math.max(this.margin.left, layer.margin.left);
                this.margin.right = Math.max(this.margin.right, layer.margin.right);
                this.margin.top = Math.max(this.margin.top, layer.margin.top);
                this.margin.bottom = Math.max(this.margin.bottom, layer.margin.bottom);
            }
        });
    }
    clear() {
        this.context.save();
        this.context.fillStyle = '#000';
        this.context.fillRect(0, 0, this._width, this._height);
    }
}
class CanvasLayer {
    constructor(view, context){
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tainted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "margin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "visible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "exportableView", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exportableContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        this.view = view;
        this.context = context;
    }
    resize(canvasWidth, canvasHeight, domWidth, domHeight, resolution) {
        // TODO should this take into account calculateSize ?
        if (this.width != null) {
            canvasWidth = this.width;
            domWidth = this.width;
        }
        // TODO should this take into account calculateSize ?
        if (this.height != null) {
            canvasHeight = this.height;
            domHeight = this.height;
        }
        if (this.margin) {
            canvasWidth += this.margin.left + this.margin.right;
            canvasHeight += this.margin.top + this.margin.bottom;
            // TODO this should take into account calculateSize
            domWidth += this.margin.left + this.margin.right;
            domHeight += this.margin.top + this.margin.bottom;
            this.view.style.left = -this.margin.left + "px";
            this.view.style.top = -this.margin.top + "px";
        } else {
            this.view.style.left = "0px";
            this.view.style.top = "0px";
        }
        this._width = Math.floor(canvasWidth * resolution);
        this._height = Math.floor(canvasHeight * resolution);
        this.view.width = this._width;
        this.view.style.width = domWidth + "px";
        this.view.height = this._height;
        this.view.style.height = domHeight + "px";
    }
    clear() {
        this.context.save();
        this.context.clearRect(0, 0, this._width, this._height);
    }
} //# sourceMappingURL=CanvasRenderer.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Chart": ()=>Chart
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Chart extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        /**
         * A [[Container]] chart places its elements in.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "chartContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
                width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                interactiveChildren: false
            }))
        });
        /**
         * A [[Container]] chart places its bullets in.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "bulletsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
                interactiveChildren: false,
                isMeasured: false,
                position: "absolute",
                width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"]
            })
        });
    }
}
Object.defineProperty(Chart, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Chart"
});
Object.defineProperty(Chart, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Chart.className
    ])
}); //# sourceMappingURL=Chart.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Circle": ()=>Circle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Circle extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _afterNew() {
        super._afterNew();
        this._display.isMeasured = true;
        this.setPrivateRaw("trustBounds", true);
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("radius")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            this._display.drawCircle(0, 0, this.get("radius", 10));
        }
    }
}
Object.defineProperty(Circle, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Circle"
});
Object.defineProperty(Circle, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Circle.className
    ])
}); //# sourceMappingURL=Circle.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/CirclePattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "CirclePattern": ()=>CirclePattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class CirclePattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("gap")) {
            this._clear = true;
        }
    }
    _draw() {
        super._draw();
        const checkered = this.get("checkered", false);
        const centered = this.get("centered", true);
        const gap = this.get("gap", 0);
        const rotation = this.get("rotation", 0);
        let w = this.get("width", 100);
        let h = this.get("height", 100);
        let radius = this.get("radius", 3);
        let cellW = radius * 2 + gap;
        let cellH = radius * 2 + gap;
        let cols = Math.round(w / cellW);
        let rows = Math.round(h / cellH);
        cellW = w / cols;
        cellH = h / rows;
        if (rotation != 0) {
            // @todo this is probably not right
            this._display.x = cellW * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(rotation);
            this._display.y = cellH * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(rotation);
        }
        const color = this.get("color");
        const colorOpacity = this.get("colorOpacity");
        if (color || colorOpacity) {
            this._display.beginFill(color, colorOpacity);
        }
        for(let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++){
            for(let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++){
                if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {
                    let x = c * cellW;
                    let y = r * cellH;
                    if (centered) {
                        x += cellW + gap / 2;
                        y += cellH + gap / 2;
                    }
                    this._display.drawCircle(x - radius, y - radius, radius);
                }
            }
        }
        if (checkered) {
            w = w / 2 - gap * 2;
            h = h / 2 - gap * 2;
        } else {
            w -= gap;
            h -= gap;
        }
        if (color || colorOpacity) {
            this._display.endFill();
        }
    }
}
Object.defineProperty(CirclePattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "CirclePattern"
});
Object.defineProperty(CirclePattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        CirclePattern.className
    ])
}); //# sourceMappingURL=CirclePattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Component.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Component": ()=>Component,
    "DataItem": ()=>DataItem
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tslib/tslib.es6.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Data.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
class DataItem extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Settings"] {
    constructor(component, dataContext, settings){
        super(settings);
        /**
         * A data item's owener [[Component]].
         */ Object.defineProperty(this, "component", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A reference to actual item in source data this item is based on.
         */ Object.defineProperty(this, "dataContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @todo requires description
         */ Object.defineProperty(this, "bullets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A set of "open" values.
         */ Object.defineProperty(this, "open", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A set of "close" values.
         */ Object.defineProperty(this, "close", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dataContext = dataContext;
        this.component = component;
        this._settings.visible = true;
        this._checkDirty();
    }
    /**
     * @ignore
     */ markDirty() {
        this.component.markDirtyValues(this);
    }
    _startAnimation() {
        this.component._root._addAnimation(this);
    }
    _animationTime() {
        return this.component._root.animationTime;
    }
    _dispose() {
        if (this.component) {
            this.component.disposeDataItem(this);
        }
        super._dispose();
    }
    /**
     * Shows a data item that's currently hidden.
     */ show(duration) {
        this.setRaw("visible", true);
        if (this.component) {
            this.component.showDataItem(this, duration);
        }
    }
    /**
     * Hides a data item that's currently visible.
     */ hide(duration) {
        this.setRaw("visible", false);
        if (this.component) {
            this.component.hideDataItem(this, duration);
        }
    }
    isHidden() {
        return !this.get("visible");
    }
}
class Component extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListData"]()
        });
        Object.defineProperty(this, "_dataItems", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_mainDataItems", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._dataItems
        });
        Object.defineProperty(this, "valueFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "fields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "id"
            ]
        });
        Object.defineProperty(this, "_valueFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_valueFieldsF", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fieldsF", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_valuesDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_dataChanged", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_dataGrouped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Indicates if the component has already been initialized.
         */ Object.defineProperty(this, "inited", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    /**
     * Component's data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
     */ set data(data) {
        data.incrementRef();
        this._data.decrementRef();
        this._data = data;
    }
    /**
     * @return  Data
     */ get data() {
        return this._data;
    }
    _dispose() {
        super._dispose();
        this._data.decrementRef();
    }
    _onDataClear() {}
    _afterNew() {
        super._afterNew();
        this._data.incrementRef();
        this._updateFields();
        this._disposers.push(this.data.events.onAll((change)=>{
            const dataItems = this._mainDataItems;
            this.markDirtyValues();
            this._markDirtyGroup();
            this._dataChanged = true;
            if (change.type === "clear") {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(dataItems, (dataItem)=>{
                    dataItem.dispose();
                });
                dataItems.length = 0;
                this._onDataClear();
            } else if (change.type === "push") {
                const dataItem = new DataItem(this, change.newValue, this._makeDataItem(change.newValue));
                dataItems.push(dataItem);
                this.processDataItem(dataItem);
            } else if (change.type === "setIndex") {
                const dataItem = dataItems[change.index];
                const properties = this._makeDataItem(change.newValue);
                if (dataItem.bullets && dataItem.bullets.length == 0) {
                    dataItem.bullets = undefined;
                }
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(properties).forEach((key)=>{
                    dataItem.animate({
                        key: key,
                        to: properties[key],
                        duration: this.get("interpolationDuration", 0),
                        easing: this.get("interpolationEasing")
                    });
                });
                dataItem.dataContext = change.newValue;
            } else if (change.type === "insertIndex") {
                const dataItem = new DataItem(this, change.newValue, this._makeDataItem(change.newValue));
                dataItems.splice(change.index, 0, dataItem);
                this.processDataItem(dataItem);
            } else if (change.type === "removeIndex") {
                const dataItem = dataItems[change.index];
                dataItem.dispose();
                dataItems.splice(change.index, 1);
            } else if (change.type === "moveIndex") {
                const dataItem = dataItems[change.oldIndex];
                dataItems.splice(change.oldIndex, 1);
                dataItems.splice(change.newIndex, 0, dataItem);
            } else {
                throw new Error("Unknown IStreamEvent type");
            }
            this._afterDataChange();
        }));
    }
    _updateFields() {
        if (this.valueFields) {
            this._valueFields = [];
            this._valueFieldsF = {};
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.valueFields, (key)=>{
                const field = this.get(key + "Field");
                if (field) {
                    this._valueFields.push(key);
                    this._valueFieldsF[key] = {
                        fieldKey: key + "Field",
                        workingKey: key + "Working"
                    };
                }
            });
        }
        if (this.fields) {
            this._fields = [];
            this._fieldsF = {};
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.fields, (key)=>{
                const field = this.get(key + "Field");
                if (field) {
                    this._fields.push(key);
                    this._fieldsF[key] = key + "Field";
                }
            });
        }
    }
    /**
     * A list of component's data items.
     *
     * @return  Data items
     */ get dataItems() {
        return this._dataItems;
    }
    processDataItem(_dataItem) {}
    _makeDataItem(data) {
        //const output: this["_dataItemSettings"] = {};
        const output = {}; // temporary to solve error
        if (this._valueFields) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._valueFields, (key)=>{
                const field = this.get(this._valueFieldsF[key].fieldKey);
                output[key] = data[field];
                output[this._valueFieldsF[key].workingKey] = output[key];
            });
        }
        if (this._fields) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._fields, (key)=>{
                const field = this.get(this._fieldsF[key]);
                output[key] = data[field];
            });
        }
        return output;
    }
    /**
     * @ignore
     */ makeDataItem(data) {
        let dataItem = new DataItem(this, undefined, data);
        this.processDataItem(dataItem);
        return dataItem;
    }
    /**
     * @ignore
     */ pushDataItem(data) {
        const dataItem = this.makeDataItem(data);
        this._mainDataItems.push(dataItem);
        return dataItem;
    }
    /**
     * @ignore
     */ disposeDataItem(_dataItem) {}
    /**
     * Shows component's data item.
     *
     * @param   dataItem   Data item
     * @param   _duration  Animation duration in milliseconds
     * @return             Promise
     */ showDataItem(dataItem, _duration) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            dataItem.set("visible", true);
        });
    }
    /**
     * Hides component's data item.
     *
     * @param   dataItem   Data item
     * @param   _duration  Animation duration in milliseconds
     * @return             Promise
     */ hideDataItem(dataItem, _duration) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            dataItem.set("visible", false);
        });
    }
    _clearDirty() {
        super._clearDirty();
        this._valuesDirty = false;
    }
    _afterDataChange() {}
    _afterChanged() {
        super._afterChanged();
        if (this._dataChanged) {
            const type = "datavalidated";
            if (this.events.isEnabled(type)) {
                this.events.dispatch(type, {
                    type: type,
                    target: this
                });
            }
            this._dataChanged = false;
        }
        this.inited = true;
    }
    /**
     * Forces a repaint of the element which relies on data.
     *
     * @since 5.0.21
     */ markDirtyValues(_dataItem) {
        this.markDirty();
        this._valuesDirty = true;
    }
    _markDirtyGroup() {
        this._dataGrouped = false;
    }
    /**
     * @ignore
     */ markDirtySize() {
        this._sizeDirty = true;
        this.markDirty();
    }
}
Object.defineProperty(Component, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Component"
});
Object.defineProperty(Component, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Component.className
    ])
}); //# sourceMappingURL=Component.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Text.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Text": ()=>Text
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class Text extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "textStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeTextStyle()
        });
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeText("", this.textStyle)
        });
        Object.defineProperty(this, "_textStyles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "textAlign",
                "fontFamily",
                "fontSize",
                "fontStyle",
                "fontWeight",
                "fontStyle",
                "fontVariant",
                "textDecoration",
                "shadowColor",
                "shadowBlur",
                "shadowOffsetX",
                "shadowOffsetY",
                "shadowOpacity",
                // "leading",
                // "letterSpacing",
                "lineHeight",
                "baselineRatio",
                //"padding",
                // "stroke",
                // "strokeThickness",
                // "trim",
                // "wordWrap",
                "direction",
                "textBaseline",
                "oversizedBehavior",
                "breakWords",
                "ellipsis",
                "minScale",
                "maxChars"
            ]
        });
        Object.defineProperty(this, "_originalScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _updateBounds() {
        if (!this.get("text")) {
            let newBounds = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            };
            this._adjustedLocalBounds = newBounds;
        } else {
            super._updateBounds();
        }
    }
    _changed() {
        super._changed();
        this._display.clear();
        let textStyle = this.textStyle;
        if (this.isDirty("opacity")) {
            let opacity = this.get("opacity", 1);
            this._display.alpha = opacity;
        }
        if (this.isDirty("text") || this.isDirty("populateText")) {
            this._display.text = this._getText();
            this.markDirtyBounds();
            if (this.get("role") == "tooltip") {
                this._root.updateTooltip(this);
            }
        }
        if (this.isPrivateDirty("tooltipElement")) {
            const tooltipElement = this.getPrivate("tooltipElement");
            if (tooltipElement) {
                this._disposers.push(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
                    this._root._removeTooltipElement(this);
                }));
            }
        }
        if (this.isDirty("width")) {
            textStyle.wordWrapWidth = this.width();
            this.markDirtyBounds();
        }
        if (this.isDirty("oversizedBehavior")) {
            textStyle.oversizedBehavior = this.get("oversizedBehavior", "none");
            this.markDirtyBounds();
        }
        if (this.isDirty("breakWords")) {
            textStyle.breakWords = this.get("breakWords", false);
            this.markDirtyBounds();
        }
        if (this.isDirty("ellipsis")) {
            textStyle.ellipsis = this.get("ellipsis");
            this.markDirtyBounds();
        }
        if (this.isDirty("ignoreFormatting")) {
            textStyle.ignoreFormatting = this.get("ignoreFormatting", false);
            this.markDirtyBounds();
        }
        if (this.isDirty("minScale")) {
            textStyle.minScale = this.get("minScale", 0);
            this.markDirtyBounds();
        }
        if (this.isDirty("fill")) {
            let fill = this.get("fill");
            if (fill) {
                textStyle.fill = fill;
            }
        }
        if (this.isDirty("fillOpacity")) {
            let fillOpacity = this.get("fillOpacity", 1);
            if (fillOpacity) {
                textStyle.fillOpacity = fillOpacity;
            }
        }
        if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
            textStyle.maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
            this.markDirtyBounds();
        }
        if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
            textStyle.maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
            this.markDirtyBounds();
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textStyles, (styleName)=>{
            if (this._dirty[styleName]) {
                textStyle[styleName] = this.get(styleName);
                this.markDirtyBounds();
            }
        });
        textStyle["fontSize"] = this.get("fontSize");
        textStyle["fontFamily"] = this.get("fontFamily");
        this._display.style = textStyle;
        if (this.isDirty("role") && this.get("role") == "tooltip") {
            this._root.updateTooltip(this);
        }
    }
    _getText() {
        let text = this.get("text", "");
        if (this.get("maxChars")) {
            text = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.truncateTextWithEllipsis(text, this.get("maxChars", 100000000), this.get("breakWords"), this.get("ellipsis"));
        }
        return this.get("populateText") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["populateString"])(this, text) : text;
    }
    _getAccessibleText() {
        const ariaLabel = this.get("ariaLabel");
        if (ariaLabel !== undefined) {
            return this.get("populateText") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$PopulateString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["populateString"])(this, ariaLabel) : ariaLabel;
        }
        return this._getText();
    }
    /**
     * Forces the text to be re-evaluated and re-populated.
     */ markDirtyText() {
        this._display.text = this._getText();
        if (this.get("role") == "tooltip") {
            this._root.updateTooltip(this);
        }
        this.markDirtyBounds();
        this.markDirty();
    }
    _setDataItem(dataItem) {
        super._setDataItem(dataItem);
        if (this.get("populateText")) {
            this.markDirtyText();
        }
    }
    getNumberFormatter() {
        if (this.parent) {
            return this.parent.getNumberFormatter();
        } else {
            return super.getNumberFormatter();
        }
    }
    getDateFormatter() {
        if (this.parent) {
            return this.parent.getDateFormatter();
        } else {
            return super.getDateFormatter();
        }
    }
    getDurationFormatter() {
        if (this.parent) {
            return this.parent.getDurationFormatter();
        } else {
            return super.getDurationFormatter();
        }
    }
}
Object.defineProperty(Text, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Text"
});
Object.defineProperty(Text, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"].classNames.concat([
        Text.className
    ])
}); //# sourceMappingURL=Text.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Label": ()=>Label
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Text.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class Label extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_textKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "text",
                "fill",
                "fillOpacity",
                "textAlign",
                "fontFamily",
                "fontSize",
                "fontStyle",
                "fontWeight",
                "fontStyle",
                "fontVariant",
                "textDecoration",
                "shadowColor",
                "shadowBlur",
                "shadowOffsetX",
                "shadowOffsetY",
                "shadowOpacity",
                // "leading",
                // "letterSpacing",
                "lineHeight",
                "baselineRatio",
                //"padding",
                // "stroke",
                // "strokeThickness",
                // "trim",
                // "wordWrap",
                "direction",
                "textBaseline",
                "oversizedBehavior",
                "breakWords",
                "ellipsis",
                "minScale",
                "populateText",
                "role",
                "ignoreFormatting",
                "maxChars",
                "ariaLabel"
            ]
        });
    }
    /**
     * @ignore Text is not to be used directly
     */ get text() {
        return this._text;
    }
    _afterNew() {
        super._afterNew();
        this._makeText();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textKeys, (property)=>{
            const propValue = this.get(property);
            if (propValue != undefined) {
                this._text.set(property, propValue);
            }
        });
        if (this.get("html", "") !== "") {
            this._text.set("text", "");
        }
        this.onPrivate("maxWidth", ()=>{
            this._setMaxDimentions();
        });
        this.onPrivate("maxHeight", ()=>{
            this._setMaxDimentions();
        });
    }
    _makeText() {
        this._text = this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].new(this._root, {}));
    }
    _updateChildren() {
        super._updateChildren();
        const text = this._text;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._textKeys, (property)=>{
            this._text.set(property, this.get(property));
        });
        if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isDirty("rotation")) {
            this._setMaxDimentions();
        }
        // Do not show regular text if HTML is used
        if (this.get("html", "") !== "") {
            text.set("text", "");
        } else {
            text.set("text", this.get("text"));
            this._maybeUpdateHTMLColor();
        }
        if (this.isDirty("fill")) {
            this._maybeUpdateHTMLColor();
        }
        if (this.isDirty("textAlign") || this.isDirty("width")) {
            const textAlign = this.get("textAlign");
            let x;
            if (this.get("width") != null) {
                if (textAlign == "right") {
                    x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"];
                } else if (textAlign == "center") {
                    x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"];
                } else {
                    x = 0;
                }
            } else {
                if (textAlign == "left" || textAlign == "start") {
                    x = this.get("paddingLeft", 0);
                } else if (textAlign == "right" || textAlign == "end") {
                    x = -this.get("paddingRight", 0);
                }
            }
            text.set("x", x);
        }
        const background = this.get("background");
        if (background) {
            background.setPrivate("visible", text._display.textVisible);
        }
    }
    _maybeUpdateHTMLColor() {
        const htmlElement = this.getPrivate("htmlElement");
        if (htmlElement && this.get("fill")) {
            htmlElement.style.color = this.get("fill").toCSSHex();
        }
    }
    _setMaxDimentions() {
        const rotation = this.get("rotation");
        const vertical = rotation == 90 || rotation == 270 || rotation == -90;
        const text = this._text;
        const maxWidth = this.get("maxWidth", this.getPrivate("maxWidth", Infinity));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxWidth)) {
            text.set(vertical ? "maxHeight" : "maxWidth", maxWidth - this.get("paddingLeft", 0) - this.get("paddingRight", 0));
        } else {
            text.set(vertical ? "maxHeight" : "maxWidth", undefined);
        }
        const maxHeight = this.get("maxHeight", this.getPrivate("maxHeight", Infinity));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(maxHeight)) {
            text.set(vertical ? "maxWidth" : "maxHeight", maxHeight - this.get("paddingTop", 0) - this.get("paddingBottom", 0));
        } else {
            text.set(vertical ? "maxWidth" : "maxHeight", undefined);
        }
        this.root.events.once("frameended", ()=>{
            text.markDirtyBounds();
        });
    }
    _setDataItem(dataItem) {
        super._setDataItem(dataItem);
        this._markDirtyKey("text");
        const text = this._text;
        if (text.get("populateText")) {
            text.markDirtyText();
        }
        const html = this.get("html");
        if (html && html !== "") {
            this._updateHTMLContent();
        }
    }
    /**
     * Returns text with populated placeholders and formatting if `populateText` is
     * set to `true`.
     *
     * @return Populated text
     */ getText() {
        return this._text._getText();
    }
    /**
     * Returns "aria-label" text with populated placeholders and formatting
     * if `populateText` is set to `true`.
     *
     * @return Populated text
     */ getAccessibleText() {
        return this._text._getAccessibleText();
    }
}
Object.defineProperty(Label, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Label"
});
Object.defineProperty(Label, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Label.className
    ])
}); //# sourceMappingURL=Label.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/EditableLabel.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "EditableLabel": ()=>EditableLabel
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
class EditableLabel extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"] {
    _afterNew() {
        super._afterNew();
        const input = this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
            html: "<textarea class=\"am5-editable-label\"></textarea>",
            isMeasured: false
        }));
        input.hide();
        const editOn = this.get("editOn", "click");
        if (editOn != "none") {
            input.events.on(editOn, (_ev)=>{
            // this is here just to make it interactive
            });
            this.events.on(editOn, (_ev)=>{
                this.set("active", true);
            });
        }
        this.setPrivate("input", input);
        // Set background
        let background = this.get("background");
        if (!background) {
            background = this.set("background", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
                themeTags: [
                    "editablelabel",
                    "background"
                ]
            }));
        } else {
            background.set("themeTags", [
                "editablelabel",
                "background"
            ]);
        }
    }
    _prepareChildren() {
        super._prepareChildren();
        this._maybeInitTextarea();
    }
    _updateChildren() {
        super._updateChildren();
        if (this.isDirty("active")) {
            const editing = this.get("active", false);
            if (editing) {
                this._startEditing();
            } else {
                this._stopEditing();
            }
            const bg = this.get("background");
            if (bg) {
                bg.set("active", editing);
            }
        }
        ;
        this._syncText();
        this._syncStyle();
    }
    _maybeInitTextarea() {
        if (!this._isInited()) {
            const input = this.getPrivate("input");
            if (input && input.getPrivate("htmlElement")) {
                const el = input.getPrivate("htmlElement");
                const textarea = el.querySelector(".am5-editable-label");
                if (textarea) {
                    this.setPrivate("textarea", textarea);
                    // Resize textarea on keypress
                    textarea.addEventListener("input", (_ev)=>{
                        if (this.get("multiLine") === false) {
                            // replace line breaks with spaces for single-line labels
                            textarea.value = textarea.value.replace(/\n/g, " ");
                        }
                        this.set("text", textarea.value);
                        this._syncStyle();
                    });
                    // Finish editing on blur
                    textarea.addEventListener("blur", (_ev)=>this.set("active", false));
                    // Finish editing on ESC press
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.supports("keyboardevents")) {
                        this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(document, "keydown", (ev)=>{
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getEventKey(ev) == "Escape") {
                                this.set("active", false);
                            }
                        }));
                    }
                    // Intercept ENTER if necessary
                    this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(document, "keydown", (ev)=>{
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getEventKey(ev) == "Enter" && this.get("multiLine") === false) {
                            // Single-line label, save instead of breaking into new line
                            ev.preventDefault();
                            this.set("active", false);
                        }
                    }));
                    this.events.dispatch("inited", {
                        type: "inited",
                        target: this
                    });
                }
            }
        }
    }
    _isInited() {
        return this.getPrivate("textarea") ? true : false;
    }
    _startEditing() {
        if (!this._isInited()) {
            this.events.once("inited", ()=>{
                this._startEditing();
            });
            return;
        }
        this._text.set("opacity", 0);
        const input = this.getPrivate("input");
        const textarea = this.getPrivate("textarea");
        if (textarea) {
            if (this.get("text", "") == "") {
                this.set("text", " ");
            }
            input.show(0);
            this.setTimeout(()=>{
                // size textarea to fit its actual content
                this._syncStyle();
                textarea.focus();
            }, 100);
        }
    }
    _stopEditing() {
        if (!this._isInited()) {
            this.events.once("inited", ()=>{
                this._stopEditing();
            });
            return;
        }
        const input = this.getPrivate("input");
        const textarea = this.getPrivate("textarea");
        if (textarea) {
            this.set("text", textarea.value);
            input.hide(0);
            this._text.set("opacity", 1);
        }
    }
    _syncStyle() {
        const input = this.getPrivate("input");
        const textarea = this.getPrivate("textarea");
        if (textarea) {
            // Set up HTML
            const el = input.getPrivate("htmlElement");
            // Reset all styles
            const computedStyles = window.getComputedStyle(textarea);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(computedStyles, (style)=>{
                textarea.style[style] = "initial";
            });
            // Remove textarea attributes
            textarea.style.color = this.get("fill", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["color"])(0x000000)).toCSS(this.get("fillOpacity", 1));
            textarea.style.backgroundColor = "rgba(0, 0, 0, 0)";
            textarea.style.border = "none";
            textarea.style.outline = "none";
            textarea.style.padding = "0";
            // Wrapping
            textarea.wrap = "off";
            textarea.style.resize = "none";
            // Place carret under mouse cursor
            // @todo
            // Size
            textarea.style.overflow = "hidden";
            const maxWidth = this.get("maxWidth", 0) - this.get("paddingLeft", 0) - this.get("paddingRight", 0);
            if (maxWidth > 0) {
                textarea.style.maxWidth = maxWidth + "px";
            } else {
                textarea.style.minWidth = textarea.scrollWidth + "px";
            }
            textarea.style.height = "auto";
            textarea.style.minHeight = textarea.scrollHeight + "px";
            // If width is explicitly set on a label, use it for textarea
            if (this.get("width")) {
                textarea.style.width = this.width() - this.get("paddingLeft", 0) - this.get("paddingRight", 0) + "px";
                textarea.style.minWidth = "";
            }
            // Line height
            const lineHeight = this.get("lineHeight");
            if (!lineHeight) {
                textarea.style.lineHeight = "1.2";
            } else if (lineHeight instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                textarea.style.lineHeight = lineHeight.value + "";
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(lineHeight)) {
                textarea.style.lineHeight = lineHeight + "";
            }
            // Font stuff
            let fontFamily = this.get("fontFamily");
            if (!fontFamily) {
                fontFamily = getComputedStyle(input.getPrivate("htmlElement"), "font-family").getPropertyValue("font-family");
            }
            textarea.style.fontFamily = fontFamily;
            let fontSize = this.get("fontSize");
            if (!fontSize) {
                fontSize = getComputedStyle(input.getPrivate("htmlElement"), "font-size").getPropertyValue("font-size");
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(fontSize)) {
                fontSize = fontSize + "px";
            } else {
                fontSize = fontSize;
            }
            textarea.style.fontSize = fontSize;
            let fontWeight = this.get("fontWeight");
            if (!fontWeight) {
                fontWeight = getComputedStyle(input.getPrivate("htmlElement"), "font-weight").getPropertyValue("font-weight");
            } else {
                fontWeight = fontWeight;
            }
            textarea.style.fontWeight = fontWeight;
            let fontStyle = this.get("fontStyle");
            if (!fontStyle) {
                fontStyle = getComputedStyle(input.getPrivate("htmlElement"), "font-style").getPropertyValue("font-style");
            } else {
                fontStyle = fontStyle;
            }
            textarea.style.fontStyle = fontStyle;
            const oversizeBehavior = this.get("oversizedBehavior");
            if (oversizeBehavior == "wrap") {
                textarea.style.whiteSpace = "pre-wrap";
            } else {
                textarea.style.whiteSpace = "nowrap";
            }
            // Adjust textarea postion based on textAlign setting
            this._root.events.on("frameended", ()=>{
                const textAlign = this.get("textAlign", "start");
                if (textAlign == "center") {
                    textarea.style.textAlign = "center";
                    if (!el.style.transform.match(/translateX/) && !this.get("width")) {
                        el.style.transform += " translateX(-50%)";
                    }
                } else if (textAlign == "end") {
                    textarea.style.textAlign = "right";
                    if (!el.style.transform.match(/translateX/) && !this.get("width")) {
                        el.style.transform += " translateX(-100%)";
                    }
                } else {
                    textarea.style.textAlign = textAlign;
                }
            });
        }
    }
    _syncText() {
        const textarea = this.getPrivate("textarea");
        let text = this.get("text", "");
        if (text == " ") {
            text = "";
        }
        if (textarea) {
            textarea.value = text;
        }
    }
}
Object.defineProperty(EditableLabel, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "EditableLabel"
});
Object.defineProperty(EditableLabel, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"].classNames.concat([
        EditableLabel.className
    ])
}); //# sourceMappingURL=EditableLabel.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Ellipse.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Ellipse": ()=>Ellipse
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Ellipse extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("radiusX") || this.isDirty("radiusY") || this.isDirty("rotation")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            this._display.drawEllipse(0, 0, Math.abs(this.get("radiusX")), Math.abs(this.get("radiusY")));
        }
    }
}
Object.defineProperty(Ellipse, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Ellipse"
});
Object.defineProperty(Ellipse, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Ellipse.className
    ])
}); //# sourceMappingURL=Ellipse.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/Gradient.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Gradient": ()=>Gradient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Gradient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    _afterNew() {
        // Applying themes because gradient will not have parent
        super._afterNewApplyThemes();
    }
    /**
     * @ignore
     */ getFill(_target) {
        return {
            addColorStop: (_offset, _color)=>{}
        };
    }
    _changed() {
        super._changed();
    //if (this.isDirty("target") && this.get("target")) {
    //	this.get("target")!.events.on("boundschanged", () => {
    //	});
    //}
    }
    /**
     * @ignore
     */ getBounds(target) {
        const gradientTarget = this.get("target");
        if (gradientTarget) {
            let bounds = gradientTarget.globalBounds();
            const p0 = target.toLocal({
                x: bounds.left,
                y: bounds.top
            });
            const p1 = target.toLocal({
                x: bounds.right,
                y: bounds.top
            });
            const p2 = target.toLocal({
                x: bounds.right,
                y: bounds.bottom
            });
            const p3 = target.toLocal({
                x: bounds.left,
                y: bounds.bottom
            });
            return {
                left: Math.min(p0.x, p1.x, p2.x, p3.x),
                top: Math.min(p0.y, p1.y, p2.y, p3.y),
                right: Math.max(p0.x, p1.x, p2.x, p3.x),
                bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
            };
        }
        return target._display.getLocalBounds();
    }
}
Object.defineProperty(Gradient, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Gradient"
});
Object.defineProperty(Gradient, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Gradient.className
    ])
}); //# sourceMappingURL=Gradient.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/GrainPattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "GrainPattern": ()=>GrainPattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class GrainPattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "canvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("canvas")
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.canvas.getContext("2d")
        });
        Object.defineProperty(this, "_clearGrain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _beforeChanged() {
        //document.body.appendChild(this.canvas); // temp
        this.canvas.width = this.get("width", 200);
        this.canvas.height = this.get("height", 200);
        if (this.isDirty("size") || this.isDirty("density") || this.isDirty("minOpacity") || this.isDirty("maxOpacity") || this.isDirty("colors") || this.isDirty("horizontalGap") || this.isDirty("verticalGap")) {
            this._clearGrain = true;
        }
        super._beforeChanged();
    }
    _changed() {
        super._changed();
        if (this._clearGrain) {
            const width = this.get("width", 200);
            const height = this.get("height", 200);
            const patternData = this.context.getImageData(0, 0, width, height);
            const size = Math.max(1, this.get("size", 1));
            const minOpacity = this.get("minOpacity", 0);
            const maxOpacity = this.get("maxOpacity", 0.3);
            const colors = this.get("colors", [
                this.get("color", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromHex(0x000000))
            ]);
            const cols = width / size;
            const rows = height / size;
            const density = this.get("density", 1);
            const horizontalGap = this.get("horizontalGap", 0) + 1;
            const verticalGap = this.get("verticalGap", 0) + 1;
            for(let r = 0; r < rows; r++){
                if (verticalGap > 0) {
                    if (r / verticalGap != Math.round(r / verticalGap)) {
                        continue;
                    }
                }
                for(let c = 0; c < cols; c++){
                    const color = colors[Math.floor(Math.random() * colors.length)];
                    const alpha = (minOpacity + Math.random() * (maxOpacity - minOpacity)) * 255;
                    const rnd = Math.random();
                    if (horizontalGap > 0) {
                        if (c / horizontalGap != Math.round(c / horizontalGap)) {
                            continue;
                        }
                    }
                    if (rnd < density) {
                        this._setRectData(c, r, size, width, patternData.data, color.r, color.g, color.b, alpha);
                    }
                }
            }
            this.context.putImageData(patternData, 0, 0);
            this._pattern = this.context.createPattern(this.canvas, "repeat");
        }
        this._clearGrain = false;
    }
    _checkDirtyFill() {
        return false;
    }
    _setRectData(col, row, size, width, data, rc, gc, bc, ac) {
        for(var c = col * size; c < col * size + size; c++){
            for(var r = row * size; r < row * size + size; r++){
                var i = (r * width + c) * 4;
                data[i] = rc;
                data[i + 1] = gc;
                data[i + 2] = bc;
                data[i + 3] = ac;
            }
        }
    }
}
Object.defineProperty(GrainPattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "GrainPattern"
});
Object.defineProperty(GrainPattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        GrainPattern.className
    ])
}); //# sourceMappingURL=GrainPattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "PointedRectangle": ()=>PointedRectangle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class PointedRectangle extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("pointerBaseWidth") || this.isDirty("cornerRadius") || this.isDirty("pointerLength") || this.isDirty("pointerX") || this.isDirty("pointerY") || this.isDirty("width") || this.isDirty("height")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            this.markDirtyBounds();
            let w = this.width();
            let h = this.height();
            if (w > 0 && h > 0) {
                let cr = this.get("cornerRadius", 8);
                cr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(cr, 0, Math.min(w / 2, h / 2));
                let x = this.get("pointerX", 0);
                let y = this.get("pointerY", 0);
                let bwh = this.get("pointerBaseWidth", 15) / 2;
                // corner coordinates
                // top left
                let xtl = 0;
                let ytl = 0;
                // top right
                let xtr = w;
                let ytr = 0;
                // bottom right
                let xbr = w;
                let ybr = h;
                // bottom left
                let xbl = 0;
                let ybl = h;
                // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
                // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
                let d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
                let d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
                const display = this._display;
                // top
                display.moveTo(cr, 0);
                if (d1 > 0 && d2 > 0) {
                    let stemX = Math.round(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(x, cr + bwh, w - bwh - cr));
                    y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(y, -Infinity, 0);
                    display.lineTo(stemX - bwh, 0);
                    display.lineTo(x, y);
                    display.lineTo(stemX + bwh, 0);
                }
                display.lineTo(w - cr, 0);
                display.arcTo(w, 0, w, cr, cr);
                // right
                if (d1 > 0 && d2 < 0) {
                    let stemY = Math.round(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(y, cr + bwh, h - bwh - cr));
                    x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(x, w, Infinity);
                    display.lineTo(w, cr);
                    display.lineTo(w, Math.max(stemY - bwh, cr));
                    display.lineTo(x, y);
                    display.lineTo(w, stemY + bwh);
                }
                display.lineTo(w, h - cr);
                display.arcTo(w, h, w - cr, h, cr);
                // bottom
                if (d1 < 0 && d2 < 0) {
                    let stemX = Math.round(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(x, cr + bwh, w - bwh - cr));
                    y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(y, h, Infinity);
                    display.lineTo(w - cr, h);
                    display.lineTo(stemX + bwh, h);
                    display.lineTo(x, y);
                    display.lineTo(stemX - bwh, h);
                }
                display.lineTo(cr, h);
                display.arcTo(0, h, 0, h - cr, cr);
                // left
                if (d1 < 0 && d2 > 0) {
                    let stemY = Math.round(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(y, cr + bwh, h - cr - bwh));
                    x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(x, -Infinity, 0);
                    display.lineTo(0, h - cr);
                    display.lineTo(0, stemY + bwh);
                    display.lineTo(x, y);
                    display.lineTo(0, Math.max(stemY - bwh, cr));
                }
                display.lineTo(0, cr);
                display.arcTo(0, 0, cr, 0, cr);
                display.closePath();
            }
        }
    }
}
Object.defineProperty(PointedRectangle, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "PointedRectangle"
});
Object.defineProperty(PointedRectangle, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        PointedRectangle.className
    ])
}); //# sourceMappingURL=PointedRectangle.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Tooltip": ()=>Tooltip
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$PointedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
class Tooltip extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(root, settings, isReal, templates = []){
        super(root, settings, isReal, templates);
        Object.defineProperty(this, "_fx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_fy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fillDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_strokeDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_labelDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_keepHoverDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_htmlContentHovered", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _afterNew() {
        this._settings.themeTags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
            "tooltip"
        ]);
        super._afterNew();
        const background = this._setDefaultFn("background", ()=>{
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$PointedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PointedRectangle"].new(this._root, {});
        });
        background.set("themeTags", [
            "tooltip",
            "background"
        ]);
        this._label = this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"].new(this._root, {}));
        this._disposers.push(this._label.events.on("boundschanged", ()=>{
            this._updateBackground();
        }));
        this._disposers.push(this.on("bounds", ()=>{
            this._updateBackground();
        }));
        this._updateTextColor();
        this._root.tooltipContainer.children.push(this);
        this.hide(0);
        this._disposers.push(this.label.onPrivate("htmlElement", (htmlElement)=>{
            if (htmlElement) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(htmlElement, "pointerover", (_ev)=>{
                    this._htmlContentHovered = true;
                });
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(htmlElement, "pointerout", (_ev)=>{
                    this._htmlContentHovered = false;
                });
            }
        }));
        this.on("visible", (_ev)=>{
            this._handleReaderAnnouncement();
        });
        this.label.events.on("dataitemchanged", (_ev)=>{
            this._handleReaderAnnouncement();
        });
        this._root._tooltips.push(this);
    }
    _handleReaderAnnouncement() {
        if (this.get("readerAnnounce") && this.isVisibleDeep()) {
            this._root.readerAlert(this.label.getAccessibleText());
        }
    }
    /**
     * A [[Label]] element for the tooltip.
     *
     * @readonly
     * @return Label
     */ get label() {
        return this._label;
    }
    /**
     * Permanently disposes the tooltip.
     */ dispose() {
        super.dispose();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.remove(this._root._tooltips, this);
    }
    _updateChildren() {
        super._updateChildren();
        if (this.isDirty("pointerOrientation") || this.isPrivateDirty("minWidth") || this.isPrivateDirty("minHeight")) {
            this.get("background")._markDirtyKey("width");
        }
        const labelText = this.get("labelText");
        if (labelText != null) {
            this.label.set("text", this.get("labelText"));
        }
        const labelHTML = this.get("labelHTML");
        if (labelHTML != null) {
            this.label.set("html", this.get("labelHTML"));
        }
        const labelAriaLabel = this.get("labelAriaLabel");
        if (labelAriaLabel != null) {
            this.label.set("ariaLabel", this.get("labelAriaLabel"));
        }
    }
    _changed() {
        super._changed();
        if (this.isDirty("pointTo") || this.isDirty("pointerOrientation")) {
            // can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)
            this._updateBackground();
        }
        if (this.isDirty("tooltipTarget")) {
            this.updateBackgroundColor();
        }
        if (this.isDirty("keepTargetHover")) {
            const keephover = this.get("keepTargetHover");
            if (keephover) {
                const bg = this.get("background");
                this._keepHoverDp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    bg.events.on("pointerover", (_ev)=>{
                        let target = this.get("tooltipTarget");
                        if (target) {
                            if (target.parent && target.parent.getPrivate("tooltipTarget") == target) {
                                target = target.parent;
                            }
                            target.hover();
                        }
                    }),
                    bg.events.on("pointerout", (_ev)=>{
                        let target = this.get("tooltipTarget");
                        if (target) {
                            if (target.parent && target.parent.getPrivate("tooltipTarget") == target) {
                                target = target.parent;
                            }
                            if (!this._htmlContentHovered) {
                                target.unhover();
                            }
                        }
                    })
                ]);
                this.label.onPrivate("htmlElement", (htmlElement)=>{
                    if (this._keepHoverDp && htmlElement) {
                        this._keepHoverDp.disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(htmlElement, "pointerleave", (ev)=>{
                            const outEvent = this.root._renderer.getEvent(ev);
                            bg.events.dispatch("pointerout", {
                                type: "pointerout",
                                originalEvent: outEvent.event,
                                point: outEvent.point,
                                simulated: false,
                                target: bg
                            });
                        }));
                    }
                });
            } else {
                if (this._keepHoverDp) {
                    this._keepHoverDp.dispose();
                    this._keepHoverDp = undefined;
                }
            }
        }
    }
    _onShow() {
        super._onShow();
        this.updateBackgroundColor();
    }
    updateBackgroundColor() {
        let tooltipTarget = this.get("tooltipTarget");
        const background = this.get("background");
        let fill;
        let stroke;
        if (tooltipTarget && background) {
            fill = tooltipTarget.get("fill");
            stroke = tooltipTarget.get("stroke");
            if (fill == null) {
                fill = stroke;
            }
            if (this.get("getFillFromSprite")) {
                if (this._fillDp) {
                    this._fillDp.dispose();
                }
                if (fill != null) {
                    background.set("fill", fill);
                }
                this._fillDp = tooltipTarget.on("fill", (fill)=>{
                    if (fill != null) {
                        background.set("fill", fill);
                        this._updateTextColor(fill);
                    }
                });
                this._disposers.push(this._fillDp);
            }
            if (this.get("getStrokeFromSprite")) {
                if (this._strokeDp) {
                    this._strokeDp.dispose();
                }
                if (fill != null) {
                    background.set("stroke", fill);
                }
                this._strokeDp = tooltipTarget.on("fill", (fill)=>{
                    if (fill != null) {
                        background.set("stroke", fill);
                    }
                });
                this._disposers.push(this._strokeDp);
            }
            if (this.get("getLabelFillFromSprite")) {
                if (this._labelDp) {
                    this._labelDp.dispose();
                }
                if (fill != null) {
                    this.label.set("fill", fill);
                }
                this._labelDp = tooltipTarget.on("fill", (fill)=>{
                    if (fill != null) {
                        this.label.set("fill", fill);
                    }
                });
                this._disposers.push(this._labelDp);
            }
        }
        this._updateTextColor(fill);
    }
    _updateTextColor(fill) {
        if (this.get("autoTextColor")) {
            if (fill == null) {
                fill = this.get("background").get("fill");
            }
            if (fill == null) {
                fill = this._root.interfaceColors.get("background");
            }
            if (fill instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                this.label.set("fill", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].alternative(fill, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text")));
            }
        }
    }
    _setDataItem(dataItem) {
        super._setDataItem(dataItem);
        this.label._setDataItem(dataItem);
    }
    _updateBackground() {
        super.updateBackground();
        const parent = this._root.container;
        if (parent) {
            let cw = 0.5;
            let ch = 0.5;
            let centerX = this.get("centerX");
            if (centerX instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                cw = centerX.value;
            }
            let centerY = this.get("centerY");
            if (centerY instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                ch = centerY.value;
            }
            let parentW = parent.width();
            let parentH = parent.height();
            let tooltipContainer = this.parent;
            let xx = 0;
            let yy = 0;
            if (tooltipContainer) {
                xx = tooltipContainer.x();
                yy = tooltipContainer.y();
                const layerMargin = tooltipContainer.get("layerMargin");
                if (layerMargin) {
                    xx += layerMargin.left || 0;
                    yy += layerMargin.top || 0;
                    parentW += (layerMargin.left || 0) + (layerMargin.right || 0);
                    parentH += (layerMargin.top || 0) + (layerMargin.bottom || 0);
                }
            }
            const bounds = this.get("bounds", {
                left: -xx,
                top: -yy,
                right: parentW - xx,
                bottom: parentH - yy
            });
            this._updateBounds();
            let w = this.width();
            let h = this.height();
            // use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens
            if (w === 0) {
                w = this._w;
            }
            if (h === 0) {
                h = this._h;
            }
            let pointTo = this.get("pointTo", {
                x: parentW / 2,
                y: parentH / 2
            });
            let x = pointTo.x;
            let y = pointTo.y;
            let pointerOrientation = this.get("pointerOrientation");
            let background = this.get("background");
            let pointerLength = 0;
            let bgStrokeSizeY = 0;
            let bgStrokeSizeX = 0;
            if (background instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$PointedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PointedRectangle"]) {
                pointerLength = background.get("pointerLength", 0);
                bgStrokeSizeY = background.get("strokeWidth", 0) / 2;
                bgStrokeSizeX = bgStrokeSizeY;
                background.set("width", w);
                background.set("height", h);
            }
            let pointerX = 0;
            let pointerY = 0;
            let boundsW = bounds.right - bounds.left;
            let boundsH = bounds.bottom - bounds.top;
            // horizontal
            if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
                bgStrokeSizeY = 0;
                if (pointerOrientation == "horizontal") {
                    if (x > bounds.left + boundsW / 2) {
                        x -= w * (1 - cw) + pointerLength;
                        bgStrokeSizeX *= -1;
                    } else {
                        x += w * cw + pointerLength;
                    }
                } else if (pointerOrientation == "left") {
                    x += w * (1 - cw) + pointerLength;
                } else {
                    x -= w * cw + pointerLength;
                    bgStrokeSizeX *= -1;
                }
            } else {
                bgStrokeSizeX = 0;
                if (pointerOrientation == "vertical") {
                    if (y > bounds.top + h / 2 + pointerLength) {
                        y -= h * (1 - ch) + pointerLength;
                    } else {
                        y += h * ch + pointerLength;
                        bgStrokeSizeY *= -1;
                    }
                } else if (pointerOrientation == "down") {
                    y -= h * (1 - ch) + pointerLength;
                } else {
                    y += h * ch + pointerLength;
                    bgStrokeSizeY *= -1;
                }
            }
            x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw)) + bgStrokeSizeX;
            y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch)) - bgStrokeSizeY;
            pointerX = pointTo.x - x + w * cw + bgStrokeSizeX;
            pointerY = pointTo.y - y + h * ch - bgStrokeSizeY;
            this._fx = x;
            this._fy = y;
            const animationDuration = this.get("animationDuration", 0);
            if (animationDuration > 0 && this.get("visible") && this.get("opacity") > 0.1) {
                const animationEasing = this.get("animationEasing");
                this.animate({
                    key: "x",
                    to: x,
                    duration: animationDuration,
                    easing: animationEasing
                });
                this.animate({
                    key: "y",
                    to: y,
                    duration: animationDuration,
                    easing: animationEasing
                });
            } else {
                this.set("x", x);
                this.set("y", y);
            }
            if (background instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$PointedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PointedRectangle"]) {
                background.set("pointerX", pointerX);
                background.set("pointerY", pointerY);
            }
            if (w > 0) {
                this._w = w;
            }
            if (h > 0) {
                this._h = h;
            }
        }
    }
}
Object.defineProperty(Tooltip, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Tooltip"
});
Object.defineProperty(Tooltip, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Tooltip.className
    ])
}); //# sourceMappingURL=Tooltip.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/LinearGradient.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "LinearGradient": ()=>LinearGradient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/Gradient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class LinearGradient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Gradient"] {
    /**
     * @ignore
     */ getFill(target) {
        const rotation = this.get("rotation", 0);
        let bounds = this.getBounds(target);
        let l = bounds.left || 0;
        let r = bounds.right || 0;
        let t = bounds.top || 0;
        let b = bounds.bottom || 0;
        let cos = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(rotation);
        let sin = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(rotation);
        let w = cos * (r - l);
        let h = sin * (b - t);
        if (w == 0) {
            w = 1;
        }
        if (h == 0) {
            h = 1;
        }
        let longer = Math.max(w, h);
        const gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);
        const stops = this.get("stops");
        if (stops) {
            let i = 0;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(stops, (stop)=>{
                let offset = stop.offset;
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(offset)) {
                    offset = i / (stops.length - 1);
                }
                let opacity = stop.opacity;
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(opacity)) {
                    opacity = 1;
                }
                let color = stop.color;
                if (color) {
                    const lighten = stop.lighten;
                    if (lighten) {
                        color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].lighten(color, lighten);
                    }
                    const brighten = stop.brighten;
                    if (brighten) {
                        color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].brighten(color, brighten);
                    }
                    gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                }
                i++;
            });
        }
        return gradient;
    }
}
Object.defineProperty(LinearGradient, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LinearGradient"
});
Object.defineProperty(LinearGradient, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Gradient"].classNames.concat([
        LinearGradient.className
    ])
}); //# sourceMappingURL=LinearGradient.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/HeatLegend.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "HeatLegend": ()=>HeatLegend
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Template.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Tooltip$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$LinearGradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/LinearGradient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
;
class HeatLegend extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        /**
         * A [[Container]] that all labels are placed in.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "labelContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {}))
        });
        /**
         * A [[Container]] that all markers are placed in.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "markerContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {}))
        });
        /**
         * A start [[Label]].
         *
         * @default Label.new()
         */ Object.defineProperty(this, "startLabel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.labelContainer.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"].new(this._root, {
                themeTags: [
                    "start"
                ]
            }))
        });
        /**
         * An end [[Label]].
         *
         * @default Label.new()
         */ Object.defineProperty(this, "endLabel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.labelContainer.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"].new(this._root, {
                themeTags: [
                    "end"
                ]
            }))
        });
        /**
         * List of rectangle elements used for default legend markers.
         *
         * @default new ListTemplate<RoundedRectangle>
         */ Object.defineProperty(this, "markers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.markers.template.get("themeTags", []), [
                        this.get("orientation"),
                        "heatlegend",
                        "marker"
                    ])
                }, [
                    this.markers.template
                ]))
        });
    }
    _afterNew() {
        this._settings.themeTags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
            "heatlegend",
            this._settings.orientation
        ]);
        super._afterNew();
        this.set("tooltip", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Tooltip$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Tooltip"].new(this._root, {
            themeTags: [
                "heatlegend"
            ]
        }));
    }
    /**
     * @ignore
     */ makeMarker() {
        const marker = this.markers.make();
        marker.states.create("disabled", {});
        return marker;
    }
    /**
     * Moves and shows tooltip at specific value.
     *
     * Can also specify optional text to show in tooltip, as well as the color.
     *
     * @param  value  Value
     * @param  text   Text
     * @param  color  Color
     */ showValue(value, text, color) {
        const tooltip = this.getTooltip();
        if (tooltip && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(value)) {
            const startValue = this.get("startValue", 0);
            const endValue = this.get("endValue", 1);
            const c = (value - startValue) / (endValue - startValue);
            const startColor = this.get("startColor");
            const endColor = this.get("endColor");
            if (!text) {
                text = this.getNumberFormatter().format(value);
            }
            if (!color) {
                color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].interpolate(c, startColor, endColor);
            }
            tooltip.label.set("text", text);
            let p;
            if (this.get("orientation") == "vertical") {
                p = this.markerContainer.toGlobal({
                    x: 0,
                    y: this.innerHeight() * (1 - c)
                });
            } else {
                p = this.markerContainer.toGlobal({
                    x: this.innerWidth() * c,
                    y: 0
                });
            }
            let background = tooltip.get("background");
            if (background) {
                background.set("fill", color);
            }
            tooltip.set("pointTo", p);
            tooltip.show();
        }
    }
    _prepareChildren() {
        super._prepareChildren();
        const labelContainer = this.labelContainer;
        const orientation = this.get("orientation");
        const startLabel = this.startLabel;
        const endLabel = this.endLabel;
        const tooltip = this.getTooltip();
        if (this.isDirty("orientation")) {
            if (orientation == "vertical") {
                this.markerContainer.setAll({
                    layout: this._root.verticalLayout,
                    height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"]
                });
                this.set("layout", this._root.horizontalLayout);
                startLabel.setAll({
                    y: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    x: undefined,
                    centerY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    centerX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"]
                });
                endLabel.setAll({
                    y: 0,
                    x: undefined,
                    centerY: 0,
                    centerX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"]
                });
                labelContainer.setAll({
                    height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    width: undefined
                });
                if (tooltip) {
                    tooltip.set("pointerOrientation", "horizontal");
                }
            } else {
                this.markerContainer.setAll({
                    layout: this._root.horizontalLayout,
                    width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"]
                });
                this.set("layout", this._root.verticalLayout);
                startLabel.setAll({
                    x: 0,
                    y: undefined,
                    centerX: 0,
                    centerY: 0
                });
                endLabel.setAll({
                    x: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    y: undefined,
                    centerX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    centerY: 0
                });
                labelContainer.setAll({
                    width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                    height: undefined
                });
                if (tooltip) {
                    tooltip.set("pointerOrientation", "vertical");
                }
            }
        }
        if (this.isDirty("stepCount")) {
            const stepCount = this.get("stepCount", 1);
            const startColor = this.get("startColor");
            const endColor = this.get("endColor");
            this.markerContainer.children.clear();
            if (stepCount > 1) {
                for(let i = 0; i < stepCount; i++){
                    const marker = this.makeMarker();
                    if (orientation == "vertical") {
                        this.markerContainer.children.moveValue(marker, 0);
                    } else {
                        this.markerContainer.children.push(marker);
                    }
                    if (startColor && endColor) {
                        marker.set("fill", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].interpolate(i / stepCount, startColor, endColor));
                    }
                }
            } else if (stepCount == 1) {
                const marker = this.makeMarker();
                this.markerContainer.children.push(marker);
                const gradient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$LinearGradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LinearGradient"].new(this._root, {
                    stops: [
                        {
                            color: startColor
                        },
                        {
                            color: endColor
                        }
                    ]
                });
                if (orientation == "vertical") {
                    gradient.set("rotation", 90);
                    let stops = gradient.get("stops");
                    if (stops) {
                        stops.reverse();
                    }
                } else {
                    gradient.set("rotation", 0);
                }
                if (startColor && endColor) {
                    marker.set("fillGradient", gradient);
                }
            }
        }
        if (this.isDirty("startText") || this.isDirty("startValue")) {
            startLabel.set("text", this.get("startText", this.getNumberFormatter().format(this.get("startValue", 0))));
        }
        if (this.isDirty("endText") || this.isDirty("endValue")) {
            endLabel.set("text", this.get("endText", this.getNumberFormatter().format(this.get("endValue", 1))));
        }
    }
}
Object.defineProperty(HeatLegend, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "HeatLegend"
});
Object.defineProperty(HeatLegend, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        HeatLegend.className
    ])
}); //# sourceMappingURL=HeatLegend.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Series.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Series": ()=>Series
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tslib/tslib.es6.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Component.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Time$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Time.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
;
;
class Series extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Component"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_aggregatesCalculated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_selectionAggregatesCalculated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_dataProcessed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_psi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pei", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A chart series belongs to.
         */ Object.defineProperty(this, "chart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * List of bullets to use for the series.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
         */ Object.defineProperty(this, "bullets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["List"]()
        });
        /**
         * A [[Container]] series' bullets are stored in.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "bulletsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
                width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                position: "absolute"
            })
        });
    }
    _afterNew() {
        this.valueFields.push("value", "customValue");
        super._afterNew();
        this.setPrivate("customData", {});
        this._disposers.push(this.bullets.events.onAll((change)=>{
            if (change.type === "clear") {
                this._handleBullets(this.dataItems);
            } else if (change.type === "push") {
                this._handleBullets(this.dataItems);
            } else if (change.type === "setIndex") {
                this._handleBullets(this.dataItems);
            } else if (change.type === "insertIndex") {
                this._handleBullets(this.dataItems);
            } else if (change.type === "removeIndex") {
                this._handleBullets(this.dataItems);
            } else if (change.type === "moveIndex") {
                this._handleBullets(this.dataItems);
            } else {
                throw new Error("Unknown IListEvent type");
            }
        }));
    }
    _dispose() {
        this.bulletsContainer.dispose(); // can be in a different parent
        super._dispose();
    }
    startIndex() {
        let len = this.dataItems.length;
        return Math.min(this.getPrivate("startIndex", 0), len);
    }
    endIndex() {
        let len = this.dataItems.length;
        return Math.min(this.getPrivate("endIndex", len), len);
    }
    _handleBullets(dataItems) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(dataItems, (dataItem)=>{
            const bullets = dataItem.bullets;
            if (bullets) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(bullets, (bullet)=>{
                    bullet.dispose();
                });
                dataItem.bullets = undefined;
            }
        });
        this.markDirtyValues();
    }
    /**
     * Looks up and returns a data item by its ID.
     *
     * @param   id  ID
     * @return      Data item
     */ getDataItemById(id) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.find(this.dataItems, (dataItem)=>{
            return dataItem.get("id") == id;
        });
    }
    _makeBullets(dataItem) {
        if (this._shouldMakeBullet(dataItem)) {
            dataItem.bullets = [];
            this.bullets.each((bulletFunction)=>{
                this._makeBullet(dataItem, bulletFunction);
            });
        }
    }
    _shouldMakeBullet(_dataItem) {
        return true;
    }
    _makeBullet(dataItem, bulletFunction, index) {
        const bullet = bulletFunction(this._root, this, dataItem);
        if (bullet) {
            bullet._index = index;
            this._makeBulletReal(dataItem, bullet);
        }
        return bullet;
    }
    _makeBulletReal(dataItem, bullet) {
        let sprite = bullet.get("sprite");
        if (sprite) {
            sprite._setDataItem(dataItem);
            sprite.setRaw("position", "absolute");
            this.bulletsContainer.children.push(sprite);
        }
        bullet.series = this;
        dataItem.bullets.push(bullet);
    }
    /**
     * Adds bullet directly to a data item.
     *
     * Please note: method accepts [[Bullet]] instance as a paramter, not a
     * reference to a function.
     *
     * You should add Bullet instance, not a method like you do it on series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/#Adding_directly_to_data_item} for more info
     * @since 5.6.0
     *
     * @param  dataItem  Target data item
     * @param  bullet    Bullet instance
     */ addBullet(dataItem, bullet) {
        if (!dataItem.bullets) {
            dataItem.bullets = [];
        }
        if (bullet) {
            this._makeBulletReal(dataItem, bullet);
        }
    }
    _clearDirty() {
        super._clearDirty();
        this._aggregatesCalculated = false;
        this._selectionAggregatesCalculated = false;
    }
    _prepareChildren() {
        super._prepareChildren();
        let startIndex = this.startIndex();
        let endIndex = this.endIndex();
        if (this.isDirty("name")) {
            this.updateLegendValue();
        }
        if (this.isDirty("heatRules")) {
            this._valuesDirty = true;
        }
        if (this.isPrivateDirty("baseValueSeries")) {
            const baseValueSeries = this.getPrivate("baseValueSeries");
            if (baseValueSeries) {
                this._disposers.push(baseValueSeries.onPrivate("startIndex", ()=>{
                    this.markDirtyValues();
                }));
            }
        }
        const calculateAggregates = this.get("calculateAggregates");
        if (calculateAggregates) {
            if (this._valuesDirty && !this._dataProcessed) {
                if (!this._aggregatesCalculated) {
                    this._calculateAggregates(0, this.dataItems.length);
                    this._aggregatesCalculated = true;
                    if (startIndex != 0) {
                        this._psi = undefined;
                    }
                }
            }
            if ((this._psi != startIndex || this._pei != endIndex || this.isPrivateDirty("adjustedStartIndex")) && !this._selectionAggregatesCalculated) {
                if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {
                // void
                } else {
                    this._calculateAggregates(startIndex, endIndex);
                }
                this._selectionAggregatesCalculated = true;
            }
        }
        if (this.isDirty("tooltip")) {
            let tooltip = this.get("tooltip");
            if (tooltip) {
                tooltip.hide(0);
                tooltip.set("tooltipTarget", this);
            }
        }
        if (this.isDirty("fill") || this.isDirty("stroke")) {
            let markerRectangle;
            const legendDataItem = this.get("legendDataItem");
            if (legendDataItem) {
                markerRectangle = legendDataItem.get("markerRectangle");
                if (markerRectangle) {
                    if (this.isVisible()) {
                        if (this.isDirty("stroke")) {
                            let stroke = this.get("stroke");
                            markerRectangle.set("stroke", stroke);
                        }
                        if (this.isDirty("fill")) {
                            let fill = this.get("fill");
                            markerRectangle.set("fill", fill);
                        }
                    }
                }
            }
            this.updateLegendMarker(undefined);
        }
        if (this.bullets.length > 0) {
            let startIndex = this.startIndex();
            let endIndex = this.endIndex();
            if (endIndex < this.dataItems.length) {
                endIndex++;
            }
            for(let i = startIndex; i < endIndex; i++){
                let dataItem = this.dataItems[i];
                if (!dataItem.bullets) {
                    this._makeBullets(dataItem);
                }
            }
        }
    }
    /**
     * @ignore
     */ _adjustStartIndex(index) {
        return index;
    }
    _calculateAggregates(startIndex, endIndex) {
        let fields = this._valueFields;
        if (!fields) {
            throw new Error("No value fields are set for the series.");
        }
        const sum = {};
        const absSum = {};
        const count = {};
        const low = {};
        const high = {};
        const open = {};
        const close = {};
        const average = {};
        const previous = {};
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(fields, (key)=>{
            sum[key] = 0;
            absSum[key] = 0;
            count[key] = 0;
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(fields, (key)=>{
            let change = key + "Change";
            let changePercent = key + "ChangePercent";
            let changePrevious = key + "ChangePrevious";
            let changePreviousPercent = key + "ChangePreviousPercent";
            let changeSelection = key + "ChangeSelection";
            let changeSelectionPercent = key + "ChangeSelectionPercent";
            let openKey = "valueY";
            if (key == "valueX" || key == "openValueX" || key == "lowValueX" || key == "highValueX") {
                openKey = "valueX";
            }
            const baseValueSeries = this.getPrivate("baseValueSeries");
            const adjustedStartIndex = this.getPrivate("adjustedStartIndex", startIndex);
            for(let i = adjustedStartIndex; i < endIndex; i++){
                const dataItem = this.dataItems[i];
                if (dataItem) {
                    let value = dataItem.get(key);
                    if (value != null) {
                        count[key]++;
                        sum[key] += value;
                        absSum[key] += Math.abs(value);
                        average[key] = sum[key] / count[key];
                        if (low[key] > value || low[key] == null) {
                            low[key] = value;
                        }
                        if (high[key] < value || high[key] == null) {
                            high[key] = value;
                        }
                        close[key] = value;
                        if (open[key] == null) {
                            open[key] = value;
                            previous[key] = value;
                            if (baseValueSeries) {
                                open[openKey] = baseValueSeries._getBase(openKey);
                            }
                        }
                        if (startIndex === 0) {
                            dataItem.setRaw(change, value - open[openKey]);
                            dataItem.setRaw(changePercent, (value - open[openKey]) / open[openKey] * 100);
                        }
                        dataItem.setRaw(changePrevious, value - previous[openKey]);
                        dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);
                        dataItem.setRaw(changeSelection, value - open[openKey]);
                        dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);
                        previous[key] = value;
                    }
                }
            }
            if (endIndex < this.dataItems.length - 1) {
                const dataItem = this.dataItems[endIndex];
                if (dataItem) {
                    let value = dataItem.get(key);
                    dataItem.setRaw(changePrevious, value - previous[openKey]);
                    dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);
                    dataItem.setRaw(changeSelection, value - open[openKey]);
                    dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);
                }
            }
            if (startIndex > 0) {
                startIndex--;
            }
            delete previous[key];
            for(let i = startIndex; i < adjustedStartIndex; i++){
                const dataItem = this.dataItems[i];
                if (dataItem) {
                    let value = dataItem.get(key);
                    if (previous[key] == null) {
                        previous[key] = value;
                    }
                    if (value != null) {
                        dataItem.setRaw(changePrevious, value - previous[openKey]);
                        dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);
                        dataItem.setRaw(changeSelection, value - open[openKey]);
                        dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);
                        previous[key] = value;
                    }
                }
            }
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(fields, (key)=>{
            this.setPrivate(key + "AverageSelection", average[key]);
            this.setPrivate(key + "CountSelection", count[key]);
            this.setPrivate(key + "SumSelection", sum[key]);
            this.setPrivate(key + "AbsoluteSumSelection", absSum[key]);
            this.setPrivate(key + "LowSelection", low[key]);
            this.setPrivate(key + "HighSelection", high[key]);
            this.setPrivate(key + "OpenSelection", open[key]);
            this.setPrivate(key + "CloseSelection", close[key]);
        });
        if (startIndex === 0 && endIndex === this.dataItems.length) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(fields, (key)=>{
                this.setPrivate(key + "Average", average[key]);
                this.setPrivate(key + "Count", count[key]);
                this.setPrivate(key + "Sum", sum[key]);
                this.setPrivate(key + "AbsoluteSum", absSum[key]);
                this.setPrivate(key + "Low", low[key]);
                this.setPrivate(key + "High", high[key]);
                this.setPrivate(key + "Open", open[key]);
                this.setPrivate(key + "Close", close[key]);
            });
        }
    }
    _updateChildren() {
        super._updateChildren();
        this._psi = this.startIndex();
        this._pei = this.endIndex();
        if (this.isDirty("visible")) {
            this.bulletsContainer.set("visible", this.get("visible"));
        }
        // Apply heat rules
        const rules = this.get("heatRules");
        if (this._valuesDirty && rules && rules.length > 0) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(rules, (rule)=>{
                const minValue = rule.minValue || this.getPrivate(rule.dataField + "Low") || 0;
                const maxValue = rule.maxValue || this.getPrivate(rule.dataField + "High") || 0;
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(rule.target._entities, (target)=>{
                    const value = target.dataItem.get(rule.dataField);
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(value)) {
                        if (rule.neutral) {
                            target.set(rule.key, rule.neutral);
                        }
                        const states = target.states;
                        if (states) {
                            const defaultState = states.lookup("default");
                            if (defaultState && rule.neutral) {
                                defaultState.set(rule.key, rule.neutral);
                            }
                        }
                        if (!rule.customFunction) {
                            return;
                        }
                    }
                    if (rule.customFunction) {
                        rule.customFunction.call(this, target, minValue, maxValue, value);
                    } else {
                        let percent;
                        if (rule.logarithmic) {
                            percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);
                        } else {
                            percent = (value - minValue) / (maxValue - minValue);
                        }
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(value) && (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(percent) || Math.abs(percent) == Infinity)) {
                            percent = 0.5;
                        }
                        // fixes problems if all values are the same
                        let propertyValue;
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(rule.min)) {
                            propertyValue = rule.min + (rule.max - rule.min) * percent;
                        } else if (rule.min instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
                            propertyValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].interpolate(percent, rule.min, rule.max);
                        } else if (rule.min instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                            propertyValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["percentInterpolate"])(percent, rule.min, rule.max);
                        }
                        target.set(rule.key, propertyValue);
                        const states = target.states;
                        if (states) {
                            const defaultState = states.lookup("default");
                            if (defaultState) {
                                defaultState.set(rule.key, propertyValue);
                            }
                        }
                    }
                });
            });
        }
        if (this.get("visible")) {
            let count = this.dataItems.length;
            let startIndex = this.startIndex();
            let endIndex = this.endIndex();
            if (endIndex < count) {
                endIndex++;
            }
            if (startIndex > 0) {
                startIndex--;
            }
            for(let i = 0; i < startIndex; i++){
                this._hideBullets(this.dataItems[i]);
            }
            for(let i = startIndex; i < endIndex; i++){
                this._positionBullets(this.dataItems[i]);
            }
            for(let i = endIndex; i < count; i++){
                this._hideBullets(this.dataItems[i]);
            }
        }
    }
    _positionBullets(dataItem) {
        if (dataItem.bullets) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(dataItem.bullets, (bullet)=>{
                this._positionBullet(bullet);
                const sprite = bullet.get("sprite");
                if (bullet.get("dynamic")) {
                    if (sprite) {
                        sprite._markDirtyKey("fill");
                        sprite.markDirtySize();
                    }
                    if (sprite instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"]) {
                        sprite.walkChildren((child)=>{
                            child._markDirtyKey("fill");
                            child.markDirtySize();
                            if (child instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"]) {
                                child.text.markDirtyText();
                            }
                        });
                    }
                }
                if (sprite instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"] && sprite.get("populateText")) {
                    sprite.text.markDirtyText();
                }
            });
        }
    }
    _hideBullets(dataItem) {
        if (dataItem.bullets) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(dataItem.bullets, (bullet)=>{
                let sprite = bullet.get("sprite");
                if (sprite) {
                    sprite.setPrivate("visible", false);
                }
            });
        }
    }
    _positionBullet(_bullet) {}
    _placeBulletsContainer(chart) {
        chart.bulletsContainer.children.moveValue(this.bulletsContainer);
    }
    _removeBulletsContainer() {
        const bulletsContainer = this.bulletsContainer;
        if (bulletsContainer.parent) {
            bulletsContainer.parent.children.removeValue(bulletsContainer);
        }
    }
    /**
     * @ignore
     */ disposeDataItem(dataItem) {
        //super.disposeDataItem(dataItem); // does nothing
        const bullets = dataItem.bullets;
        if (bullets) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(bullets, (bullet)=>{
                bullet.dispose();
            });
        }
    }
    _getItemReaderLabel() {
        return "";
    }
    /**
     * Shows series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */ showDataItem(dataItem, duration) {
        const _super = Object.create(null, {
            showDataItem: {
                get: ()=>super.showDataItem
            }
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            const promises = [
                _super.showDataItem.call(this, dataItem, duration)
            ];
            const bullets = dataItem.bullets;
            if (bullets) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(bullets, (bullet)=>{
                    const sprite = bullet.get("sprite");
                    if (sprite) {
                        promises.push(sprite.show(duration));
                    }
                });
            }
            yield Promise.all(promises);
        });
    }
    /**
     * Hides series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */ hideDataItem(dataItem, duration) {
        const _super = Object.create(null, {
            hideDataItem: {
                get: ()=>super.hideDataItem
            }
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            const promises = [
                _super.hideDataItem.call(this, dataItem, duration)
            ];
            const bullets = dataItem.bullets;
            if (bullets) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(bullets, (bullet)=>{
                    const sprite = bullet.get("sprite");
                    if (sprite) {
                        promises.push(sprite.hide(duration));
                    }
                });
            }
            yield Promise.all(promises);
        });
    }
    _sequencedShowHide(show, duration) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
            if (this.get("sequencedInterpolation")) {
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(duration)) {
                    duration = this.get("interpolationDuration", 0);
                }
                if (duration > 0) {
                    const startIndex = this.startIndex();
                    const endIndex = this.endIndex();
                    yield Promise.all(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.map(this.dataItems, (dataItem, i)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
                            let realDuration = duration || 0;
                            if (i < startIndex - 10 || i > endIndex + 10) {
                                realDuration = 0;
                            }
                            //let delay = this.get("sequencedDelay", 0) * i + realDuration * (i - startIndex) / (endIndex - startIndex);
                            let delay = this.get("sequencedDelay", 0) + realDuration / (endIndex - startIndex);
                            yield __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Time$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sleep(delay * (i - startIndex));
                            if (show) {
                                yield this.showDataItem(dataItem, realDuration);
                            } else {
                                yield this.hideDataItem(dataItem, realDuration);
                            }
                        })));
                } else {
                    yield Promise.all(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.map(this.dataItems, (dataItem)=>{
                        if (show) {
                            return this.showDataItem(dataItem, 0);
                        } else {
                            return this.hideDataItem(dataItem, 0);
                        }
                    }));
                }
            }
        });
    }
    /**
     * @ignore
     */ updateLegendValue(dataItem) {
        if (dataItem) {
            const legendDataItem = dataItem.get("legendDataItem");
            if (legendDataItem) {
                const valueLabel = legendDataItem.get("valueLabel");
                if (valueLabel) {
                    const text = valueLabel.text;
                    let txt = "";
                    valueLabel._setDataItem(dataItem);
                    txt = this.get("legendValueText", text.get("text", ""));
                    valueLabel.set("text", txt);
                    text.markDirtyText();
                }
                const label = legendDataItem.get("label");
                if (label) {
                    const text = label.text;
                    let txt = "";
                    label._setDataItem(dataItem);
                    txt = this.get("legendLabelText", text.get("text", ""));
                    label.set("text", txt);
                    text.markDirtyText();
                }
            }
        }
    }
    /**
     * @ignore
     */ updateLegendMarker(_dataItem) {}
    _onHide() {
        super._onHide();
        const tooltip = this.getTooltip();
        if (tooltip) {
            tooltip.hide();
        }
    }
    /**
     * @ignore
     */ hoverDataItem(_dataItem) {}
    /**
     * @ignore
     */ unhoverDataItem(_dataItem) {}
    /**
     * @ignore
     */ _getBase(key) {
        const dataItem = this.dataItems[this.startIndex()];
        if (dataItem) {
            return dataItem.get(key);
        }
        return 0;
    }
}
Object.defineProperty(Series, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Series"
});
Object.defineProperty(Series, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Component"].classNames.concat([
        Series.className
    ])
}); //# sourceMappingURL=Series.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Legend.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Legend": ()=>Legend
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Series$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Series.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Template.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
class Legend extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Series$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Series"] {
    constructor(){
        super(...arguments);
        /**
         * List of all [[Container]] elements for legend items.
         *
         * @default new ListTemplate<Container>
         */ Object.defineProperty(this, "itemContainers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.itemContainers.template.get("themeTags", []), [
                        "legend",
                        "item"
                    ]),
                    themeTagsSelf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.itemContainers.template.get("themeTagsSelf", []), [
                        "itemcontainer"
                    ]),
                    background: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
                        themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.itemContainers.template.get("themeTags", []), [
                            "legend",
                            "item",
                            "background"
                        ]),
                        themeTagsSelf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.itemContainers.template.get("themeTagsSelf", []), [
                            "itemcontainer"
                        ])
                    })
                }, [
                    this.itemContainers.template
                ]))
        });
        /**
         * List of legend marker elements.
         *
         * @default new ListTemplate<Container>
         */ Object.defineProperty(this, "markers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.markers.template.get("themeTags", []), [
                        "legend",
                        "marker"
                    ])
                }, [
                    this.markers.template
                ]))
        });
        /**
         * List of legend label elements.
         *
         * @default new ListTemplate<Label>
         */ Object.defineProperty(this, "labels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.labels.template.get("themeTags", []), [
                        "legend",
                        "label"
                    ])
                }, [
                    this.labels.template
                ]))
        });
        /**
         * List of legend value label elements.
         *
         * @default new ListTemplate<label>
         */ Object.defineProperty(this, "valueLabels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.valueLabels.template.get("themeTags", []), [
                        "legend",
                        "label",
                        "value"
                    ])
                }, [
                    this.valueLabels.template
                ]))
        });
        /**
         * List of rectangle elements used for default legend markers.
         *
         * @default new ListTemplate<RoundedRectangle>
         */ Object.defineProperty(this, "markerRectangles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListTemplate"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Template$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Template"].new({}), ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"]._new(this._root, {
                    themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this.markerRectangles.template.get("themeTags", []), [
                        "legend",
                        "marker",
                        "rectangle"
                    ])
                }, [
                    this.markerRectangles.template
                ]))
        });
    }
    _afterNew() {
        this._settings.themeTags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
            "legend"
        ]);
        this.fields.push("name", "stroke", "fill");
        super._afterNew();
    }
    /**
     * @ignore
     */ makeItemContainer(dataItem) {
        const itemContainer = this.children.push(this.itemContainers.make());
        itemContainer._setDataItem(dataItem);
        this.itemContainers.push(itemContainer);
        itemContainer.states.create("disabled", {});
        return itemContainer;
    }
    /**
     * @ignore
     */ makeMarker() {
        const marker = this.markers.make();
        this.markers.push(marker);
        marker.states.create("disabled", {});
        return marker;
    }
    /**
     * @ignore
     */ makeLabel() {
        const label = this.labels.make();
        label.states.create("disabled", {});
        return label;
    }
    /**
     * @ignore
     */ makeValueLabel() {
        const valueLabel = this.valueLabels.make();
        valueLabel.states.create("disabled", {});
        return valueLabel;
    }
    /**
     * @ignore
     */ makeMarkerRectangle() {
        const markerRectangle = this.markerRectangles.make();
        markerRectangle.states.create("disabled", {});
        return markerRectangle;
    }
    processDataItem(dataItem) {
        super.processDataItem(dataItem);
        const itemContainer = this.makeItemContainer(dataItem);
        const nameField = this.get("nameField");
        const fillField = this.get("fillField");
        const strokeField = this.get("strokeField");
        if (itemContainer) {
            const clickTarget = this.get("clickTarget", "itemContainer");
            const item = dataItem.dataContext;
            if (item && item.set) {
                item.set("legendDataItem", dataItem);
            }
            itemContainer._setDataItem(dataItem);
            dataItem.set("itemContainer", itemContainer);
            const marker = this.makeMarker();
            if (marker) {
                itemContainer.children.push(marker);
                marker._setDataItem(dataItem);
                dataItem.set("marker", marker);
                const useDefaultMarker = this.get("useDefaultMarker");
                const markerRectangle = marker.children.push(this.makeMarkerRectangle());
                let fill = dataItem.get("fill");
                let stroke = dataItem.get("stroke");
                dataItem.set("markerRectangle", markerRectangle);
                if (item && item.get) {
                    fill = item.get(fillField, fill);
                    stroke = item.get(strokeField, stroke);
                }
                if (!stroke) {
                    stroke = fill;
                }
                if (!useDefaultMarker) {
                    if (item && item.createLegendMarker) {
                        item.createLegendMarker();
                    }
                } else {
                    if (item.on) {
                        item.on(fillField, ()=>{
                            markerRectangle.set("fill", item.get(fillField));
                        });
                        item.on(strokeField, ()=>{
                            markerRectangle.set("stroke", item.get(strokeField));
                        });
                    }
                }
                markerRectangle.setAll({
                    fill,
                    stroke
                });
                // this solves if template field is set on slice
                const component = item.component;
                if (component && component.updateLegendMarker) {
                    component.updateLegendMarker(item);
                }
            }
            const label = this.makeLabel();
            if (label) {
                itemContainer.children.push(label);
                label._setDataItem(dataItem);
                dataItem.set("label", label);
                label.text.on("text", ()=>{
                    itemContainer.setRaw("ariaLabel", label.text._getText() + (this.get("clickTarget") !== "none" ? "; " + this._t("Press ENTER to toggle") : ""));
                    itemContainer.markDirtyAccessibility();
                });
                if (item && item.get) {
                    dataItem.set("name", item.get(nameField));
                }
                let name = dataItem.get("name");
                if (name) {
                    label.set("text", name);
                }
            }
            const valueLabel = this.makeValueLabel();
            if (valueLabel) {
                itemContainer.children.push(valueLabel);
                valueLabel._setDataItem(dataItem);
                dataItem.set("valueLabel", valueLabel);
            }
            if (item && item.show) {
                item.on("visible", (visible)=>{
                    itemContainer.set("disabled", !visible);
                });
                if (!item.get("visible")) {
                    itemContainer.set("disabled", true);
                }
                if (clickTarget != "none") {
                    let clickContainer = itemContainer;
                    if (clickTarget == "marker") {
                        clickContainer = marker;
                    }
                    this._addClickEvents(clickContainer, item, dataItem);
                }
            }
            // Sort children
            this.children.values.sort((a, b)=>{
                const targetA = a.dataItem.dataContext;
                const targetB = b.dataItem.dataContext;
                if (targetA && targetB) {
                    const indexA = this.data.indexOf(targetA);
                    const indexB = this.data.indexOf(targetB);
                    if (indexA > indexB) {
                        return 1;
                    } else if (indexA < indexB) {
                        return -1;
                    }
                }
                return 0;
            });
            if (item && item.updateLegendValue) {
                item.updateLegendValue();
            }
        }
    }
    _addClickEvents(container, item, dataItem) {
        container.set("cursorOverStyle", "pointer");
        container.events.on("pointerover", ()=>{
            const component = item.component;
            if (component && component.hoverDataItem) {
                component.hoverDataItem(item);
            }
        });
        container.events.on("pointerout", ()=>{
            const component = item.component;
            if (component && component.hoverDataItem) {
                component.unhoverDataItem(item);
            }
        });
        container.events.on("click", ()=>{
            const labelText = dataItem.get("label").text._getText();
            if (item.show && item.isHidden && (item.isHidden() || item.get("visible") === false)) {
                item.show();
                container.set("disabled", false);
                this._root.readerAlert(this._t("%1 shown", this._root.locale, labelText));
            } else if (item.hide) {
                item.hide();
                container.set("disabled", true);
                this._root.readerAlert(this._t("%1 hidden", this._root.locale, labelText));
            }
        });
    }
    /**
     * @ignore
     */ disposeDataItem(dataItem) {
        super.disposeDataItem(dataItem);
        const dataContext = dataItem.dataContext;
        if (dataContext && dataContext.get) {
            const di = dataContext.get("legendDataItem");
            if (di == dataItem) {
                dataContext.set("legendDataItem", undefined);
            }
        }
        let itemContainer = dataItem.get("itemContainer");
        if (itemContainer) {
            this.itemContainers.removeValue(itemContainer);
            itemContainer.dispose();
        }
        let marker = dataItem.get("marker");
        if (marker) {
            this.markers.removeValue(marker);
            marker.dispose();
        }
        let markerRectangle = dataItem.get("markerRectangle");
        if (markerRectangle) {
            this.markerRectangles.removeValue(markerRectangle);
            markerRectangle.dispose();
        }
        let label = dataItem.get("label");
        if (label) {
            this.labels.removeValue(label);
            label.dispose();
        }
        let valueLabel = dataItem.get("valueLabel");
        if (valueLabel) {
            this.valueLabels.removeValue(valueLabel);
            valueLabel.dispose();
        }
    }
}
Object.defineProperty(Legend, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Legend"
});
Object.defineProperty(Legend, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Series$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Series"].classNames.concat([
        Legend.className
    ])
}); //# sourceMappingURL=Legend.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Line.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Line": ()=>Line
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Draw$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Line extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("points") || this.isDirty("segments") || this._sizeDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            const points = this.get("points");
            const segments = this.get("segments");
            if (points && points.length > 0) {
                let point = points[0];
                this._display.moveTo(point.x, point.y);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Draw$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.segmentedLine(this._display, [
                    [
                        points
                    ]
                ]);
            } else if (segments) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Draw$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.segmentedLine(this._display, segments);
            } else if (!this.get("draw")) {
                let w = this.width();
                let h = this.height();
                this._display.moveTo(0, 0);
                this._display.lineTo(w, h);
            }
        }
    }
}
Object.defineProperty(Line, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Line"
});
Object.defineProperty(Line, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Line.className
    ])
}); //# sourceMappingURL=Line.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/LinePattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "LinePattern": ()=>LinePattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class LinePattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("gap")) {
            this._clear = true;
        }
    }
    _draw() {
        super._draw();
        const w = this.get("width", 100);
        const h = this.get("height", 100);
        const gap = this.get("gap", 0);
        const strokeWidth = this.get("strokeWidth", 1);
        if (!gap) {
            this._display.moveTo(0, 0);
            this._display.lineTo(w, 0);
        } else {
            let step = gap + strokeWidth;
            let count = h / step;
            for(let i = -count; i < count * 2; i++){
                const y = Math.round(i * step - step / 2) + 0.5;
                this._display.moveTo(-w, y);
                this._display.lineTo(w * 2, y);
            }
        }
        this._display.lineStyle(strokeWidth, this.get("color"), this.get("colorOpacity"));
        let strokeDasharray = this.get("strokeDasharray");
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(strokeDasharray)) {
            if (strokeDasharray < 0.5) {
                strokeDasharray = [
                    0
                ];
            } else {
                strokeDasharray = [
                    strokeDasharray
                ];
            }
        }
        this._display.setLineDash(strokeDasharray);
        const strokeDashoffset = this.get("strokeDashoffset");
        if (strokeDashoffset) {
            this._display.setLineDashOffset(strokeDashoffset);
        }
        this._display.endStroke();
    }
}
Object.defineProperty(LinePattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LinePattern"
});
Object.defineProperty(LinePattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        LinePattern.className
    ])
}); //# sourceMappingURL=LinePattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/PathPattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "PathPattern": ()=>PathPattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class PathPattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("svgPath")) {
            this._clear = true;
        }
    }
    _draw() {
        super._draw();
        // const checkered = this.get("checkered", false);
        // const centered = this.get("centered", true);
        // const gap = this.get("gap", 0);
        // const rotation = this.get("rotation", 0);
        // let w = this.get("width", 100);
        // let h = this.get("height", 100);
        // let rectW = this.get("maxWidth", 5);
        // let rectH = this.get("maxHeight", 5);
        // let cellW = rectW + gap;
        // let cellH = rectH + gap;
        // let cols = Math.round(w / cellW);
        // let rows = Math.round(h / cellH);
        // cellW = w / cols;
        // cellH = h / rows;
        // if (rotation != 0) {
        // 	// @todo this is probably not right
        // 	this._display.x = cellW / 2 * $math.cos(rotation);
        // 	this._display.y = -cellH / 2 * $math.sin(rotation);
        // }
        // for (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
        // 	for (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
        // 		if (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {
        // 			let x = c * cellW;
        // 			let y = r * cellH;
        // 			if (centered) {
        // 				x += (cellW - rectW) / 2;
        // 				y += (cellH - rectH) / 2;
        // 			}
        // 			this._display.drawRect(x, y, rectW, rectH);
        // 		}
        // 	}
        // }
        // if (checkered) {
        // 	w = w / 2 - gap * 2;
        // 	h = h / 2 - gap * 2;
        // }
        // else {
        // 	w -= gap;
        // 	h -= gap;
        // }
        const svgPath = this.get("svgPath");
        if (svgPath != null) {
            this._display.svgPath(svgPath);
        }
        const color = this.get("color");
        const colorOpacity = this.get("colorOpacity");
        if (color || colorOpacity) {
            // this._display.lineStyle(strokeWidth, stroke, colorOpacity);
            // this._display.endStroke();
            this._display.beginFill(color, colorOpacity);
            this._display.endFill();
        }
    }
}
Object.defineProperty(PathPattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "PathPattern"
});
Object.defineProperty(PathPattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        PathPattern.className
    ])
}); //# sourceMappingURL=PathPattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Picture": ()=>Picture
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Picture extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makePicture(undefined)
        });
    }
    _changed() {
        super._changed();
        if (this.isDirty("width")) {
            const width = this.get("width");
            this._display.width = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(width) ? width : undefined;
        }
        if (this.isDirty("height")) {
            const height = this.get("height");
            this._display.height = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(height) ? height : undefined;
        }
        if (this.isDirty("shadowColor")) {
            this._display.clear();
            const shadowColor = this.get("shadowColor");
            this._display.shadowColor = shadowColor == null ? undefined : shadowColor;
        }
        if (this.isDirty("shadowBlur")) {
            this._display.clear();
            this._display.shadowBlur = this.get("shadowBlur");
        }
        if (this.isDirty("shadowOffsetX")) {
            this._display.clear();
            this._display.shadowOffsetX = this.get("shadowOffsetX");
        }
        if (this.isDirty("shadowOffsetY")) {
            this._display.clear();
            this._display.shadowOffsetY = this.get("shadowOffsetY");
        }
        if (this.isDirty("shadowOpacity")) {
            this._display.clear();
            this._display.shadowOpacity = this.get("shadowOpacity");
        }
        if (this.isDirty("src") || this.isDirty("cors")) {
            this._display.clear();
            this._load();
        }
    }
    _load() {
        const src = this.get("src");
        if (src) {
            const image = new Image();
            image.crossOrigin = this.get("cors", "anonymous");
            image.src = src;
            const events = this.events;
            image.decode().then(()=>{
                this._display.image = image;
                this._updateSize();
                if (!events.isDisposed() && events.isEnabled("loaded")) {
                    events.dispatch("loaded", {
                        type: "loaded",
                        target: this
                    });
                }
            }).catch((_error)=>{
                if (!events.isDisposed() && events.isEnabled("loaderror")) {
                    events.dispatch("loaderror", {
                        type: "loaderror",
                        target: this
                    });
                }
            });
        }
    }
    _updateSize() {
        super._updateSize();
        const image = this._display.image;
        if (image) {
            let w = this.getPrivate("width", this.get("width"));
            let h = this.getPrivate("height", this.get("height"));
            const r = image.width && image.height ? image.width / image.height : 0;
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(w) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(h)) {
                this._display.width = w;
                this._display.height = h;
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(w) && r) {
                h = w / r;
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(h) && r) {
                w = h * r;
            } else {
                w = image.width;
                h = image.height;
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(w)) {
                this._display.width = w;
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(h)) {
                this._display.height = h;
            }
            this.markDirtyBounds();
            this.markDirty();
        }
    }
}
Object.defineProperty(Picture, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Picture"
});
Object.defineProperty(Picture, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"].classNames.concat([
        Picture.className
    ])
}); //# sourceMappingURL=Picture.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Polygon.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Polygon": ()=>Polygon
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Polygon extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "morphAnimation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("coordinates")) {
            const points = [];
            const coordinates = this.get("coordinates");
            if (coordinates) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(coordinates, (coord)=>{
                    points.push({
                        x: coord[0],
                        y: coord[1]
                    });
                });
            }
            this.set("points", points);
        }
        if (this.isPrivateDirty("points")) {
            this._clear = true;
        }
        if (this.isDirty("points")) {
            this._clear = true;
            const points = this.get("points");
            const prevPoints = this._prevSettings.points;
            if (prevPoints) {
                if (points) {
                    let copy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(points);
                    let prevCopy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(prevPoints);
                    let cl = copy.length;
                    let pl = prevCopy.length;
                    if (cl > pl) {
                        let newCopy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(copy);
                        for(let i = 0; i < cl; i++){
                            let index = Math.floor(i / cl * pl);
                            newCopy[i] = {
                                x: prevCopy[index].x,
                                y: prevCopy[index].y
                            };
                        }
                        prevCopy = newCopy;
                    } else if (pl > cl) {
                        let newCopy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(prevCopy);
                        for(let i = 0; i < pl; i++){
                            let index = Math.floor(i / pl * cl);
                            newCopy[i] = {
                                x: copy[index].x,
                                y: copy[index].y
                            };
                        }
                        copy = newCopy;
                    }
                    this.setPrivateRaw("previousPoints", prevCopy);
                    this.setPrivateRaw("points", copy);
                    this.morphAnimation = this.animatePrivate({
                        key: "morphProgress",
                        from: 0,
                        to: 1,
                        duration: this.get("animationDuration", 0),
                        easing: this.get("animationEasing")
                    });
                    // solves no animated theme
                    this._root.events.once("frameended", ()=>{
                        this._markDirtyPrivateKey("morphProgress");
                    });
                }
            } else {
                this.setPrivateRaw("previousPoints", points);
                this.setPrivateRaw("points", points);
            }
            let minX = Infinity;
            let maxX = -Infinity;
            let minY = Infinity;
            let maxY = -Infinity;
            if (points) {
                for(let i = 1, len = points.length; i < len; i++){
                    const point = points[i];
                    minX = Math.min(minX, point.x);
                    maxX = Math.max(maxX, point.x);
                    minY = Math.min(minY, point.y);
                    maxY = Math.max(maxY, point.y);
                }
            }
            this.setPrivate("minX", minX);
            this.setPrivate("maxX", maxX);
            this.setPrivate("minY", minY);
            this.setPrivate("maxY", minY);
        }
        if (this.isPrivateDirty("morphProgress")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            this._draw();
        }
    }
    _draw() {
        const previousPoints = this.getPrivate("previousPoints");
        const points = this.getPrivate("points");
        const morphProgress = this.getPrivate("morphProgress", 1);
        if (points && previousPoints) {
            const first = points[0];
            const prevFirst = previousPoints[0];
            if (first) {
                this._display.moveTo(prevFirst.x + (first.x - prevFirst.x) * morphProgress, prevFirst.y + (first.y - prevFirst.y) * morphProgress);
            }
            for(let i = 1, len = points.length; i < len; i++){
                const point = points[i];
                const prevPoint = previousPoints[i];
                this._display.lineTo(prevPoint.x + (point.x - prevPoint.x) * morphProgress, prevPoint.y + (point.y - prevPoint.y) * morphProgress);
            }
            this._display.closePath();
        }
    }
    _updateSize() {
        this.markDirty();
        this._clear = true;
    }
}
Object.defineProperty(Polygon, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Polygon"
});
Object.defineProperty(Polygon, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Polygon.className
    ])
}); //# sourceMappingURL=Polygon.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/RadialGradient.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "RadialGradient": ()=>RadialGradient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/gradients/Gradient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class RadialGradient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Gradient"] {
    /**
     * @ignore
     */ getFill(target) {
        const bounds = this.getBounds(target);
        let x = 0;
        let y = 0;
        let l = bounds.left || 0;
        let r = bounds.right || 0;
        let t = bounds.top || 0;
        let b = bounds.bottom || 0;
        const width = r - l;
        const height = b - t;
        let radius = target.get("radius");
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(radius)) {
            x = 0;
            y = 0;
        } else {
            radius = Math.min(width, height) / 2;
            x = width / 2;
            y = height / 2;
        }
        let ux = this.get("x");
        let uy = this.get("y");
        if (ux != null) {
            x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(ux, width);
        }
        if (uy != null) {
            y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(uy, height);
        }
        const gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);
        const stops = this.get("stops");
        if (stops) {
            let i = 0;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(stops, (stop)=>{
                let offset = stop.offset;
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(offset)) {
                    offset = i / (stops.length - 1);
                }
                let opacity = stop.opacity;
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(opacity)) {
                    opacity = 1;
                }
                let color = stop.color;
                if (color) {
                    const lighten = stop.lighten;
                    if (lighten) {
                        color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].lighten(color, lighten);
                    }
                    const brighten = stop.brighten;
                    if (brighten) {
                        color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].brighten(color, brighten);
                    }
                    gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                }
                i++;
            });
        }
        return gradient;
    }
}
Object.defineProperty(RadialGradient, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialGradient"
});
Object.defineProperty(RadialGradient, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$gradients$2f$Gradient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Gradient"].classNames.concat([
        RadialGradient.className
    ])
}); //# sourceMappingURL=RadialGradient.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RadialText.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "RadialText": ()=>RadialText
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Text.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class RadialText extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._root._renderer.makeRadialText("", this.textStyle)
        });
    }
    _afterNew() {
        super._afterNew();
    }
    _beforeChanged() {
        super._beforeChanged();
        this._display.clear();
        if (this.isDirty("textType")) {
            this._display.textType = this.get("textType");
            this.markDirtyBounds();
        }
        if (this.isDirty("radius")) {
            this._display.radius = this.get("radius");
            this.markDirtyBounds();
        }
        if (this.isDirty("startAngle")) {
            this._display.startAngle = (this.get("startAngle", 0) + 90) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.RADIANS;
            this.markDirtyBounds();
        }
        if (this.isDirty("inside")) {
            this._display.inside = this.get("inside");
            this.markDirtyBounds();
        }
        if (this.isDirty("orientation")) {
            this._display.orientation = this.get("orientation");
            this.markDirtyBounds();
        }
        if (this.isDirty("kerning")) {
            this._display.kerning = this.get("kerning");
            this.markDirtyBounds();
        }
    }
}
Object.defineProperty(RadialText, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialText"
});
Object.defineProperty(RadialText, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].classNames.concat([
        RadialText.className
    ])
}); //# sourceMappingURL=RadialText.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RadialLabel.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// import * as $object from "../util/Object";
__turbopack_esm__({
    "RadialLabel": ()=>RadialLabel
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Label.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RadialText$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RadialText.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class RadialLabel extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_flipped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _afterNew() {
        this._textKeys.push("textType", "kerning");
        super._afterNew();
    }
    _makeText() {
        this._text = this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RadialText$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RadialText"].new(this._root, {}));
    }
    /**
     * Returns base radius in pixels.
     *
     * @return Base radius
     */ baseRadius() {
        const radiusPrivate = this.getPrivate("radius", 0);
        const innerRadiusPrivate = this.getPrivate("innerRadius", 0);
        const baseRadius = this.get("baseRadius", 0);
        return innerRadiusPrivate + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);
    }
    /**
     * Returns radius adjustment in pixels.
     *
     * @return Radius
     */ radius() {
        const inside = this.get("inside", false);
        return this.baseRadius() + this.get("radius", 0) * (inside ? -1 : 1);
    }
    _updateChildren() {
        super._updateChildren();
        if (this.isDirty("baseRadius") || this.isPrivateDirty("radius") || this.isPrivateDirty("innerRadius") || this.isDirty("labelAngle") || this.isDirty("radius") || this.isDirty("inside") || this.isDirty("orientation") || this.isDirty("textType")) {
            const textType = this.get("textType", "adjusted");
            const inside = this.get("inside", false);
            const orientation = this.get("orientation");
            let labelAngle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.normalizeAngle(this.get("labelAngle", 0));
            this._text.set("startAngle", this.get("labelAngle", 0));
            this._text.set("inside", inside);
            const sin = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(labelAngle);
            const cos = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(labelAngle);
            let baseRadius = this.baseRadius();
            let radius = this.radius();
            this._display.angle = 0;
            if (textType == "circular") {
                this.setAll({
                    paddingTop: 0,
                    paddingBottom: 0,
                    paddingLeft: 0,
                    paddingRight: 0
                });
                this.setRaw("x", undefined);
                this.setRaw("y", undefined);
                // Circular labels are handled and positioned differently
                this._text.set("orientation", orientation);
                this._text.set("radius", radius);
            } else {
                if (baseRadius == 0) {
                    labelAngle = 0;
                    radius = 0;
                }
                // Positioning of radial/regular labels are teh same
                let x = radius * cos;
                let y = radius * sin;
                if (textType == "radial") {
                    this.setRaw("x", x);
                    this.setRaw("y", y);
                    if (labelAngle < 90 || labelAngle > 270 || orientation != "auto") {
                        this._display.angle = labelAngle; // + 90;
                        this._flipped = false;
                    } else {
                        this._display.angle = labelAngle + 180;
                        this._flipped = true;
                    }
                    this._dirty.rotation = false;
                } else if (textType == "adjusted") {
                    this.setRaw("centerX", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]);
                    this.setRaw("centerY", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]);
                    this.setRaw("x", x);
                    this.setRaw("y", y);
                } else if (textType == "regular") {
                    this.setRaw("x", x);
                    this.setRaw("y", y);
                }
            }
            this.markDirtyPosition();
            this.markDirtyBounds();
        }
    }
    _updatePosition() {
        const textType = this.get("textType", "regular");
        const inside = this.get("inside", false);
        let dx = 0;
        let dy = 0;
        let labelAngle = this.get("labelAngle", 0);
        let bounds = this.localBounds();
        let w = bounds.right - bounds.left;
        let h = bounds.bottom - bounds.top;
        if (textType == "radial") {
            if (this._flipped) {
                let centerX = this.get("centerX");
                if (centerX instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                    w = w * (1 - centerX.value * 2);
                }
                dx = w * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(labelAngle);
                dy = w * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(labelAngle);
            }
        } else if (!inside && textType == "adjusted") {
            dx = w / 2 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(labelAngle);
            dy = h / 2 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(labelAngle);
        }
        this.setRaw("dx", dx);
        this.setRaw("dy", dy);
        super._updatePosition();
    }
    /**
     * @ignore
     */ get text() {
        return this._text;
    }
}
Object.defineProperty(RadialLabel, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialLabel"
});
Object.defineProperty(RadialLabel, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Label$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Label"].classNames.concat([
        RadialLabel.className
    ])
}); //# sourceMappingURL=RadialLabel.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/RectanglePattern.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "RectanglePattern": ()=>RectanglePattern
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class RectanglePattern extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("gap")) {
            this._clear = true;
        }
    }
    _draw() {
        super._draw();
        const checkered = this.get("checkered", false);
        const centered = this.get("centered", true);
        const gap = this.get("gap", 0);
        const rotation = this.get("rotation", 0);
        let w = this.get("width", 100);
        let h = this.get("height", 100);
        let rectW = this.get("maxWidth", 5);
        let rectH = this.get("maxHeight", 5);
        const display = this._display;
        let cellW = rectW + gap;
        let cellH = rectH + gap;
        let cols = Math.round(w / cellW);
        let rows = Math.round(h / cellH);
        cellW = w / cols;
        cellH = h / rows;
        if (rotation != 0) {
            // @todo this is probably not right
            display.x = cellW / 2 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(rotation);
            display.y = -cellH / 2 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(rotation);
        }
        for(let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++){
            for(let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++){
                if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {
                    let x = c * cellW;
                    let y = r * cellH;
                    if (centered) {
                        x += (cellW - rectW) / 2;
                        y += (cellH - rectH) / 2;
                    }
                    display.drawRect(x, y, rectW, rectH);
                }
            }
        }
        if (checkered) {
            w = w / 2 - gap * 2;
            h = h / 2 - gap * 2;
        } else {
            w -= gap;
            h -= gap;
        }
        const color = this.get("color");
        const colorOpacity = this.get("colorOpacity");
        if (color || colorOpacity) {
            // this._display.lineStyle(strokeWidth, stroke, colorOpacity);
            // this._display.endStroke();
            display.beginFill(color, colorOpacity);
            display.endFill();
        }
    }
}
Object.defineProperty(RectanglePattern, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RectanglePattern"
});
Object.defineProperty(RectanglePattern, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$patterns$2f$Pattern$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Pattern"].classNames.concat([
        RectanglePattern.className
    ])
}); //# sourceMappingURL=RectanglePattern.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Scrollbar": ()=>Scrollbar
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Button.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
class Scrollbar extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        /**
         * A thumb elment - a draggable square between the grips, used for panning
         * the selection.
         */ Object.defineProperty(this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._makeThumb()
        });
        /**
         * Start grip button.
         */ Object.defineProperty(this, "startGrip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._makeButton()
        });
        /**
         * End grip button.
         */ Object.defineProperty(this, "endGrip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._makeButton()
        });
        Object.defineProperty(this, "_thumbBusy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_startDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_endDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_thumbDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_gripDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _addOrientationClass() {
        this._settings.themeTags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
            "scrollbar",
            this._settings.orientation
        ]);
        if (!this._settings.background) {
            this._settings.background = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
                themeTags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.mergeTags(this._settings.themeTags, [
                    "main",
                    "background"
                ])
            });
        }
    }
    _makeButton() {
        return this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"].new(this._root, {
            themeTags: [
                "resize",
                "button",
                this.get("orientation")
            ],
            icon: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].new(this._root, {
                themeTags: [
                    "icon"
                ]
            })
        }));
    }
    _makeThumb() {
        return this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
            themeTags: [
                "thumb",
                this.get("orientation")
            ]
        }));
    }
    _handleAnimation(animation) {
        if (animation) {
            this._disposers.push(animation.events.on("stopped", ()=>{
                this.setPrivateRaw("isBusy", false);
                this._thumbBusy = false;
            }));
        }
    }
    _afterNew() {
        this._addOrientationClass();
        super._afterNew();
        const startGrip = this.startGrip;
        const endGrip = this.endGrip;
        const thumb = this.thumb;
        const background = this.get("background");
        if (background) {
            this._disposers.push(background.events.on("click", (event)=>{
                this.setPrivateRaw("isBusy", true);
                const point = this._display.toLocal(event.point);
                const w = this.width();
                const h = this.height();
                const orientation = this.get("orientation");
                let newMiddle;
                if (orientation == "vertical") {
                    newMiddle = (point.y - thumb.height() / 2) / h;
                } else {
                    newMiddle = (point.x - thumb.width() / 2) / w;
                }
                let newCoordinate;
                let key;
                if (orientation == "vertical") {
                    newCoordinate = newMiddle * h;
                    key = "y";
                } else {
                    newCoordinate = newMiddle * w;
                    key = "x";
                }
                const duration = this.get("animationDuration", 0);
                if (duration > 0) {
                    this._thumbBusy = true;
                    this._handleAnimation(this.thumb.animate({
                        key: key,
                        to: newCoordinate,
                        duration: duration,
                        easing: this.get("animationEasing")
                    }));
                } else {
                    this.thumb.set(key, newCoordinate);
                    this._root.events.once("frameended", ()=>{
                        this.setPrivateRaw("isBusy", false);
                    });
                }
            }));
        }
        this._disposers.push(thumb.events.on("dblclick", (event)=>{
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isLocalEvent(event.originalEvent, this)) {
                return;
            }
            const duration = this.get("animationDuration", 0);
            const easing = this.get("animationEasing");
            this.animate({
                key: "start",
                to: 0,
                duration: duration,
                easing: easing
            });
            this.animate({
                key: "end",
                to: 1,
                duration: duration,
                easing: easing
            });
        }));
        this._disposers.push(startGrip.events.on("pointerdown", ()=>{
            this.setPrivateRaw("isBusy", true);
            this._startDown = true;
            this._gripDown = "start";
        }));
        this._disposers.push(endGrip.events.on("pointerdown", ()=>{
            this.setPrivateRaw("isBusy", true);
            this._endDown = true;
            this._gripDown = "end";
        }));
        this._disposers.push(thumb.events.on("pointerdown", ()=>{
            this.setPrivateRaw("isBusy", true);
            this._thumbDown = true;
            this._gripDown = undefined;
        }));
        this._disposers.push(startGrip.events.on("globalpointerup", ()=>{
            if (this._startDown) {
                this.setPrivateRaw("isBusy", false);
                this._released();
            }
            this._startDown = false;
        }));
        this._disposers.push(endGrip.events.on("globalpointerup", ()=>{
            if (this._endDown) {
                this.setPrivateRaw("isBusy", false);
                this._released();
            }
            this._endDown = false;
        }));
        this._disposers.push(thumb.events.on("globalpointerup", ()=>{
            if (this._thumbDown) {
                this.setPrivateRaw("isBusy", false);
                this._released();
            }
            this._thumbDown = false;
        }));
        this._disposers.push(startGrip.on("x", ()=>{
            this._updateThumb();
        }));
        this._disposers.push(endGrip.on("x", ()=>{
            this._updateThumb();
        }));
        this._disposers.push(startGrip.on("y", ()=>{
            this._updateThumb();
        }));
        this._disposers.push(endGrip.on("y", ()=>{
            this._updateThumb();
        }));
        this._disposers.push(thumb.events.on("positionchanged", ()=>{
            this._updateGripsByThumb();
        }));
        if (this.get("orientation") == "vertical") {
            startGrip.set("x", 0);
            endGrip.set("x", 0);
            this._disposers.push(thumb.adapters.add("y", (value)=>{
                return Math.max(Math.min(Number(value), this.height() - thumb.height()), 0);
            }));
            this._disposers.push(thumb.adapters.add("x", (_value)=>{
                return this.width() / 2;
            }));
            this._disposers.push(startGrip.adapters.add("x", (_value)=>{
                return this.width() / 2;
            }));
            this._disposers.push(endGrip.adapters.add("x", (_value)=>{
                return this.width() / 2;
            }));
            this._disposers.push(startGrip.adapters.add("y", (value)=>{
                return Math.max(Math.min(Number(value), this.height()), 0);
            }));
            this._disposers.push(endGrip.adapters.add("y", (value)=>{
                return Math.max(Math.min(Number(value), this.height()), 0);
            }));
        } else {
            startGrip.set("y", 0);
            endGrip.set("y", 0);
            this._disposers.push(thumb.adapters.add("x", (value)=>{
                return Math.max(Math.min(Number(value), this.width() - thumb.width()), 0);
            }));
            this._disposers.push(thumb.adapters.add("y", (_value)=>{
                return this.height() / 2;
            }));
            this._disposers.push(startGrip.adapters.add("y", (_value)=>{
                return this.height() / 2;
            }));
            this._disposers.push(endGrip.adapters.add("y", (_value)=>{
                return this.height() / 2;
            }));
            this._disposers.push(startGrip.adapters.add("x", (value)=>{
                return Math.max(Math.min(Number(value), this.width()), 0);
            }));
            this._disposers.push(endGrip.adapters.add("x", (value)=>{
                return Math.max(Math.min(Number(value), this.width()), 0);
            }));
        }
    }
    _updateChildren() {
        super._updateChildren();
        if (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) {
            this.updateGrips();
        }
    }
    _changed() {
        super._changed();
        if (this.isDirty("start") || this.isDirty("end")) {
            const eventType = "rangechanged";
            if (this.events.isEnabled(eventType)) {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this,
                    start: this.get("start", 0),
                    end: this.get("end", 1),
                    grip: this._gripDown
                });
            }
        }
    }
    _released() {
        const eventType = "released";
        if (this.events.isEnabled(eventType)) {
            this.events.dispatch(eventType, {
                type: eventType,
                target: this
            });
        }
    }
    /**
     * @ignore
     */ updateGrips() {
        const startGrip = this.startGrip;
        const endGrip = this.endGrip;
        const orientation = this.get("orientation");
        const height = this.height();
        const width = this.width();
        if (orientation == "vertical") {
            startGrip.set("y", height * this.get("start", 0));
            endGrip.set("y", height * this.get("end", 1));
        } else {
            startGrip.set("x", width * this.get("start", 0));
            endGrip.set("x", width * this.get("end", 1));
        }
        const valueFunction = this.getPrivate("positionTextFunction");
        const from = Math.round(this.get("start", 0) * 100);
        const to = Math.round(this.get("end", 0) * 100);
        let fromValue;
        let toValue;
        if (valueFunction) {
            fromValue = valueFunction.call(this, this.get("start", 0));
            toValue = valueFunction.call(this, this.get("end", 0));
        } else {
            fromValue = from + "%";
            toValue = to + "%";
        }
        startGrip.set("ariaLabel", this._t("From %1", undefined, fromValue));
        startGrip.set("ariaValueNow", "" + from);
        startGrip.set("ariaValueText", from + "%");
        startGrip.set("ariaValueMin", "0");
        startGrip.set("ariaValueMax", "100");
        endGrip.set("ariaLabel", this._t("To %1", undefined, toValue));
        endGrip.set("ariaValueNow", "" + to);
        endGrip.set("ariaValueText", to + "%");
        endGrip.set("ariaValueMin", "0");
        endGrip.set("ariaValueMax", "100");
    }
    _updateThumb() {
        const thumb = this.thumb;
        const startGrip = this.startGrip;
        const endGrip = this.endGrip;
        const height = this.height();
        const width = this.width();
        let x0 = startGrip.x();
        let x1 = endGrip.x();
        let y0 = startGrip.y();
        let y1 = endGrip.y();
        let start = 0;
        let end = 1;
        if (this.get("orientation") == "vertical") {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(y0) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(y1)) {
                if (!this._thumbBusy && !thumb.isDragging()) {
                    thumb.set("height", y1 - y0);
                    thumb.set("y", y0);
                }
                start = y0 / height;
                end = y1 / height;
            }
        } else {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(x0) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(x1)) {
                if (!this._thumbBusy && !thumb.isDragging()) {
                    thumb.set("width", x1 - x0);
                    thumb.set("x", x0);
                }
                start = x0 / width;
                end = x1 / width;
            }
        }
        if (this.getPrivate("isBusy") && (this.get("start") != start || this.get("end") != end)) {
            this.set("start", start);
            this.set("end", end);
        }
        const valueFunction = this.getPrivate("positionTextFunction");
        const from = Math.round(this.get("start", 0) * 100);
        const to = Math.round(this.get("end", 0) * 100);
        let fromValue;
        let toValue;
        if (valueFunction) {
            fromValue = valueFunction.call(this, this.get("start", 0));
            toValue = valueFunction.call(this, this.get("end", 0));
        } else {
            fromValue = from + "%";
            toValue = to + "%";
        }
        thumb.set("ariaLabel", this._t("From %1 to %2", undefined, fromValue, toValue));
        thumb.set("ariaValueNow", "" + from);
        thumb.set("ariaValueText", from + "%");
    }
    _updateGripsByThumb() {
        const thumb = this.thumb;
        const startGrip = this.startGrip;
        const endGrip = this.endGrip;
        if (this.get("orientation") == "vertical") {
            const thumbSize = thumb.height();
            startGrip.set("y", thumb.y());
            endGrip.set("y", thumb.y() + thumbSize);
        } else {
            const thumbSize = thumb.width();
            startGrip.set("x", thumb.x());
            endGrip.set("x", thumb.x() + thumbSize);
        }
    }
}
Object.defineProperty(Scrollbar, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Scrollbar"
});
Object.defineProperty(Scrollbar, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        Scrollbar.className
    ])
}); //# sourceMappingURL=Scrollbar.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "SerialChart": ()=>SerialChart
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Chart$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class SerialChart extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Chart$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Chart"] {
    constructor(){
        super(...arguments);
        /**
         * A [[Container]] where chart will store all series.
         *
         * @default Container.new()
         */ Object.defineProperty(this, "seriesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
                width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                isMeasured: false
            })
        });
        /**
         * A list of chart's series.
         */ Object.defineProperty(this, "series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ListAutoDispose"]()
        });
    }
    _afterNew() {
        super._afterNew();
        this._disposers.push(this.series);
        const children = this.seriesContainer.children;
        this._disposers.push(this.series.events.onAll((change)=>{
            if (change.type === "clear") {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(change.oldValues, (series)=>{
                    this._removeSeries(series);
                });
                const colors = this.get("colors");
                if (colors) {
                    colors.reset();
                }
            } else if (change.type === "push") {
                children.moveValue(change.newValue);
                this._processSeries(change.newValue);
            } else if (change.type === "setIndex") {
                children.setIndex(change.index, change.newValue);
                this._processSeries(change.newValue);
            } else if (change.type === "insertIndex") {
                children.insertIndex(change.index, change.newValue);
                this._processSeries(change.newValue);
            } else if (change.type === "removeIndex") {
                this._removeSeries(change.oldValue);
            } else if (change.type === "moveIndex") {
                children.moveValue(change.value, change.newIndex);
                this._processSeries(change.value);
            } else {
                throw new Error("Unknown IListEvent type");
            }
        }));
    }
    _processSeries(series) {
        series.chart = this;
        series._placeBulletsContainer(this);
    }
    _removeSeries(series) {
        if (!series.isDisposed()) {
            this.seriesContainer.children.removeValue(series);
            series._removeBulletsContainer();
        }
    }
}
Object.defineProperty(SerialChart, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "SerialChart"
});
Object.defineProperty(SerialChart, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Chart$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Chart"].classNames.concat([
        SerialChart.className
    ])
}); //# sourceMappingURL=SerialChart.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Slice.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Slice": ()=>Slice
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$shape$2f$src$2f$arc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__arc$3e$__ = __turbopack_import__("[project]/node_modules/d3-shape/src/arc.js [app-ssr] (ecmascript) <export default as arc>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class Slice extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    constructor(){
        super(...arguments);
        /**
         * @ignore
         */ Object.defineProperty(this, "ix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * @ignore
         */ Object.defineProperty(this, "iy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$shape$2f$src$2f$arc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__arc$3e$__["arc"])()
        });
    }
    _getTooltipPoint() {
        let tooltipX = this.get("tooltipX");
        let tooltipY = this.get("tooltipY");
        let x = 0;
        let y = 0;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(tooltipX)) {
            x = tooltipX;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(tooltipY)) {
            y = tooltipY;
        }
        let radius = this.get("radius", 0);
        let innerRadius = this.get("innerRadius", 0);
        let dRadius = this.get("dRadius", 0);
        let dInnerRadius = this.get("dInnerRadius", 0);
        radius += dRadius;
        innerRadius += dInnerRadius;
        if (innerRadius < 0) {
            innerRadius = radius + innerRadius;
        }
        if (tooltipX instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
            x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);
        }
        if (tooltipY instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
            y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);
        }
        if (this.get("arc") >= 360 && innerRadius == 0) {
            x = 0;
            y = 0;
        }
        return {
            x,
            y
        };
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("radius") || this.isDirty("arc") || this.isDirty("innerRadius") || this.isDirty("startAngle") || this.isDirty("dRadius") || this.isDirty("dInnerRadius") || this.isDirty("cornerRadius") || this.isDirty("shiftRadius")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            let startAngle = this.get("startAngle", 0);
            let arc = this.get("arc", 0);
            const generator = this._generator;
            if (arc < 0) {
                startAngle = startAngle + arc;
                arc = arc * -1;
            }
            if (arc > 0.1) {
                generator.cornerRadius(this.get("cornerRadius", 0));
            }
            generator.context(this._display);
            let radius = this.get("radius", 0);
            let innerRadius = this.get("innerRadius", 0);
            let dRadius = this.get("dRadius", 0);
            let dInnerRadius = this.get("dInnerRadius", 0);
            radius += dRadius;
            innerRadius += dInnerRadius;
            if (innerRadius < 0) {
                innerRadius = radius + innerRadius;
            }
            generator({
                innerRadius: innerRadius,
                outerRadius: radius,
                startAngle: (startAngle + 90) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.RADIANS,
                endAngle: (startAngle + arc + 90) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.RADIANS
            });
            let middleAngle = startAngle + arc / 2;
            this.ix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(middleAngle);
            this.iy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(middleAngle);
            const shiftRadius = this.get("shiftRadius", 0);
            this.setRaw("dx", this.ix * shiftRadius);
            this.setRaw("dy", this.iy * shiftRadius);
            this.markDirtyPosition();
        }
    }
}
Object.defineProperty(Slice, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Slice"
});
Object.defineProperty(Slice, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Slice.className
    ])
}); //# sourceMappingURL=Slice.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Slider.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Slider": ()=>Slider
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Scrollbar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Slider extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Scrollbar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Scrollbar"] {
    _afterNew() {
        this._addOrientationClass();
        super._afterNew();
        this.endGrip.setPrivate("visible", false);
        this.thumb.setPrivate("visible", false);
    }
    /**
     * @ignore
     */ updateGrips() {
        super.updateGrips();
        const startGrip = this.startGrip;
        this.endGrip.setAll({
            x: startGrip.x(),
            y: startGrip.y()
        });
        this.setRaw("end", this.get("start"));
    }
}
Object.defineProperty(Slider, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Slider"
});
Object.defineProperty(Slider, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Scrollbar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Scrollbar"].classNames.concat([
        Slider.className
    ])
}); //# sourceMappingURL=Slider.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/SpriteResizer.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "SpriteResizer": ()=>SpriteResizer
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
class SpriteResizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "rectangle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"].new(this._root, {
                themeTags: [
                    "rectangle"
                ],
                fillOpacity: 0,
                fill: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["color"])(0xFFFFFF)
            }))
        });
        Object.defineProperty(this, "gripL", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._createGrip("left")
        });
        Object.defineProperty(this, "gripR", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._createGrip("right")
        });
        Object.defineProperty(this, "gripT", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._createGrip("top")
        });
        Object.defineProperty(this, "gripB", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._createGrip("bottom")
        });
        Object.defineProperty(this, "_is", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "_ix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_iw", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_positionDP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_isHover", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _afterNew() {
        super._afterNew();
        this.addTag("resizer");
        this.set("visible", false);
        this.gripL.events.on("dragged", (e)=>{
            this._resize(e.target, -1);
        });
        this.gripR.events.on("dragged", (e)=>{
            this._resize(e.target, 1);
        });
        this.gripL.events.on("dragstart", (e)=>{
            this._resizeStart(e.target);
        });
        this.gripR.events.on("dragstart", (e)=>{
            this._resizeStart(e.target);
        });
        this.gripT.events.on("dragged", (e)=>{
            this._rotate(e, 90);
        });
        this.gripB.events.on("dragged", (e)=>{
            this._rotate(e, -90);
        });
        this.gripT.events.on("dragstart", (e)=>{
            this._resizeStart(e.target);
        });
        this.gripB.events.on("dragstart", (e)=>{
            this._resizeStart(e.target);
        });
    }
    _resizeStart(grip) {
        const sprite = this.get("sprite");
        if (sprite) {
            this._is = sprite.get("scale", 1);
            this._ix = grip.x();
            this._iw = this.width() / 2;
        }
    }
    _resize(grip, c) {
        const sprite = this.get("sprite");
        const spriteTemplate = this.get("spriteTemplate");
        if (sprite) {
            const scale = Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw));
            if (spriteTemplate) {
                spriteTemplate.set("scale", scale);
            } else {
                sprite.set("scale", scale);
            }
            sprite.states.lookup("default").set("scale", scale);
            this._updatePositions();
        }
    }
    _rotate(e, delta) {
        const sprite = this.get("sprite");
        const spriteTemplate = this.get("spriteTemplate");
        if (sprite) {
            const parent = this.parent;
            if (parent) {
                const rotationStep = this.get("rotationStep", 10);
                let angle = Math.round((__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getAngle({
                    x: this.x(),
                    y: this.y()
                }, parent.toLocal(e.point)) + delta) / rotationStep) * rotationStep;
                if (spriteTemplate) {
                    spriteTemplate.set("rotation", angle);
                } else {
                    sprite.set("rotation", angle);
                }
                sprite.states.lookup("default").set("rotation", angle);
                this._updatePositions();
            }
        }
    }
    _createGrip(themeTag) {
        const container = this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
            themeTags: [
                "grip",
                themeTag
            ],
            setStateOnChildren: true,
            draggable: true
        }));
        container.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
            themeTags: [
                "outline"
            ],
            centerX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"],
            centerY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]
        }));
        container.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$RoundedRectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RoundedRectangle"].new(this._root, {
            centerX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"],
            centerY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]
        }));
        return container;
    }
    _updateChildren() {
        super._updateChildren();
        if (this.isDirty("sprite")) {
            const sprite = this.get("sprite");
            if (sprite) {
                this.show(0);
                this.setPrivate("visible", true);
                this._updatePositions();
                const parent = sprite.parent;
                if (parent) {
                    parent.children.moveValue(this, 0);
                }
                this._positionDP = sprite.events.on("positionchanged", ()=>{
                    this._updatePositions();
                });
                this._positionDP = sprite.events.on("boundschanged", ()=>{
                    this._updatePositions();
                });
            } else {
                this.hide(0);
                this.setPrivate("visible", false);
                if (this._positionDP) {
                    this._positionDP.dispose();
                }
            }
        }
        if (this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation")) {
            this._updatePositions();
        }
    }
    _updatePositions() {
        const sprite = this.get("sprite");
        if (sprite) {
            let bounds = sprite.localBounds();
            let scale = sprite.get("scale", 1);
            let d = 20;
            let w = (bounds.right - bounds.left) * scale + d;
            let h = (bounds.bottom - bounds.top) * scale + d;
            let a = sprite.get("rotation", 0);
            const rectangle = this.rectangle;
            let cx = sprite.get("centerX", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]);
            let cy = sprite.get("centerY", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p50"]);
            let cxr = 0;
            if (cx instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                cxr = cx.value;
            }
            let cyr = 0;
            if (cy instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
                cyr = cy.value;
            }
            rectangle.setAll({
                centerX: cx,
                centerY: cy,
                width: w,
                height: h
            });
            this.setAll({
                x: sprite.x() + d * (cxr - 0.5) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(a) - d * (cyr - 0.5) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(a),
                y: sprite.y() + d * (cyr - 0.5) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cos(a) + d * (cxr - 0.5) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.sin(a),
                width: w,
                height: h,
                rotation: a
            });
            this.gripT.setAll({
                x: (0.5 - cxr) * w,
                y: -cyr * h
            });
            this.gripB.setAll({
                x: (0.5 - cxr) * w,
                y: (1 - cyr) * h
            });
            this.gripL.setAll({
                x: -cxr * w,
                y: (0.5 - cyr) * h
            });
            this.gripR.setAll({
                x: (1 - cxr) * w,
                y: (0.5 - cyr) * h
            });
            this.rectangle.setAll({
                width: w,
                height: h
            });
        }
    }
}
Object.defineProperty(SpriteResizer, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "SpriteResizer"
});
Object.defineProperty(SpriteResizer, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        SpriteResizer.className
    ])
}); //# sourceMappingURL=SpriteResizer.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Star.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Star": ()=>Star
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Star extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("radius") || this.isDirty("innerRadius") || this.isDirty("spikes")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear) {
            const display = this._display;
            const r = this.get("radius", 0);
            const ir = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.relativeToValue(this.get("innerRadius", 0), r);
            const spikes = this.get("spikes", 0);
            const step = Math.PI / spikes;
            let angle = Math.PI / 2 * 3;
            display.moveTo(0, -r);
            for(let i = 0; i < spikes; i++){
                display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);
                angle += step;
                display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);
                angle += step;
            }
            display.lineTo(0, -r);
            display.closePath();
        }
    }
}
Object.defineProperty(Star, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Star"
});
Object.defineProperty(Star, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Star.className
    ])
}); //# sourceMappingURL=Star.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Tick": ()=>Tick
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Line$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Line.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Tick extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Line$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Line"] {
}
Object.defineProperty(Tick, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Tick"
});
Object.defineProperty(Tick, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Line$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Line"].classNames.concat([
        Tick.className
    ])
}); //# sourceMappingURL=Tick.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Triangle.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Triangle": ()=>Triangle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class Triangle extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"] {
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
            this._clear = true;
        }
    }
    _changed() {
        super._changed();
        if (this._clear && !this.get("draw")) {
            this._draw();
        }
    }
    _draw() {
        const w = this.width();
        const h = this.height();
        const display = this._display;
        display.moveTo(-w / 2, h / 2);
        display.lineTo(0, -h / 2);
        display.lineTo(w / 2, h / 2);
        display.lineTo(-w / 2, h / 2);
        display.closePath();
    }
    _updateSize() {
        this.markDirty();
        this._clear = true;
    }
}
Object.defineProperty(Triangle, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Triangle"
});
Object.defineProperty(Triangle, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].classNames.concat([
        Triangle.className
    ])
}); //# sourceMappingURL=Triangle.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/ZoomTools.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "ZoomTools": ()=>ZoomTools
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Button.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
class ZoomTools extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        /**
         * A [[Button]] for home.
         */ Object.defineProperty(this, "homeButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"].new(this._root, {
                width: 35,
                height: 35,
                themeTags: [
                    "home"
                ]
            }))
        });
        /**
         * A [[Button]] for zoom in.
         */ Object.defineProperty(this, "plusButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"].new(this._root, {
                width: 35,
                height: 35,
                themeTags: [
                    "plus"
                ]
            }))
        });
        /**
         * A [[Button]] for zoom out.
         */ Object.defineProperty(this, "minusButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Button$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"].new(this._root, {
                width: 35,
                height: 35,
                themeTags: [
                    "minus"
                ]
            }))
        });
        Object.defineProperty(this, "_disposer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _afterNew() {
        super._afterNew();
        this.set("position", "absolute");
        this.set("layout", this._root.verticalLayout);
        this.addTag("zoomtools");
        this.plusButton.setAll({
            icon: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].new(this._root, {
                themeTags: [
                    "icon"
                ]
            }),
            layout: undefined
        });
        this.minusButton.setAll({
            icon: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].new(this._root, {
                themeTags: [
                    "icon"
                ]
            }),
            layout: undefined
        });
        this.homeButton.setAll({
            icon: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Graphics$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Graphics"].new(this._root, {
                themeTags: [
                    "icon"
                ]
            }),
            layout: undefined
        });
    }
    _prepareChildren() {
        super._prepareChildren();
        if (this.isDirty("target")) {
            const target = this.get("target");
            const previous = this._prevSettings.target;
            if (target) {
                this._disposer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
                    this.plusButton.events.on("click", ()=>{
                        target.zoomIn();
                    }),
                    this.minusButton.events.on("click", ()=>{
                        target.zoomOut();
                    }),
                    this.homeButton.events.on("click", ()=>{
                        target.goHome();
                    })
                ]);
            }
            if (previous && this._disposer) {
                this._disposer.dispose();
            }
        }
    }
}
Object.defineProperty(ZoomTools, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "ZoomTools"
});
Object.defineProperty(ZoomTools, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        ZoomTools.className
    ])
}); //# sourceMappingURL=ZoomTools.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/render/ZoomableContainer.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "ZoomableContainer": ()=>ZoomableContainer
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Container.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
class ZoomableContainer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_za", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_txa", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tya", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_movePoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_downScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "_downX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_downY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_pinchDP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * All elements must be added to `contents.children` instead of `children` of
         * [[ZoomableContainer]].
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Zoomable_container} for more info
         */ Object.defineProperty(this, "contents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.children.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].new(this._root, {
                width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p100"],
                x: 0,
                y: 0,
                draggable: true,
                background: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Rectangle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Rectangle"].new(this._root, {
                    fill: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["color"])(0xffffff),
                    fillOpacity: 0
                })
            }))
        });
        Object.defineProperty(this, "_wheelDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _afterNew() {
        super._afterNew();
        const events = this.contents.events;
        this._disposers.push(events.on("pointerdown", (event)=>{
            this._handleThisDown(event);
        }));
        this._disposers.push(events.on("globalpointerup", (event)=>{
            this._handleThisUp(event);
        }));
        this._disposers.push(events.on("globalpointermove", (event)=>{
            this._handleThisMove(event);
        }));
    }
    _prepareChildren() {
        super._prepareChildren();
        if (this.isDirty("wheelable")) {
            this._handleSetWheel();
        }
        this.contents._display.cancelTouch = this.get("pinchZoom", false);
    }
    _handleSetWheel() {
        // const contents = this.contents;
        if (this.get("wheelable")) {
            if (this._wheelDp) {
                this._wheelDp.dispose();
            }
            this._wheelDp = this.events.on("wheel", (event)=>{
                const wheelEvent = event.originalEvent;
                // Ignore wheel event if it is happening on a non-ZoomableContainer element, e.g. if
                // some page element is over the ZoomableContainer.
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isLocalEvent(wheelEvent, this)) {
                    wheelEvent.preventDefault();
                } else {
                    return;
                }
                const point = this.toLocal(event.point);
                this._handleWheelZoom(wheelEvent.deltaY, point);
            });
            this._disposers.push(this._wheelDp);
        } else {
            if (this._wheelDp) {
                this._wheelDp.dispose();
            }
        }
    }
    _handleWheelZoom(delta, point) {
        let step = this.get("zoomStep", 2);
        let zoomLevel = this.contents.get("scale", 1);
        let newZoomLevel = zoomLevel;
        if (delta > 0) {
            newZoomLevel = zoomLevel / step;
        } else if (delta < 0) {
            newZoomLevel = zoomLevel * step;
        }
        if (newZoomLevel != zoomLevel) {
            this.zoomToPoint(point, newZoomLevel);
        }
    }
    /**
     * Zooms to specific X/Y point.
     *
     * @param   point  Center point
     * @param   level  Zoom level
     * @return         Zoom Animation object
     */ zoomToPoint(point, level) {
        if (level) {
            level = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fitToRange(level, this.get("minZoomLevel", 1), this.get("maxZoomLevel", 32));
        }
        const zoomLevel = this.contents.get("scale", 1);
        let x = point.x;
        let y = point.y;
        let cx = x;
        let cy = y;
        const contents = this.contents;
        let tx = contents.x();
        let ty = contents.y();
        let xx = cx - (x - tx) / zoomLevel * level;
        let yy = cy - (y - ty) / zoomLevel * level;
        this._animateTo(xx, yy, level);
        return this._za;
    }
    /**
     * Zooms the container contents in by `zoomStep`.
     *
     * @return Zoom Animation object
     */ zoomIn() {
        return this.zoomToPoint({
            x: this.width() / 2,
            y: this.height() / 2
        }, this.contents.get("scale", 1) * this.get("zoomStep", 2));
    }
    /**
     * Zooms the container contents out by `zoomStep`.
     *
     * @return Zoom Animation object
     */ zoomOut() {
        return this.zoomToPoint({
            x: this.width() / 2,
            y: this.height() / 2
        }, this.contents.get("scale", 1) / this.get("zoomStep", 2));
    }
    /**
     * Fully zooms out the container contents.
     *
     * @return Zoom Animation object
     */ goHome() {
        return this._animateTo(0, 0, 1);
    }
    _animateTo(x, y, scale) {
        const duration = this.get("animationDuration", 0);
        const easing = this.get("animationEasing");
        const contents = this.contents;
        this._txa = contents.animate({
            key: "x",
            to: x,
            duration: duration,
            easing: easing
        });
        this._tya = contents.animate({
            key: "y",
            to: y,
            duration: duration,
            easing: easing
        });
        this._za = contents.animate({
            key: "scale",
            to: scale,
            duration: duration,
            easing: easing
        });
    }
    _handleThisUp(_event) {
        this._downPoints = {};
    }
    _handleThisDown(event) {
        const contents = this.contents;
        this._downScale = contents.get("scale", 1);
        const downPoints = contents._downPoints;
        let count = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(downPoints).length;
        if (count == 1) {
            // workaround to solve a problem when events are added to some children of chart container (rotation stops working)
            let downPoint = downPoints[1];
            if (!downPoint) {
                downPoint = downPoints[0];
            }
            if (downPoint && downPoint.x == event.point.x && downPoint.y == event.point.y) {
                count = 0;
            }
        }
        if (count > 0) {
            this._downX = contents.x();
            this._downY = contents.y();
            const downId = contents._getDownPointId();
            if (downId) {
                let movePoint = this._movePoints[downId];
                if (movePoint) {
                    contents._downPoints[downId] = movePoint;
                }
            }
        }
    }
    _handleThisMove(event) {
        const originalEvent = event.originalEvent;
        const pointerId = originalEvent.pointerId;
        if (this.get("pinchZoom")) {
            if (pointerId) {
                this._movePoints[pointerId] = event.point;
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this.contents._downPoints).length > 1) {
                    this._handlePinch();
                    return;
                }
            }
        }
    }
    _handlePinch() {
        let i = 0;
        let downPoints = [];
        let movePoints = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.contents._downPoints, (k, point)=>{
            downPoints[i] = point;
            let movePoint = this._movePoints[k];
            if (movePoint) {
                movePoints[i] = movePoint;
            }
            i++;
        });
        if (downPoints.length > 1 && movePoints.length > 1) {
            this.contents._isDragging = false;
            let downPoint0 = downPoints[0];
            let downPoint1 = downPoints[1];
            let movePoint0 = movePoints[0];
            let movePoint1 = movePoints[1];
            if (downPoint0 && downPoint1 && movePoint0 && movePoint1) {
                downPoint0 = this.toLocal(downPoint0);
                downPoint1 = this.toLocal(downPoint1);
                movePoint0 = this.toLocal(movePoint0);
                movePoint1 = this.toLocal(movePoint1);
                let initialDistance = Math.hypot(downPoint1.x - downPoint0.x, downPoint1.y - downPoint0.y);
                let currentDistance = Math.hypot(movePoint1.x - movePoint0.x, movePoint1.y - movePoint0.y);
                let level = currentDistance / initialDistance * this._downScale;
                let moveCenter = {
                    x: movePoint0.x + (movePoint1.x - movePoint0.x) / 2,
                    y: movePoint0.y + (movePoint1.y - movePoint0.y) / 2
                };
                let downCenter = {
                    x: downPoint0.x + (downPoint1.x - downPoint0.x) / 2,
                    y: downPoint0.y + (downPoint1.y - downPoint0.y) / 2
                };
                let tx = this._downX || 0;
                let ty = this._downY || 0;
                let zoomLevel = this._downScale;
                let xx = moveCenter.x - (-tx + downCenter.x) / zoomLevel * level;
                let yy = moveCenter.y - (-ty + downCenter.y) / zoomLevel * level;
                this.contents.setAll({
                    x: xx,
                    y: yy,
                    scale: level
                });
            }
        }
    }
}
Object.defineProperty(ZoomableContainer, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "ZoomableContainer"
});
Object.defineProperty(ZoomableContainer, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Container$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Container"].classNames.concat([
        ZoomableContainer.className
    ])
}); //# sourceMappingURL=ZoomableContainer.js.map

})()),

};

//# sourceMappingURL=node_modules_%40amcharts_amcharts5__internal_core_render_ca9080._.js.map