{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapSeries.ts"],"sourcesContent":["import type { MapChart } from \"./MapChart\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\nimport type { DataItem } from \"../../core/render/Component\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate, ISeriesEvents } from \"../../core/render/Series\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n\nexport interface IMapSeriesDataItem extends ISeriesDataItem {\n\tgeometry?: GeoJSON.Geometry;\n\tgeometryType?: GeoJSON.GeoJsonGeometryTypes;\n\tvalue?: number;\n}\n\nexport interface IMapSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * All map series will determine the actual bounds shown in the [[MapChart]].\n\t *\n\t * If we need a series to be ignored while calculating the bounds, we can set\n\t * this to `false`.\n\t *\n\t * Especially useful for background series.\n\t *\n\t * @default true\n\t * @since 5.2.36\n\t */\n\taffectsBounds?: boolean;\n\n\t/**\n\t * Map data in GeoJSON format.\n\t */\n\tgeoJSON?: GeoJSON.GeoJSON;\n\n\t/**\n\t * An array of map object ids from geodata to include in the map.\n\t *\n\t * If set, only those objects listed in `include` will be shown.\n\t */\n\tinclude?: Array<string>;\n\n\t/**\n\t * An array of map object ids from geodata to omit when showing the map.\n\t */\n\texclude?: Array<string>;\n\n\t/**\n\t * A field in series `data` that will hold map object's numeric value.\n\t *\n\t * It can be used in a number of places, e.g. tooltips, heat rules, etc.\n\t */\n\tvalueField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryTypeField?: string;\n\n\t/**\n\t * Names of geodata items, such as countries, to replace by from loaded\n\t * geodata.\n\t *\n\t * Can be used to override built-in English names for countries.\n\t *\n\t * ```TypeScript\n\t * import am5geodata_lang_ES from '@amcharts5-geodata/lang/es';\n\t * // ...\n\t * map.geodataNames = am5geodata_lang_ES;\n\t * ```\n\t * ```JavaScript\n\t * map.geodataNames = am5geodata_lang_ES;\n\t * ```\n\t *\n\t * @since 5.1.13\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-translations/} for more info\n\t */\n\tgeodataNames?: { [index: string]: string };\n\n}\n\nexport interface IMapSeriesPrivate extends ISeriesPrivate {\n}\n\nexport interface IMapSeriesEvents extends ISeriesEvents {\n\n\t/**\n\t * Invoked when geodata is finished loading and processed.\n\t */\n\tgeodataprocessed: {};\n\n}\n\n/**\n * Base class for map series.\n */\nexport abstract class MapSeries extends Series {\n\tpublic static className: string = \"MapSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([MapSeries.className]);\n\n\tdeclare public chart: MapChart | undefined;\n\tdeclare public _settings: IMapSeriesSettings;\n\tdeclare public _privateSettings: IMapSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapSeriesDataItem;\n\tdeclare public _events: IMapSeriesEvents;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [];\n\n\tpublic _geometries: Array<GeoJSON.Geometry> = [];\n\tprotected _geoJSONparsed: boolean = false;\n\n\tprotected _excluded: Array<DataItem<IMapSeriesDataItem>> = [];\n\tprotected _notIncluded: Array<DataItem<IMapSeriesDataItem>> = [];\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"geometry\", \"geometryType\");\n\t\tthis._setRawDefault(\"geometryField\", \"geometry\");\n\t\tthis._setRawDefault(\"geometryTypeField\", \"geometryType\");\n\t\tthis._setRawDefault(\"idField\", \"id\");\n\n\t\tthis.on(\"geoJSON\", (geoJSON) => {\n\t\t\tlet previous = this._prevSettings.geoJSON;\n\t\t\tif (previous && previous != geoJSON) {\n\t\t\t\tthis.data.clear();\n\t\t\t}\n\t\t})\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _handleDirties() {\n\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\tlet previous = this._prevSettings.geoJSON;\n\n\t\tif (previous && previous != geoJSON) {\n\t\t\tthis._prevSettings.geoJSON = undefined;\n\t\t\tthis._geoJSONparsed = false;\n\t\t}\n\n\t\tif (!this._geoJSONparsed) {\n\t\t\tthis._parseGeoJSON();\n\t\t\tthis._geoJSONparsed = true;\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this._valuesDirty) {\n\t\t\tthis._handleDirties();\n\t\t}\n\n\t\tif (this.get(\"geoJSON\") && (this.isDirty(\"geoJSON\") || this.isDirty(\"include\") || this.isDirty(\"exclude\"))) {\n\n\t\t\tthis._handleDirties();\n\n\t\t\tconst chart = this.chart;\n\n\t\t\tconst exclude = this.get(\"exclude\");\n\n\t\t\tif (exclude) {\n\t\t\t\tif (chart) {\n\t\t\t\t\tchart._centerLocation = null;\n\t\t\t\t}\n\t\t\t\t$array.each(exclude, (id) => {\n\t\t\t\t\tconst dataItem = this.getDataItemById(id);\n\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\tthis._excludeDataItem(dataItem)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (!exclude || exclude.length == 0) {\n\t\t\t\t$array.each(this._excluded, (dataItem) => {\n\t\t\t\t\tthis._unexcludeDataItem(dataItem)\n\t\t\t\t})\n\t\t\t\tthis._excluded = [];\n\t\t\t}\n\n\t\t\tconst include = this.get(\"include\");\n\t\t\tif (include) {\n\t\t\t\tif (chart) {\n\t\t\t\t\tchart._centerLocation = null;\n\t\t\t\t}\n\t\t\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\t\t\tconst id = dataItem.get(\"id\");\n\t\t\t\t\tif (id && include.indexOf(id) == -1) {\n\t\t\t\t\t\tthis._notIncludeDataItem(dataItem);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._unNotIncludeDataItem(dataItem);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (!include) {\n\t\t\t\t$array.each(this._notIncluded, (dataItem) => {\n\t\t\t\t\tthis._unNotIncludeDataItem(dataItem);\n\t\t\t\t})\n\t\t\t\tthis._notIncluded = [];\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprotected _excludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tthis._removeGeometry(dataItem.get(\"geometry\"));\n\t\t$array.move(this._excluded, dataItem);\n\t}\n\n\tprotected _unexcludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tthis._addGeometry(dataItem.get(\"geometry\"), this);\n\t}\n\n\tprotected _notIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tthis._removeGeometry(dataItem.get(\"geometry\"));\n\t\t$array.move(this._notIncluded, dataItem);\n\t}\n\n\tprotected _unNotIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tthis._addGeometry(dataItem.get(\"geometry\"), this);\n\t}\n\n\tprotected checkInclude(id: string, includes: string[] | undefined, excludes?: string[] | undefined): boolean {\n\t\tif (includes) {\n\t\t\tif (includes.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (includes.indexOf(id) == -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (excludes && excludes.length > 0) {\n\t\t\tif (excludes.indexOf(id) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _parseGeoJSON() {\n\n\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\tif (geoJSON) {\n\n\t\t\tlet features!: any[];\n\n\t\t\tif (geoJSON.type == \"FeatureCollection\") {\n\t\t\t\tfeatures = geoJSON.features;\n\t\t\t}\n\t\t\telse if (geoJSON.type == \"Feature\") {\n\t\t\t\tfeatures = [geoJSON];\n\t\t\t}\n\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n\t\t\t\tfeatures = [{ geometry: geoJSON }];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"nothing found in geoJSON\");\n\t\t\t}\n\n\t\t\tconst geodataNames = this.get(\"geodataNames\");\n\t\t\tif (features) {\n\n\t\t\t\tconst idField = this.get(\"idField\", \"id\");\n\n\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\n\t\t\t\t\tlet feature: any = features[i];\n\t\t\t\t\tlet geometry: any = feature.geometry;\n\n\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\tlet type = geometry.type;\n\t\t\t\t\t\tlet id: string = feature[idField];\n\n\t\t\t\t\t\tif (geodataNames && geodataNames[id]) {\n\t\t\t\t\t\t\tfeature.properties.name = geodataNames[id];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._types.indexOf(type) != -1) {\n\t\t\t\t\t\t\t//if (!this.checkInclude(id, this.get(\"include\"), this.get(\"exclude\"))) {\n\t\t\t\t\t\t\t//\tcontinue;\n\t\t\t\t\t\t\t//}\n\n\t\t\t\t\t\t\tlet dataItem: any;\n\n\t\t\t\t\t\t\tif (id != null) {\n\t\t\t\t\t\t\t\t// find data object in user-provided data\n\t\t\t\t\t\t\t\tdataItem = $array.find(this.dataItems, (value: any) => {\n\t\t\t\t\t\t\t\t\treturn value.get(\"id\") == id;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet dataObject: any;\n\n\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\tdataObject = dataItem.dataContext;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// create one if not found\n\t\t\t\t\t\t\tif (!dataItem) {\n\t\t\t\t\t\t\t\tdataObject = { geometry: geometry, geometryType: type, madeFromGeoData: true };\n\t\t\t\t\t\t\t\tdataObject[idField] = id;\n\t\t\t\t\t\t\t\tthis.data.push(dataObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// in case found\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\n\t\t\t\t\t\t\t\tif (!dataObject.geometry) {\n\t\t\t\t\t\t\t\t\tdataObject.geometry = geometry;\n\t\t\t\t\t\t\t\t\tdataObject.geometryType = type;\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometry\", geometry);\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometryType\", type);\n\t\t\t\t\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// copy properties data to datacontext\n\t\t\t\t\t\t\t$object.softCopyProperties(feature.properties, dataObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst type = \"geodataprocessed\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract markDirtyProjection(): void\n\n\tpublic _placeBulletsContainer(_chart: MapChart) {\n\t\tthis.children.moveValue(this.bulletsContainer);\n\t}\n\n\tpublic _removeBulletsContainer() {\n\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic projection(): GeoProjection | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.get(\"projection\");\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic geoPath(): GeoPath | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.getPrivate(\"geoPath\");\n\t\t}\n\t}\n\n\tprotected _addGeometry(geometry: any, series: MapSeries) {\n\t\tif (geometry && series.get(\"affectsBounds\", true)) {\n\t\t\tthis._geometries.push(geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _removeGeometry(geometry: any) {\n\t\tif (geometry) {\n\t\t\t$array.remove(this._geometries, geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\tprotected _onDataClear() {\n\t\tsuper._onDataClear();\n\t\tthis._geoJSONparsed = false;\n\t\tthis._markDirtyKey(\"exclude\");\n\t}\t\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapPointSeries.ts"],"sourcesContent":["import type { IMapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\nimport type { IMapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { MapLine } from \"./MapLine\";\nimport type { MapPolygon } from \"./MapPolygon\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Animation } from \"../../core/util/Entity\";\nimport type { IDisposer } from \"../../core/util/Disposer\";\n\nexport interface IMapPointSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPointSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * GeoJSON geometry of the point.\n\t */\n\tgeometry?: GeoJSON.Point | GeoJSON.MultiPoint;\n\n\t/**\n\t * Longitude.\n\t */\n\tlongitude?: number;\n\n\t/**\n\t * Latitude.\n\t */\n\tlatitude?: number;\n\n\t/**\n\t * Relative position (0-1) on the [[MapLine]] to place point on.\n\t */\n\tpositionOnLine?: number;\n\n\t/**\n\t * Automatically rotate the point bullet to face the direction of the line\n\t * it is attached to.\n\t */\n\tautoRotate?: boolean;\n\n\t/**\n\t * The angle will be added to the automatically-calculated angle.\n\t *\n\t * Can be used to reverse the direction.\n\t */\n\tautoRotateAngle?: number;\n\n\t/**\n\t * A data item from a [[MapLineSeries]] the point is attached to.\n\t */\n\tlineDataItem?: DataItem<IMapLineSeriesDataItem>;\n\n\t/**\n\t * An ID of a [[MapLine]] the point is attached to.\n\t */\n\tlineId?: string;\n\n\t/**\n\t * A data item from a [[MapPolygonSeries]] to use for positioning of the\n\t * point.\n\t */\n\tpolygonDataItem?: DataItem<IMapPolygonSeriesDataItem>;\n\n\t/**\n\t * An ID of the [[MapPolygon]] to use for centering the point.\n\t */\n\tpolygonId?: string;\n\n\t/**\n\t * If set to `true`, the point will be drawn according to its `x` and `y`\n\t * coordinates, not its latitude and longitude.\n\t * \n\t * Fixed points will not move together with map, and can not be used to\n\t * connect points on a `MapLineSeries`.\n\t * \n\t * @default false\n\t * @since 5.2.34\n\t */\n\tfixed?: boolean;\n\n\t/**\n\t * Point (in pixels) of a data item\n\t */\n\tpoint?: IPoint;\n\n\t/**\n\t * @ignore\n\t */\n\tclipped?: boolean;\n}\n\nexport interface IMapPointSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * A field in data that holds an ID of the related polygon.\n\t *\n\t * If set, the point will be positioned in the visual center of the target\n\t * polygon.\n\t */\n\tpolygonIdField?: string;\n\n\t/**\n\t * If set to `true` will hide all points that are in the visible range of\n\t * the map.\n\t */\n\tclipFront?: boolean;\n\n\t/**\n\t * If set to `true` will hide all points that are in the invisible range of\n\t * the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t *\n\t * @default true\n\t */\n\tclipBack?: boolean;\n\n\t/**\n\t * A field in data that holds point's longitude.\n\t */\n\tlatitudeField?: string;\n\n\t/**\n\t * A field in data that holds point's longitude.\n\t */\n\tlongitudeField?: string;\n\n\t/**\n\t * A field in data that holds information if this point is fixed or moves with a map.\n\t */\n\tfixedField?: string;\n\n\t/**\n\t * If set to `true`, bullets will resize when zooming the [[MapChart]].\n\t * \n\t * @since 5.2.8\n\t * @default false\n\t */\n\tautoScale?: boolean\n\n};\n\n/**\n * Creates a map series for displaying markers on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/} for more info\n * @important\n */\nexport class MapPointSeries extends MapSeries {\n\n\tpublic static className: string = \"MapPointSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPointSeries.className]);\n\n\tdeclare public _settings: IMapPointSeriesSettings;\n\tdeclare public _privateSettings: IMapPointSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPointSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Point\", \"MultiPoint\"];\n\n\tprotected _lineChangedDp?: IDisposer;\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"polygonId\", \"lineId\", \"longitude\", \"latitude\", \"fixed\");\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\n\t\tif (dataItem) {\n\t\t\tthis._positionBullets(dataItem);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\t\tlet geometry = dataItem.get(\"geometry\");\n\t\tif (!geometry) {\n\t\t\tgeometry = { type: \"Point\", coordinates: [dataItem.get(\"longitude\", 0), dataItem.get(\"latitude\", 0)] };\n\t\t\tdataItem.set(\"geometry\", geometry);\n\t\t}\n\t\telse {\n\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates && coordinates[0]) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0][0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[0][1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._addGeometry(geometry, this);\n\t}\n\n\tprotected _makeBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tdataItem.bullets = [];\n\n\t\tthis.bullets.each((bulletFunction) => {\n\t\t\tconst geometry = dataItem.get(\"geometry\");\n\n\t\t\tif (geometry) {\n\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\tthis._setBulletParent(this._makeBullet(dataItem, bulletFunction));\n\t\t\t\t}\n\t\t\t\telse if (geometry.type = \"MultiPoint\") {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\t$array.each(geometry.coordinates, () => {\n\t\t\t\t\t\tthis._setBulletParent(this._makeBullet(dataItem, bulletFunction, i));\n\t\t\t\t\t\ti++;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tprotected _setBulletParent(bullet?: Bullet) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tconst chart = this.chart;\n\t\t\tif (sprite && chart) {\n\t\t\t\tconst dataItem = sprite.dataItem as DataItem<IMapPointSeriesDataItem>;\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tif (dataItem.get(\"fixed\")) {\n\t\t\t\t\t\tif (sprite.parent != chart.bulletsContainer) {\n\t\t\t\t\t\t\tchart.bulletsContainer.children.moveValue(sprite);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (sprite.parent != this.bulletsContainer) {\n\t\t\t\t\t\t\tthis.bulletsContainer.children.moveValue(sprite);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tif (dataItem && dataItem.get(\"fixed\")) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst latitude = dataItem.get(\"latitude\");\n\t\t\tconst longitude = dataItem.get(\"longitude\");\n\t\t\tconst lineDataItem = dataItem.get(\"lineDataItem\");\n\t\t\tconst fixed = dataItem.get(\"fixed\");\n\t\t\tconst chart = this.chart;\n\t\t\tlet line: MapLine | undefined;\n\t\t\tif (lineDataItem) {\n\t\t\t\tline = lineDataItem.get(\"mapLine\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst lineId = dataItem.get(\"lineId\");\n\n\t\t\t\tif (lineId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapLineSeries>(\"MapLineSeries\")) {\n\t\t\t\t\t\t\tlet lineDI = series.getDataItemById(lineId);\n\t\t\t\t\t\t\tif (lineDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"lineDataItem\", lineDI);\n\t\t\t\t\t\t\t\tline = lineDI.get(\"mapLine\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._lineChangedDp) {\n\t\t\t\tthis._lineChangedDp.dispose();\n\t\t\t}\n\n\t\t\tif (line) {\n\t\t\t\tthis._lineChangedDp = line.events.on(\"linechanged\", () => {\n\t\t\t\t\tthis._positionBullets(dataItem);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tconst polygonDataItem = dataItem.get(\"polygonDataItem\");\n\t\t\tlet polygon: MapPolygon | undefined;\n\t\t\tif (polygonDataItem) {\n\t\t\t\tpolygon = polygonDataItem.get(\"mapPolygon\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst polygonId = dataItem.get(\"polygonId\");\n\n\t\t\t\tif (polygonId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapPolygonSeries>(\"MapPolygonSeries\")) {\n\t\t\t\t\t\t\tlet polygonDI = series.getDataItemById(polygonId);\n\t\t\t\t\t\t\tif (polygonDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"polygonDataItem\", polygonDI);\n\t\t\t\t\t\t\t\tpolygon = polygonDI.get(\"mapPolygon\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst positionOnLine = dataItem.get(\"positionOnLine\");\n\t\t\tlet coordinates: [number, number] | undefined;\n\n\t\t\tlet angle: number | undefined;\n\n\t\t\tif (polygon) {\n\t\t\t\tlet geoPoint = polygon.visualCentroid();\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\t\t\t\tdataItem.setRaw(\"longitude\", geoPoint.longitude);\n\t\t\t\tdataItem.setRaw(\"latitude\", geoPoint.latitude);\n\t\t\t}\n\t\t\telse if (line && $type.isNumber(positionOnLine)) {\n\t\t\t\tlet geoPoint = line.positionToGeoPoint(positionOnLine);\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\n\t\t\t\tif (dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\")) && chart) {\n\t\t\t\t\tconst geoPoint0 = line.positionToGeoPoint(positionOnLine - 0.002);\n\t\t\t\t\tconst geoPoint1 = line.positionToGeoPoint(positionOnLine + 0.002);\n\n\t\t\t\t\tconst point0 = chart.convert(geoPoint0);\n\t\t\t\t\tconst point1 = chart.convert(geoPoint1);\n\n\t\t\t\t\t//dataItem.set(\"autoRotateAngle\", $math.getAngle(point0, point1));\n\t\t\t\t\tangle = $math.getAngle(point0, point1);\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"longitude\", geoPoint.longitude);\n\t\t\t\tdataItem.setRaw(\"latitude\", geoPoint.latitude);\n\t\t\t}\n\t\t\telse if ($type.isNumber(longitude) && $type.isNumber(latitude)) {\n\t\t\t\tcoordinates = [longitude, latitude];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst geometry = dataItem.get(\"geometry\")!;\n\t\t\t\tif (geometry) {\n\t\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\t\tthis._positionBulletReal(bullet, geometry, geometry.coordinates as [number, number], angle);\n\t\t\t\t\t}\n\t\t\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\t\t\tlet index = bullet._index || 0;\n\t\t\t\t\t\tcoordinates = geometry.coordinates[index] as [number, number];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!fixed && coordinates) {\n\t\t\t\tthis._positionBulletReal(bullet, { type: \"Point\", coordinates: coordinates }, coordinates, angle);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _positionBulletReal(bullet: Bullet, geometry: GeoJSON.Geometry, coordinates: [number, number], angle?: number) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst projection = chart.get(\"projection\")!;\n\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\tconst dataItem: DataItem<IMapPointSeriesDataItem> = sprite.dataItem as DataItem<IMapPointSeriesDataItem>;\n\n\t\t\tconst xy = projection(coordinates as any);\n\n\t\t\tif (xy) {\n\t\t\t\tconst point = { x: xy[0], y: xy[1] };\n\t\t\t\tsprite.setAll(point);\n\t\t\t\tdataItem.setRaw(\"point\", point);\n\t\t\t}\n\n\t\t\tlet visible = true;\n\t\t\tif (geoPath(geometry)) {\n\t\t\t\tif (this.get(\"clipFront\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.get(\"clipBack\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsprite.setPrivate(\"visible\", visible);\n\t\t\tdataItem.set(\"clipped\", !visible);\n\n\t\t\tif (dataItem && angle != null && dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\"))) {\n\t\t\t\tsprite.set(\"rotation\", angle + dataItem.get(\"autoRotateAngle\", bullet.get(\"autoRotateAngle\", 0)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers the map to specific series' data item and zooms to the level\n\t * specified in the parameters.\n\t *\n\t * @param  dataItem   Map point\n\t * @param  zoomLevel  Zoom level\n\t * @param  rotate If it's true, the map will rotate so that this point would be in the center. Mostly usefull with geoOrthographic projection.\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPointSeriesDataItem>, zoomLevel: number, rotate?: boolean): Animation<any> | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst longitude = dataItem.get(\"longitude\", 0);\n\t\t\tconst latitude = dataItem.get(\"latitude\", 0);\n\t\t\tif (rotate) {\n\t\t\t\treturn chart.zoomToGeoPoint({ longitude: longitude, latitude: latitude }, zoomLevel, true, undefined, -longitude, -latitude);\n\t\t\t}\n\t\t\treturn chart.zoomToGeoPoint({ longitude: longitude, latitude: latitude }, zoomLevel, true);\n\t\t}\n\t}\n\n\n\t/**\n\t * Zooms the map in so that all points in the array are visible.\n\t *\n\t * @param   dataItems  An array of data items of points to zoom to\n\t * @param   rotate     Rotate the map so it is centered on the selected items\n\t * @return             Animation\n\t * @since 5.5.6\n\t */\n\tpublic zoomToDataItems(dataItems: Array<DataItem<IMapPointSeriesDataItem>>, rotate?: boolean): Animation<any> | undefined {\n\n\t\tlet left: number | null = null;\n\t\tlet right: number | null = null;\n\t\tlet top: number | null = null;\n\t\tlet bottom: number | null = null;\n\n\t\t$array.each(dataItems, (dataItem) => {\n\t\t\tconst longitude = dataItem.get(\"longitude\", 0);\n\t\t\tconst latitude = dataItem.get(\"latitude\", 0);\n\n\t\t\tif (left == null || left > longitude) {\n\t\t\t\tleft = longitude;\n\t\t\t}\n\t\t\tif (right == null || right < longitude) {\n\t\t\t\tright = longitude;\n\t\t\t}\n\t\t\tif (top == null || top < latitude) {\n\t\t\t\ttop = latitude;\n\t\t\t}\n\t\t\tif (bottom == null || bottom > latitude) {\n\t\t\t\tbottom = latitude;\n\t\t\t}\n\t\t})\n\t\tif (left != null && right != null && top != null && bottom != null) {\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tif (rotate) {\n\t\t\t\t\treturn chart.zoomToGeoBounds({ left, right, top, bottom }, undefined, -(left + (right - left) / 2), -(top + (top - bottom) / 2));\n\t\t\t\t}\n\t\t\t\treturn chart.zoomToGeoBounds({ left, right, top, bottom });\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.each((series) => {\n\t\t\t\tif (series.isType<MapLineSeries>(\"MapLineSeries\")) {\n\t\t\t\t\t$array.each(series.dataItems, (di) => {\n\t\t\t\t\t\tconst pointsToConnect = di.get(\"pointsToConnect\");\n\t\t\t\t\t\tif (pointsToConnect) {\n\t\t\t\t\t\t\t$array.each(pointsToConnect, (point) => {\n\t\t\t\t\t\t\t\tif (point == dataItem) {\n\t\t\t\t\t\t\t\t\t$array.remove(pointsToConnect, point);\n\t\t\t\t\t\t\t\t\tseries.markDirtyValues(di);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tsuper.disposeDataItem(dataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _excludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._excludeDataItem(dataItem);\n\t\tconst bullets = dataItem.bullets;\n\t\tif (bullets) {\n\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unexcludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unexcludeDataItem(dataItem);\n\t\tconst bullets = dataItem.bullets;\n\t\tif (bullets) {\n\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", true);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _notIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._notIncludeDataItem(dataItem);\n\t\tconst bullets = dataItem.bullets;\n\t\tif (bullets) {\n\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unNotIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unNotIncludeDataItem(dataItem);\n\t\tconst bullets = dataItem.bullets;\n\t\tif (bullets) {\n\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tsprite.setPrivate(\"visible\", true);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AA8JM,MAAO,uBAAuB,mLAAA,CAAA,YAAS;IAA7C,aAAA;;QASC,OAAA,cAAA,CAAA,IAAA,EAAA,UAAA;;;;mBAAwD;gBAAC;gBAAS;aAAa;;QAE/E,OAAA,cAAA,CAAA,IAAA,EAAA,kBAAA;;;;;;IAmZD;IAjZW,YAAS;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,UAAU,aAAa,YAAY;QACjE,KAAK,CAAC;IACP;IAEA;;QAGO,sBAAmB;QACzB,IAAI,CAAC,SAAS;IACf;IAEA;;;;QAKO,gBAAgB,QAA6C,EAAA;QACnE,KAAK,CAAC;QAEN,IAAI,UAAU;YACb,IAAI,CAAC,gBAAgB,CAAC;;IAExB;IAEU,gBAAgB,QAA6C,EAAA;QACtE,KAAK,CAAC,gBAAgB;QACtB,IAAI,WAAW,SAAS,GAAG,CAAC;QAC5B,IAAI,CAAC,UAAU;YACd,WAAW;gBAAE,MAAM;gBAAS,aAAa;oBAAC,SAAS,GAAG,CAAC,aAAa;oBAAI,SAAS,GAAG,CAAC,YAAY;iBAAG;YAAA;YACpG,SAAS,GAAG,CAAC,YAAY;eAErB;YACJ,IAAI,SAAS,IAAI,IAAI,SAAS;gBAC7B,MAAM,cAAc,SAAS,WAAW;gBACxC,IAAI,aAAa;oBAChB,SAAS,GAAG,CAAC,aAAa,WAAW,CAAC,EAAE;oBACxC,SAAS,GAAG,CAAC,YAAY,WAAW,CAAC,EAAE;;mBAGpC,IAAI,SAAS,IAAI,IAAI,cAAc;gBACvC,MAAM,cAAc,SAAS,WAAW;gBACxC,IAAI,eAAe,WAAW,CAAC,EAAE,EAAE;oBAClC,SAAS,GAAG,CAAC,aAAa,WAAW,CAAC,EAAE,CAAC,EAAE;oBAC3C,SAAS,GAAG,CAAC,YAAY,WAAW,CAAC,EAAE,CAAC,EAAE;;;;QAK7C,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI;IACjC;IAEU,aAAa,QAA6C,EAAA;QACnE,SAAS,OAAO,GAAG,EAAE;QAErB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM,WAAW,SAAS,GAAG,CAAC;YAE9B,IAAI,UAAU;gBACb,IAAI,SAAS,IAAI,IAAI,SAAS;oBAC7B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU;uBAE7C,IAAI,SAAS,IAAI,GAAG,cAAc;oBACtC,IAAI,IAAI;oBACR,+KAAO,IAAI,CAAC,SAAS,WAAW,EAAE;wBACjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,gBAAgB;wBACjE;oBACD;;;QAGH;IACD;IAEU,iBAAiB,MAAe,EAAA;QACzC,IAAI,QAAQ;YACX,MAAM,SAAS,OAAO,GAAG,CAAC;YAC1B,MAAM,QAAQ,IAAI,CAAC,KAAK;YACxB,IAAI,UAAU,OAAO;gBACpB,MAAM,WAAW,OAAO,QAA6C;gBACrE,IAAI,UAAU;oBACb,IAAI,SAAS,GAAG,CAAC,UAAU;wBAC1B,IAAI,OAAO,MAAM,IAAI,MAAM,gBAAgB,EAAE;4BAC5C,MAAM,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC;;2BAGvC;wBACJ,IAAI,OAAO,MAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE;4BAC3C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC;;;;;;IAM/C;IAEO,gBAAgB,MAAc,EAAA;QACpC,MAAM,SAAS,OAAO,GAAG,CAAC;QAC1B,IAAI,QAAQ;YACX,MAAM,WAAW,OAAO,QAA+C;YACvE,IAAI,YAAY,SAAS,GAAG,CAAC,UAAU;gBACtC;;YAGD,MAAM,WAAW,SAAS,GAAG,CAAC;YAC9B,MAAM,YAAY,SAAS,GAAG,CAAC;YAC/B,MAAM,eAAe,SAAS,GAAG,CAAC;YAClC,MAAM,QAAQ,SAAS,GAAG,CAAC;YAC3B,MAAM,QAAQ,IAAI,CAAC,KAAK;YACxB,IAAI;YACJ,IAAI,cAAc;gBACjB,OAAO,aAAa,GAAG,CAAC;mBAEpB;gBACJ,MAAM,SAAS,SAAS,GAAG,CAAC;gBAE5B,IAAI,UAAU,OAAO;oBACpB,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,OAAO,MAAM,CAAgB,kBAAkB;4BAClD,IAAI,SAAS,OAAO,eAAe,CAAC;4BACpC,IAAI,QAAQ;gCACX,SAAS,GAAG,CAAC,gBAAgB;gCAC7B,OAAO,OAAO,GAAG,CAAC;;;oBAGrB;;;YAIF,IAAI,IAAI,CAAC,cAAc,EAAE;gBACxB,IAAI,CAAC,cAAc,CAAC,OAAO;;YAG5B,IAAI,MAAM;gBACT,IAAI,CAAC,cAAc,GAAG,KAAK,MAAM,CAAC,EAAE,CAAC,eAAe;oBACnD,IAAI,CAAC,gBAAgB,CAAC;gBACvB;;YAGD,MAAM,kBAAkB,SAAS,GAAG,CAAC;YACrC,IAAI;YACJ,IAAI,iBAAiB;gBACpB,UAAU,gBAAgB,GAAG,CAAC;mBAE1B;gBACJ,MAAM,YAAY,SAAS,GAAG,CAAC;gBAE/B,IAAI,aAAa,OAAO;oBACvB,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,OAAO,MAAM,CAAmB,qBAAqB;4BACxD,IAAI,YAAY,OAAO,eAAe,CAAC;4BACvC,IAAI,WAAW;gCACd,SAAS,GAAG,CAAC,mBAAmB;gCAChC,UAAU,UAAU,GAAG,CAAC;;;oBAG3B;;;YAIF,MAAM,iBAAiB,SAAS,GAAG,CAAC;YACpC,IAAI;YAEJ,IAAI;YAEJ,IAAI,SAAS;gBACZ,IAAI,WAAW,QAAQ,cAAc;gBACrC,cAAc;oBAAC,SAAS,SAAS;oBAAE,SAAS,QAAQ;iBAAC;gBACrD,SAAS,MAAM,CAAC,aAAa,SAAS,SAAS;gBAC/C,SAAS,MAAM,CAAC,YAAY,SAAS,QAAQ;mBAEzC,IAAI,QAAQ,8KAAM,QAAQ,CAAC,iBAAiB;gBAChD,IAAI,WAAW,KAAK,kBAAkB,CAAC;gBACvC,cAAc;oBAAC,SAAS,SAAS;oBAAE,SAAS,QAAQ;iBAAC;gBAErD,IAAI,SAAS,GAAG,CAAC,cAAc,OAAO,GAAG,CAAC,kBAAkB,OAAO;oBAClE,MAAM,YAAY,KAAK,kBAAkB,CAAC,iBAAiB;oBAC3D,MAAM,YAAY,KAAK,kBAAkB,CAAC,iBAAiB;oBAE3D,MAAM,SAAS,MAAM,OAAO,CAAC;oBAC7B,MAAM,SAAS,MAAM,OAAO,CAAC;oBAE7B,kEAAkE;oBAClE,QAAQ,8KAAM,QAAQ,CAAC,QAAQ;;gBAGhC,SAAS,MAAM,CAAC,aAAa,SAAS,SAAS;gBAC/C,SAAS,MAAM,CAAC,YAAY,SAAS,QAAQ;mBAEzC,IAAI,8KAAM,QAAQ,CAAC,cAAc,8KAAM,QAAQ,CAAC,WAAW;gBAC/D,cAAc;oBAAC;oBAAW;iBAAS;mBAE/B;gBACJ,MAAM,WAAW,SAAS,GAAG,CAAC;gBAC9B,IAAI,UAAU;oBACb,IAAI,SAAS,IAAI,IAAI,SAAS;wBAC7B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,UAAU,SAAS,WAA+B,EAAE;2BAEjF,IAAI,SAAS,IAAI,IAAI,cAAc;wBACvC,IAAI,QAAQ,OAAO,MAAM,IAAI;wBAC7B,cAAc,SAAS,WAAW,CAAC,MAA0B;;;;YAKhE,IAAI,CAAC,SAAS,aAAa;gBAC1B,IAAI,CAAC,mBAAmB,CAAC,QAAQ;oBAAE,MAAM;oBAAS,aAAa;gBAAW,GAAI,aAAa;;;IAG9F;IAEU,oBAAoB,MAAc,EAAE,QAA0B,EAAE,WAA6B,EAAE,KAAc,EAAA;QACtH,MAAM,SAAS,OAAO,GAAG,CAAC;QAC1B,MAAM,QAAQ,IAAI,CAAC,KAAK;QACxB,IAAI,OAAO;YACV,MAAM,aAAa,MAAM,GAAG,CAAC;YAC7B,MAAM,UAAU,MAAM,UAAU,CAAC;YACjC,MAAM,WAA8C,OAAO,QAA6C;YAExG,MAAM,KAAK,WAAW;YAEtB,IAAI,IAAI;gBACP,MAAM,QAAQ;oBAAE,GAAG,EAAE,CAAC,EAAE;oBAAE,GAAG,EAAE,CAAC,EAAE;gBAAA;gBAClC,OAAO,MAAM,CAAC;gBACd,SAAS,MAAM,CAAC,SAAS;;YAG1B,IAAI,UAAU;YACd,IAAI,QAAQ,WAAW;gBACtB,IAAI,IAAI,CAAC,GAAG,CAAC,cAAc;oBAC1B,UAAU;;mBAGP;gBACJ,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa;oBACzB,UAAU;;;YAGZ,OAAO,UAAU,CAAC,WAAW;YAC7B,SAAS,GAAG,CAAC,WAAW,CAAC;YAEzB,IAAI,YAAY,SAAS,QAAQ,SAAS,GAAG,CAAC,cAAc,OAAO,GAAG,CAAC,gBAAgB;gBACtF,OAAO,GAAG,CAAC,YAAY,QAAQ,SAAS,GAAG,CAAC,mBAAmB,OAAO,GAAG,CAAC,mBAAmB;;;IAGhG;IAEA;;;;;;;QAQO,eAAe,QAA2C,EAAE,SAAiB,EAAE,MAAgB,EAAA;QACrG,MAAM,QAAQ,IAAI,CAAC,KAAK;QACxB,IAAI,OAAO;YACV,MAAM,YAAY,SAAS,GAAG,CAAC,aAAa;YAC5C,MAAM,WAAW,SAAS,GAAG,CAAC,YAAY;YAC1C,IAAI,QAAQ;gBACX,OAAO,MAAM,cAAc,CAAC;oBAAE,WAAW;oBAAW,UAAU;gBAAQ,GAAI,WAAW,MAAM,WAAW,CAAC,WAAW,CAAC;;YAEpH,OAAO,MAAM,cAAc,CAAC;gBAAE,WAAW;gBAAW,UAAU;YAAQ,GAAI,WAAW;;IAEvF;IAGA;;;;;;;QAQO,gBAAgB,SAAmD,EAAE,MAAgB,EAAA;QAE3F,IAAI,OAAsB;QAC1B,IAAI,QAAuB;QAC3B,IAAI,MAAqB;QACzB,IAAI,SAAwB;QAE5B,+KAAO,IAAI,CAAC,WAAW,CAAC;YACvB,MAAM,YAAY,SAAS,GAAG,CAAC,aAAa;YAC5C,MAAM,WAAW,SAAS,GAAG,CAAC,YAAY;YAE1C,IAAI,QAAQ,QAAQ,OAAO,WAAW;gBACrC,OAAO;;YAER,IAAI,SAAS,QAAQ,QAAQ,WAAW;gBACvC,QAAQ;;YAET,IAAI,OAAO,QAAQ,MAAM,UAAU;gBAClC,MAAM;;YAEP,IAAI,UAAU,QAAQ,SAAS,UAAU;gBACxC,SAAS;;QAEX;QACA,IAAI,QAAQ,QAAQ,SAAS,QAAQ,OAAO,QAAQ,UAAU,MAAM;YACnE,MAAM,QAAQ,IAAI,CAAC,KAAK;YACxB,IAAI,OAAO;gBACV,IAAI,QAAQ;oBACX,OAAO,MAAM,eAAe,CAAC;wBAAE;wBAAM;wBAAO;wBAAK;oBAAM,GAAI,WAAW,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,MAAM,IAAI,CAAC;;gBAE/H,OAAO,MAAM,eAAe,CAAC;oBAAE;oBAAM;oBAAO;oBAAK;gBAAM;;;IAG1D;IAGA;;QAGO,gBAAgB,QAA6C,EAAA;QACnE,MAAM,QAAQ,IAAI,CAAC,KAAK;QACxB,IAAI,OAAO;YACV,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,OAAO,MAAM,CAAgB,kBAAkB;oBAClD,+KAAO,IAAI,CAAC,OAAO,SAAS,EAAE,CAAC;wBAC9B,MAAM,kBAAkB,GAAG,GAAG,CAAC;wBAC/B,IAAI,iBAAiB;4BACpB,+KAAO,IAAI,CAAC,iBAAiB,CAAC;gCAC7B,IAAI,SAAS,UAAU;oCACtB,+KAAO,MAAM,CAAC,iBAAiB;oCAC/B,OAAO,eAAe,CAAC;;4BAEzB;;oBAEF;;YAEF;;QAGD,KAAK,CAAC,gBAAgB;IACvB;IAEA;;QAGU,iBAAiB,QAA6C,EAAA;QACvE,KAAK,CAAC,iBAAiB;QACvB,MAAM,UAAU,SAAS,OAAO;QAChC,IAAI,SAAS;YACZ,+KAAO,IAAI,CAAC,SAAS,CAAC;gBACrB,MAAM,SAAS,OAAO,GAAG,CAAC;gBAC1B,IAAI,QAAQ;oBACX,OAAO,UAAU,CAAC,WAAW;;YAE/B;;IAEF;IAGA;;QAGU,mBAAmB,QAA6C,EAAA;QACzE,KAAK,CAAC,mBAAmB;QACzB,MAAM,UAAU,SAAS,OAAO;QAChC,IAAI,SAAS;YACZ,+KAAO,IAAI,CAAC,SAAS,CAAC;gBACrB,MAAM,SAAS,OAAO,GAAG,CAAC;gBAC1B,IAAI,QAAQ;oBACX,OAAO,UAAU,CAAC,WAAW;;YAE/B;;IAEF;IAEA;;QAGU,oBAAoB,QAA6C,EAAA;QAC1E,KAAK,CAAC,oBAAoB;QAC1B,MAAM,UAAU,SAAS,OAAO;QAChC,IAAI,SAAS;YACZ,+KAAO,IAAI,CAAC,SAAS,CAAC;gBACrB,MAAM,SAAS,OAAO,GAAG,CAAC;gBAC1B,IAAI,QAAQ;oBACX,OAAO,UAAU,CAAC,WAAW;;YAE/B;;IAEF;IAEA;;QAGU,sBAAsB,QAA6C,EAAA;QAC5E,KAAK,CAAC,sBAAsB;QAC5B,MAAM,UAAU,SAAS,OAAO;QAChC,IAAI,SAAS;YACZ,+KAAO,IAAI,CAAC,SAAS,CAAC;gBACrB,MAAM,SAAS,OAAO,GAAG,CAAC;gBAC1B,IAAI,QAAQ;oBACX,OAAO,UAAU,CAAC,WAAW;;YAE/B;;IAEF;;AA3ZA,OAAA,cAAA,CAAA,gBAAA,aAAA;;;;WAAkC;;AAClC,OAAA,cAAA,CAAA,gBAAA,cAAA;;;;WAA0C,mLAAA,CAAA,YAAS,CAAC,UAAU,CAAC,MAAM,CAAC;QAAC,eAAe,SAAS;KAAC"}},
    {"offset": {"line": 732, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 737, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/ClusteredPointSeries.ts"],"sourcesContent":["import { MapPointSeries, IMapPointSeriesSettings, IMapPointSeriesPrivate, IMapPointSeriesDataItem } from \"./MapPointSeries\";\r\nimport { DataItem, IComponentDataItem } from \"../../core/render/Component\";\r\nimport type { Root } from \"../../core/Root\";\r\nimport type { Bullet } from \"../../core/render/Bullet\";\r\nimport { Container } from \"../../core/render/Container\";\r\nimport { Label } from \"../../core/render/Label\";\r\n\r\nimport * as $array from \"../../core/util/Array\";\r\nimport * as $object from \"../../core/util/Object\";\r\nimport * as d3hierarchy from \"d3-hierarchy\";\r\nimport * as $math from \"../../core/util/Math\";\r\n\r\n\r\nexport interface IClusteredDataItem extends IComponentDataItem {\r\n\t/**\r\n\t * All the data items of this cluster\r\n\t */\r\n\tchildren?: Array<DataItem<IMapPointSeriesDataItem>>;\r\n\r\n\t/**\r\n\t * Bullet of clustered data item\r\n\t */\r\n\tbullet?: Bullet;\r\n\r\n\t/**\r\n\t * An ID of a group.\r\n\t */\r\n\tgroupId?: string\t\r\n}\r\n\r\nexport interface IClusteredPointSeriesDataItem extends IMapPointSeriesDataItem {\r\n\t/**\r\n\t * An ID of a bullet's group.\r\n\t */\r\n\tgroupId?: string\r\n\r\n\t/**\r\n\t * Clustered data item (if available)\r\n\t * @readonly\r\n\t */\r\n\tcluster?: DataItem<IClusteredDataItem>;\r\n\r\n\t/**\r\n\t * How much bullet was moved from its original position\r\n\t */\r\n\tdx?: number;\r\n\r\n\t/**\r\n\t * How much bullet was moved from its original position\r\n\t */\r\n\tdy?: number;\r\n}\r\n\r\nexport interface IClusteredPointSeriesPrivate extends IMapPointSeriesPrivate {\r\n\r\n}\r\n\r\nexport interface IClusteredPointSeriesSettings extends IMapPointSeriesSettings {\r\n\t/**\r\n\t * Series data can contain a field with an ID of a virtual group the bullet\r\n\t * belongs to.\r\n\t *\r\n\t * For example, we migth want bullets to group with other bullets from the\r\n\t * same continent.\r\n\t *\r\n\t * `groupIdField` specifies which field in source data holds group IDs.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Group_segregation} for more info\r\n\t * @default groupID\r\n\t */\r\n\tgroupIdField?: string;\r\n\r\n\t/**\r\n\t * Bullets that are closer than X pixels apart, will be automatically grouped.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Minimal_distance} for more info\r\n\t * @default 20\r\n\t */\r\n\tminDistance?: number;\r\n\r\n\t/**\r\n\t * Set this to a [[Bullet]] instance which will be used to show groups.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Group_bullet} for more info\r\n\t */\r\n\tclusteredBullet?: (root: Root, series: ClusteredPointSeries, dataItem: DataItem<IClusteredDataItem>) => Bullet | undefined;\r\n\r\n\t/**\r\n\t * If bullets are closer to each other than `scatterDistance`, they will be\r\n\t * scattered so that all are visible.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Scatter_settings} for more info\r\n\t * @default 5\r\n\t * @since 5.5.7\r\n\t */\r\n\tscatterDistance?: number;\r\n\r\n\t/**\r\n\t * Presumed radius of a each bullet when scattering them.\r\n\t * \r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Scatter_settings} for more info\r\n\t * @default 8\r\n\t * @since 5.5.7\r\n\t */\r\n\tscatterRadius?: number;\r\n\r\n\t/**\r\n\t * If a map is zoomed to a maxZoomLevel * stopClusterZoom, clusters will be\r\n\t * disabled.\r\n\t * \r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Scatter_settings} for more info\r\n\t * @default 0.95\r\n\t * @since 5.5.7\r\n\t */\r\n\tstopClusterZoom?: number\r\n}\r\n\r\n/**\r\n * A version of [[MapPointSeries]] which can automatically group closely located\r\n * bullets into groups.\r\n * \r\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/} for more info\r\n * @since 5.5.6\r\n * @important\r\n */\r\nexport class ClusteredPointSeries extends MapPointSeries {\r\n\r\n\tpublic static className: string = \"ClusteredPointSeries\";\r\n\tpublic static classNames: Array<string> = MapPointSeries.classNames.concat([ClusteredPointSeries.className]);\r\n\r\n\tdeclare public _settings: IClusteredPointSeriesSettings;\r\n\tdeclare public _privateSettings: IClusteredPointSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IClusteredPointSeriesDataItem;\r\n\r\n\tprotected _dataItem: DataItem<this[\"_dataItemSettings\"]> = this.makeDataItem({});\r\n\tprotected _clusterIndex: number = 0;\r\n\tprotected _clusters: Array<Array<DataItem<this[\"_dataItemSettings\"]>>> = [];\r\n\tpublic clusteredDataItems: Array<DataItem<IClusteredDataItem>> = [];\r\n\r\n\tprotected _scatterIndex: number = 0;\r\n\tprotected _scatters: Array<Array<DataItem<this[\"_dataItemSettings\"]>>> = [];\r\n\r\n\tpublic _packLayout = d3hierarchy.pack();\r\n\r\n\tprotected _spiral: Array<{ x: number, y: number }> = [];\r\n\r\n\tprotected _afterNew() {\r\n\t\tthis.fields.push(\"groupId\");\r\n\t\tthis._setRawDefault(\"groupIdField\", \"groupId\");\r\n\r\n\t\tsuper._afterNew();\r\n\t}\r\n\r\n\tpublic _updateChildren() {\r\n\t\tsuper._updateChildren();\r\n\r\n\t\tif (this.isDirty(\"scatterRadius\")) {\r\n\t\t\tthis._spiral = $math.spiralPoints(0, 0, 300, 300, 0, 3, 3, 0, 0)\r\n\t\t}\r\n\r\n\t\tconst groups: { [index: string]: Array<DataItem<IClusteredPointSeriesDataItem>> } = {};\r\n\t\t// distribute to groups\r\n\t\t$array.each(this.dataItems, (dataItem) => {\r\n\t\t\tconst groupId = dataItem.get(\"groupId\", \"_default\");\r\n\r\n\t\t\tif (!groups[groupId]) {\r\n\t\t\t\tgroups[groupId] = [];\r\n\t\t\t}\r\n\t\t\tgroups[groupId].push(dataItem);\r\n\t\t})\r\n\r\n\t\tthis._scatterIndex = -1;\r\n\t\tthis._scatters = [];\r\n\t\tthis._clusterIndex = -1;\r\n\t\tthis._clusters = [];\r\n\r\n\t\t$array.each(this.clusteredDataItems, (dataItem) => {\r\n\t\t\tdataItem.setRaw(\"children\", undefined);\r\n\t\t})\r\n\r\n\t\t$array.each(this.dataItems, (dataItem) => {\r\n\t\t\tdataItem.setRaw(\"cluster\", undefined);\r\n\t\t})\r\n\r\n\t\t$object.each(groups, (_key, group) => {\r\n\t\t\tthis._scatterGroup(group);\r\n\t\t})\r\n\r\n\t\t$object.each(groups, (_key, group) => {\r\n\t\t\tthis._clusterGroup(group);\r\n\t\t})\r\n\r\n\t\t$array.each(this.dataItems, (dataItem) => {\r\n\t\t\tif (!dataItem.get(\"cluster\")) {\r\n\t\t\t\tconst bullets = dataItem.bullets;\r\n\t\t\t\tif (bullets) {\r\n\t\t\t\t\t$array.each(bullets, (bullet) => {\r\n\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\t\tsprite.set(\"forceHidden\", false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to the area so that all clustered data items of a cluster would be\r\n\t * visible.\r\n\t *\r\n\t * Pass in `true` as a second parameter to rotate that map so that the group\r\n\t * is in the center. This is especially useful in the maps that use\r\n\t * Orthographic (globe) projection.\r\n\t *\r\n\t * @param  dataItem  Group data item\r\n\t * @param  rotate    Rotate the map so that group is in the center?\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/clustered-point-series/#Drill_down} for more info\r\n\t */\r\n\tpublic zoomToCluster(dataItem: DataItem<IClusteredDataItem>, rotate?: boolean) {\r\n\t\tthis.zoomToDataItems(dataItem.get(\"children\", []), rotate);\r\n\t}\r\n\r\n\tprotected _clusterGroup(dataItems: Array<DataItem<IClusteredPointSeriesDataItem>>) {\r\n\t\tconst chart = this.chart;\r\n\t\tif (chart && chart.get(\"zoomLevel\", 1) >= chart.get(\"maxZoomLevel\", 100) * this.get(\"stopClusterZoom\", 0.95)) {\r\n\t\t\t// void\r\n\t\t}\r\n\t\telse {\r\n\t\t\twhile (dataItems.length > 0) {\r\n\t\t\t\tthis._clusterIndex++;\r\n\t\t\t\tthis._clusters[this._clusterIndex] = [];\r\n\t\t\t\tconst cluster = this._clusters[this._clusterIndex];\r\n\t\t\t\tconst dataItem = dataItems[0];\r\n\r\n\t\t\t\tcluster.push(dataItem);\r\n\t\t\t\t$array.remove(dataItems, dataItem);\r\n\r\n\t\t\t\tthis._clusterDataItem(dataItem, dataItems);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet i = 0;\r\n\r\n\t\t$array.each(this._clusters, (cluster) => {\r\n\t\t\tlet sumX = 0;\r\n\t\t\tlet sumY = 0;\r\n\r\n\t\t\tlet len = cluster.length;\r\n\r\n\t\t\tif (len > 1) {\r\n\r\n\t\t\t\tlet clusteredDataItem = this.clusteredDataItems[i];\r\n\t\t\t\tif (!clusteredDataItem) {\r\n\t\t\t\t\tclusteredDataItem = new DataItem(this, undefined, {});\r\n\r\n\t\t\t\t\tconst bulletMethod = this.get(\"clusteredBullet\");\r\n\t\t\t\t\tif (bulletMethod) {\r\n\t\t\t\t\t\tconst bullet = clusteredDataItem.set(\"bullet\" as any, bulletMethod(this._root, this, clusteredDataItem));\r\n\r\n\t\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\t\t\tthis.bulletsContainer.children.push(sprite);\r\n\t\t\t\t\t\t\t\tsprite._setDataItem(clusteredDataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.clusteredDataItems.push(clusteredDataItem)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet groupId;\r\n\r\n\t\t\t\t$array.each(cluster, (dataItem) => {\r\n\t\t\t\t\tdataItem.setRaw(\"cluster\", clusteredDataItem);\r\n\r\n\t\t\t\t\tconst point = dataItem.get(\"point\");\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tsumX += point.x;\r\n\t\t\t\t\t\tsumY += point.y;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst bullets = dataItem.bullets;\r\n\t\t\t\t\tif (bullets) {\r\n\t\t\t\t\t\t$array.each(bullets, (bullet) => {\r\n\t\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\t\t\tsprite.set(\"forceHidden\", true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgroupId = dataItem.get(\"groupId\");\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet averageX = sumX / len;\r\n\t\t\t\tlet averageY = sumY / len;\r\n\r\n\t\t\t\tclusteredDataItem.setRaw(\"children\" as any, cluster);\r\n\t\t\t\tclusteredDataItem.setRaw(\"groupId\", groupId);\r\n\r\n\t\t\t\tconst prevLen = clusteredDataItem.get(\"value\" as any);\r\n\t\t\t\tclusteredDataItem.setRaw(\"value\" as any, len);\r\n\r\n\t\t\t\tconst bullet = clusteredDataItem.get(\"bullet\" as any);\r\n\t\t\t\tif (bullet) {\r\n\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\tsprite.set(\"forceHidden\", false);\r\n\t\t\t\t\t\tsprite.setAll({ x: averageX, y: averageY });\r\n\r\n\t\t\t\t\t\tif (prevLen != len) {\r\n\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\tsprite.walkChildren((child) => {\r\n\t\t\t\t\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\t\t\t\t\tchild.text.markDirtyText();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t$array.each(this.clusteredDataItems, (dataItem) => {\r\n\t\t\tlet children = dataItem.get(\"children\");\r\n\t\t\tif (!children || children.length == 0) {\r\n\t\t\t\tconst bullet = dataItem.get(\"bullet\" as any);\r\n\t\t\t\tif (bullet) {\r\n\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\tsprite.set(\"forceHidden\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected _onDataClear() {\r\n\t\tsuper._onDataClear();\r\n\r\n\t\t$array.each(this.clusteredDataItems, (dataItem) => {\r\n\t\t\tconst bullet = dataItem.get(\"bullet\" as any);\r\n\t\t\tif (bullet) {\r\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\tif (sprite) {\r\n\t\t\t\t\tsprite.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.clusteredDataItems = [];\r\n\r\n\t}\r\n\r\n\tprotected _clusterDataItem(dataItem: DataItem<IClusteredPointSeriesDataItem>, dataItems: Array<DataItem<IClusteredPointSeriesDataItem>>) {\r\n\t\tconst point = dataItem.get(\"point\");\r\n\t\tif (point) {\r\n\t\t\t$array.each(dataItems, (di) => {\r\n\t\t\t\tif (di && !di.get(\"clipped\")) {\r\n\t\t\t\t\tconst diPoint = di.get(\"point\");\r\n\t\t\t\t\tif (diPoint) {\r\n\r\n\t\t\t\t\t\tif (Math.hypot(diPoint.x - point.x, diPoint.y - point.y) < this.get(\"minDistance\", 20)) {\r\n\t\t\t\t\t\t\tconst cluster = this._clusters[this._clusterIndex];\r\n\t\t\t\t\t\t\tcluster.push(di);\r\n\t\t\t\t\t\t\t$array.remove(dataItems, di);\r\n\t\t\t\t\t\t\tthis._clusterDataItem(di, dataItems);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _scatterGroup(dataItems: Array<DataItem<IClusteredPointSeriesDataItem>>) {\r\n\t\tconst chart = this.chart;\r\n\t\tif (chart && chart.get(\"zoomLevel\", 1) >= chart.get(\"maxZoomLevel\", 100) * this.get(\"stopClusterZoom\", 0.95)) {\r\n\t\t\twhile (dataItems.length > 0) {\r\n\t\t\t\tthis._scatterIndex++;\r\n\t\t\t\tthis._scatters[this._scatterIndex] = [];\r\n\t\t\t\tconst scatter = this._scatters[this._scatterIndex];\r\n\t\t\t\tconst dataItem = dataItems[0];\r\n\r\n\t\t\t\tscatter.push(dataItem);\r\n\t\t\t\t$array.remove(dataItems, dataItem);\r\n\r\n\t\t\t\tthis._scatterDataItem(dataItem, dataItems);\r\n\t\t\t}\r\n\r\n\t\t\t$array.each(this._scatters, (scatter) => {\r\n\t\t\t\tlet len = scatter.length;\r\n\r\n\t\t\t\tif (len > 1) {\r\n\t\t\t\t\tlet previousCircles: Array<{ x: number, y: number, radius: number }> = [];\r\n\t\t\t\t\tlet s = 0;\r\n\t\t\t\t\tlet radius = this.get(\"scatterRadius\", 8);\r\n\t\t\t\t\t$array.each(scatter, (dataItem) => {\r\n\t\t\t\t\t\tlet spiralPoint = this._spiral[s];\r\n\t\t\t\t\t\tlet intersects = true;\r\n\r\n\t\t\t\t\t\tif (previousCircles.length > 0) {\r\n\t\t\t\t\t\t\twhile (intersects) {\r\n\t\t\t\t\t\t\t\t$array.each(previousCircles, (previousCircle) => {\r\n\t\t\t\t\t\t\t\t\tintersects = false;\r\n\t\t\t\t\t\t\t\t\twhile ($math.circlesOverlap({ x: spiralPoint.x, y: spiralPoint.y, radius: radius }, previousCircle)) {\r\n\t\t\t\t\t\t\t\t\t\ts++;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (this._spiral[s] == undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tintersects = false;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tintersects = true;\r\n\t\t\t\t\t\t\t\t\t\t\tspiralPoint = this._spiral[s];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst dx = spiralPoint.x;\r\n\t\t\t\t\t\tconst dy = spiralPoint.y;\r\n\r\n\t\t\t\t\t\tpreviousCircles.push({ x: dx, y: dy, radius: radius });\r\n\r\n\t\t\t\t\t\tdataItem.set(\"dx\", dx);\r\n\t\t\t\t\t\tdataItem.set(\"dy\", dy);\r\n\r\n\t\t\t\t\t\tconst bullets = dataItem.bullets;\r\n\t\t\t\t\t\tif (bullets) {\r\n\t\t\t\t\t\t\t$array.each(bullets, (bullet) => {\r\n\t\t\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\r\n\t\t\t\t\t\t\t\tif (sprite) {\r\n\t\t\t\t\t\t\t\t\tsprite.setAll({ dx: dx, dy: dy });\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _scatterDataItem(dataItem: DataItem<IClusteredPointSeriesDataItem>, dataItems: Array<DataItem<IClusteredPointSeriesDataItem>>) {\r\n\t\tconst point = dataItem.get(\"point\");\r\n\t\tif (point) {\r\n\t\t\t$array.each(dataItems, (di) => {\r\n\t\t\t\tif (di && !di.get(\"clipped\")) {\r\n\t\t\t\t\tconst diPoint = di.get(\"point\");\r\n\r\n\t\t\t\t\tif (diPoint) {\r\n\t\t\t\t\t\tif (Math.hypot(diPoint.x - point.x, diPoint.y - point.y) < this.get(\"scatterDistance\", 5)) {\r\n\t\t\t\t\t\t\tconst scatter = this._scatters[this._scatterIndex];\r\n\t\t\t\t\t\t\tscatter.push(di);\r\n\t\t\t\t\t\t\t$array.remove(dataItems, di);\r\n\t\t\t\t\t\t\tthis._scatterDataItem(di, dataItems);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1106, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapChartDefaultTheme.ts"],"sourcesContent":["import { Theme } from \"../../core/Theme\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\nimport { geoMercator } from \"d3-geo\";\r\n\r\nimport * as $ease from \"../../core/util/Ease\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class MapChartDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/map\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"MapChart\").setAll({\r\n\t\t\tprojection: geoMercator(),\r\n\t\t\tpanX: \"translateX\",\r\n\t\t\tpanY: \"translateY\",\r\n\t\t\tpinchZoom: true,\r\n\t\t\tzoomStep: 2,\r\n\t\t\tzoomLevel: 1,\r\n\t\t\trotationX: 0,\r\n\t\t\trotationY: 0,\r\n\t\t\trotationZ: 0,\r\n\t\t\tmaxZoomLevel: 32,\r\n\t\t\tminZoomLevel: 1,\r\n\t\t\twheelY: \"zoom\",\r\n\t\t\twheelX: \"none\",\r\n\t\t\tanimationEasing: $ease.out($ease.cubic),\r\n\t\t\twheelEasing: $ease.out($ease.cubic),\r\n\t\t\twheelDuration: 0,\r\n\t\t\twheelSensitivity: 1,\r\n\t\t\tmaxPanOut: 0.4,\r\n\t\t\tcenterMapOnZoomOut: true\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"MapLine\");\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tprecision: 0.5,\r\n\t\t\t\trole: \"figure\",\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"stroke\", ic, \"grid\");\r\n\t\t}\r\n\r\n\t\tr(\"MapPolygonSeries\").setAll({\r\n\t\t\taffectsBounds: true\r\n\t\t})\r\n\r\n\r\n\t\tr(\"MapPointSeries\").setAll({\r\n\t\t\taffectsBounds: false,\r\n\t\t\tclipFront: false,\r\n\t\t\tclipBack: true,\r\n\t\t\tautoScale: false\r\n\t\t})\r\n\r\n\t\tr(\"ClusteredPointSeries\").setAll({\r\n\t\t\tminDistance: 20,\r\n\t\t\tscatterDistance: 3,\r\n\t\t\tscatterRadius: 8,\r\n\t\t\tstopClusterZoom: 0.95\r\n\t\t})\r\n\r\n\t\tr(\"MapLineSeries\").setAll({\r\n\t\t\taffectsBounds: false\r\n\t\t})\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"MapPolygon\");\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tprecision: 0.5,\r\n\t\t\t\tisMeasured: false,\r\n\t\t\t\trole: \"figure\",\r\n\t\t\t\tfillOpacity: 1,\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tstrokeWidth: 0.2,\r\n\t\t\t\tstrokeOpacity: 1\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"primaryButton\");\r\n\t\t\tsetColor(rule, \"stroke\", ic, \"background\");\r\n\t\t}\r\n\r\n\r\n\t\tr(\"Button\", [\"zoomtools\", \"home\"]).setAll({\r\n\t\t\tvisible: false\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/map: Series\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"GraticuleSeries\").setAll({\r\n\t\t\tstep: 10\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAWM,MAAO,6BAA6B,sKAAA,CAAA,QAAK;IACpC,oBAAiB;QAC1B,KAAK,CAAC;QAEN,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe;QACrC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QAE7B;;;;YAMA,EAAE,YAAY,MAAM,CAAC;YACpB,YAAY,CAAA,GAAA,oMAAA,CAAA,cAAW,AAAX;YACZ,MAAM;YACN,MAAM;YACN,WAAW;YACX,UAAU;YACV,WAAW;YACX,WAAW;YACX,WAAW;YACX,WAAW;YACX,cAAc;YACd,cAAc;YACd,QAAQ;YACR,QAAQ;YACR,iBAAiB,8KAAM,GAAG,CAAC,8KAAM,KAAK;YACtC,aAAa,8KAAM,GAAG,CAAC,8KAAM,KAAK;YAClC,eAAe;YACf,kBAAkB;YAClB,WAAW;YACX,oBAAoB;;QAGrB;YACC,MAAM,OAAO,EAAE;YAEf,KAAK,MAAM,CAAC;gBACX,WAAW;gBACX,MAAM;;YAGP,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAR,EAAS,MAAM,UAAU,IAAI;;QAG9B,EAAE,oBAAoB,MAAM,CAAC;YAC5B,eAAe;;QAIhB,EAAE,kBAAkB,MAAM,CAAC;YAC1B,eAAe;YACf,WAAW;YACX,UAAU;YACV,WAAW;;QAGZ,EAAE,wBAAwB,MAAM,CAAC;YAChC,aAAa;YACb,iBAAiB;YACjB,eAAe;YACf,iBAAiB;;QAGlB,EAAE,iBAAiB,MAAM,CAAC;YACzB,eAAe;;QAGhB;YACC,MAAM,OAAO,EAAE;YAEf,KAAK,MAAM,CAAC;gBACX,WAAW;gBACX,YAAY;gBACZ,MAAM;gBACN,aAAa;gBACb,UAAU;gBACV,aAAa;gBACb,eAAe;;YAGhB,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAR,EAAS,MAAM,QAAQ,IAAI;YAC3B,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAR,EAAS,MAAM,UAAU,IAAI;;QAI9B,EAAE,UAAU;YAAC;YAAa;SAAO,EAAE,MAAM,CAAC;YACzC,SAAS;;QAGV;;;;YAMA,EAAE,mBAAmB,MAAM,CAAC;YAC3B,MAAM;;IAER"}},
    {"offset": {"line": 1203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1208, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapLine.ts"],"sourcesContent":["import type { MapLineSeries, IMapLineSeriesDataItem } from \"./MapLineSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport * as $type from \"../../core/util/Type\";\nimport { Percent } from \"../../core/util/Percent\";\n\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate, IGraphicsEvents } from \"../../core/render/Graphics\";\nimport { geoLength, geoInterpolate, geoDistance } from \"d3-geo\";\n\nexport interface IMapLineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n}\n\nexport interface IMapLinePrivate extends IGraphicsPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tseries: MapLineSeries;\n}\n\nexport interface IMapLineEvents extends IGraphicsEvents {\n\n\t/**\n\t * Invoked when line is redrawn\n\t */\n\tlinechanged: {};\n}\n\n/**\n * A line object in a [[MapLineSeries]].\n */\nexport class MapLine extends Graphics {\n\n\tdeclare public _settings: IMapLineSettings;\n\tdeclare public _privateSettings: IMapLinePrivate;\n\tdeclare public _events: IMapLineEvents;\n\n\tpublic static className: string = \"MapLine\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapLine.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.getPrivate(\"series\");\n\t\t\t\tif (series) {\n\t\t\t\t\tconst chart = series.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\tconst projection = chart.get(\"projection\");\n\t\t\t\t\t\tlet clipAngle: number | null = null;\n\n\t\t\t\t\t\tif (projection && projection.clipAngle) {\n\t\t\t\t\t\t\tclipAngle = projection.clipAngle();\n\t\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst dataItem = this.dataItem as DataItem<IMapLineSeriesDataItem>;\n\t\t\t\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\t\t\t\tif (geoPath && dataItem) {\n\t\t\t\t\t\t\tthis._clear = true;\n\t\t\t\t\t\t\tif (dataItem.get(\"lineType\", series.get(\"lineType\")) == \"straight\") {\n\n\t\t\t\t\t\t\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tlet coordinates = geometry.coordinates;\n\t\t\t\t\t\t\t\t\tif (coordinates) {\n\n\t\t\t\t\t\t\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\t\t\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\t\t\t\t\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\t\t\t\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\t\t\t\t\t\t\t\tif (segment.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst gp0 = segment[0];\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst p0 = chart.convert({ longitude: gp0[0], latitude: gp0[1] })\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay.lineTo(p0.x, p0.y);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let p = 0; p < segment.length; p++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst gp = segment[p];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst pn = chart.convert({ longitude: gp[0], latitude: gp[1] })\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay.lineTo(pn.x, pn.y);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\t\t\tif (projection && series.get(\"clipBack\") === false) {\n\t\t\t\t\t\t\t\t\t\tprojection.clipAngle(180);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\t\t\tgeoPath.context(null);\n\n\t\t\t\t\t\t\t\t\tif (projection && projection.clipAngle) {\n\t\t\t\t\t\t\t\t\t\tprojection.clipAngle(clipAngle as any);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = \"linechanged\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tconst geoPoint = this.positionToGeoPoint(tooltipX.value)\n\t\t\tconst series = this.getPrivate(\"series\");\n\t\t\tif (series) {\n\t\t\t\tconst chart = series.chart;\n\t\t\t\tif (chart) {\n\t\t\t\t\tconst point = chart.convert(geoPoint);\n\t\t\t\t\tx = point.x;\n\t\t\t\t\ty = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn { x, y };\n\t}\n\n\t/**\n\t * Converts relative position along the line (0-1) into pixel coordinates.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinates\n\t */\n\tpublic positionToGeoPoint(position: number): IGeoPoint {\n\n\t\tconst geometry = this.get(\"geometry\")!;\n\t\tconst series = this.getPrivate(\"series\");\n\t\tconst chart = series.chart;\n\t\tconst dataItem = this.dataItem as DataItem<IMapLineSeriesDataItem>;\n\n\t\tif (geometry && series && chart && dataItem) {\n\t\t\tconst lineType = dataItem.get(\"lineType\", series.get(\"lineType\"));\n\t\t\tlet totalDistance: number = geoLength(geometry);\n\t\t\tlet currentDistance: number = 0;\n\n\t\t\tlet distanceAB: number;\n\t\t\tlet positionA: number = 0;\n\t\t\tlet positionB: number = 0;\n\t\t\tlet pointA!: [number, number];\n\t\t\tlet pointB!: [number, number];\n\n\t\t\tlet coordinates = geometry.coordinates;\n\t\t\tif (coordinates) {\n\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t}\n\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t}\n\n\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\tif (segment.length > 1) {\n\t\t\t\t\t\tfor (let p = 1; p < segment.length; p++) {\n\t\t\t\t\t\t\tpointA = segment[p - 1] as [number, number];\n\t\t\t\t\t\t\tpointB = segment[p] as [number, number];\n\n\t\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\n\t\t\t\t\t\t\tdistanceAB = geoDistance(pointA, pointB);\n\t\t\t\t\t\t\tcurrentDistance += distanceAB;\n\t\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\n\n\t\t\t\t\t\t\tif (positionA <= position && positionB > position) {\n\t\t\t\t\t\t\t\ts = segments.length;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (segment.length == 1) {\n\t\t\t\t\t\tpointA = segment[0] as [number, number];\n\t\t\t\t\t\tpointB = segment[0] as [number, number];\n\t\t\t\t\t\tpositionA = 0;\n\t\t\t\t\t\tpositionB = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pointA && pointB) {\n\t\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\n\t\t\t\t\tlet location: number[];\n\n\t\t\t\t\tif (lineType == \"straight\") {\n\t\t\t\t\t\tlet p0 = chart.convert({ longitude: pointA[0], latitude: pointA[1] });\n\t\t\t\t\t\tlet p1 = chart.convert({ longitude: pointB[0], latitude: pointB[1] });\n\n\t\t\t\t\t\tlet x = p0.x + (p1.x - p0.x) * positionAB;\n\t\t\t\t\t\tlet y = p0.y + (p1.y - p0.y) * positionAB;\n\n\t\t\t\t\t\treturn chart.invert({ x: x, y: y });\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlocation = geoInterpolate(pointA, pointB)(positionAB);\n\t\t\t\t\t\treturn { longitude: location[0], latitude: location[1] }\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1450, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1455, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapLineSeries.ts"],"sourcesContent":["import type { IMapPointSeriesDataItem } from \"./MapPointSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $array from \"../../core/util/Array\";\n\n/**\n * @ignore\n */\nexport interface IMapLineSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapLineSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapLine]] object.\n\t */\n\tmapLine?: MapLine;\n\n\t/**\n\t * GeoJSON geometry of the line.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * An array of data items from [[MapPointSeries]] to use as line end-points. Note, fixed points can not be used here.\n\t */\n\tpointsToConnect?: Array<DataItem<IMapPointSeriesDataItem>>;\n\n\t/**\n\t * A line type.\n\t *\n\t * * `\"curved\"` (default) - connects points using shortest distance, which will result in curved lines based on map projection.\n\t * * `\"straight\"` - connects points using visually straight lines, and will not cross the -180/180 longitude.\n\t * \n\t * @default \"curved\"\n\t * @since 5.2.32\n\t */\n\tlineType?: \"curved\" | \"straight\"\n\n}\n\nexport interface IMapLineSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * If set to `true` will hide line segments that are in the invisible range\n\t * of the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t */\n\tclipBack?: boolean;\n\n\t/**\n\t * A line type.\n\t *\n\t * * `\"curved\"` (default) - connects points using shortest distance, which will result in curved lines based on map projection.\n\t * * `\"straight\"` - connects points using visually straight lines, and will not cross the -180/180 longitude.\n\t * \n\t * @default \"curved\"\n\t * @since 5.2.24\n\t */\n\tlineType?: \"curved\" | \"straight\"\n\n\n\t/**\n\t * @ignore\n\t */\n\tlineTypeField?: string;\n}\n\n/**\n * Creates a map series for displaying lines on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/} for more info\n * @important\n */\nexport class MapLineSeries extends MapSeries {\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"lineType\");\n\t\tthis._setRawDefault(\"lineTypeField\", \"lineType\");\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapLine(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapLine {\n\t\tconst mapLine = this.children.push(this.mapLines.make());\n\t\tmapLine._setDataItem(dataItem);\n\t\tthis.mapLines.push(mapLine);\n\t\treturn mapLine;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all lines in series.\n\t *\n\t * `mapLines.template` can also be used to configure lines.\n\t *\n\t * @default new ListTemplate<MapLine>\n\t */\n\tpublic readonly mapLines: ListTemplate<MapLine> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapLine._new(this._root, {}, [this.mapLines.template])\n\t);\n\n\tpublic static className: string = \"MapLineSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapLineSeries.className]);\n\n\tdeclare public _settings: IMapLineSeriesSettings;\n\tdeclare public _privateSettings: IMapLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapLineSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"LineString\", \"MultiLineString\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tmapLine.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapLines.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\tif (!mapLine) {\n\t\t\tmapLine = this.makeMapLine(dataItem);\n\t\t}\n\n\t\tthis._handlePointsToConnect(dataItem);\n\t\tdataItem.on(\"pointsToConnect\", () => {\n\t\t\tthis._handlePointsToConnect(dataItem);\n\t\t})\n\n\t\tdataItem.set(\"mapLine\", mapLine);\n\n\t\tthis._addGeometry(dataItem.get(\"geometry\"), this);\n\n\t\tmapLine.setPrivate(\"series\", this);\n\t}\n\n\tprotected _handlePointsToConnect(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\tif (pointsToConnect) {\n\t\t\t$array.each(pointsToConnect, (point) => {\n\n\t\t\t\tpoint.on(\"geometry\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"longitude\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"latitude\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tthis.markDirtyValues(dataItem);\n\t\t}\n\t}\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\t\t\tif (pointsToConnect) {\n\t\t\t\t\tlet coordinates: Array<Array<number>> = [];\n\t\t\t\t\t$array.each(pointsToConnect, (point) => {\n\t\t\t\t\t\tconst longitude = point.get(\"longitude\");\n\t\t\t\t\t\tconst latitude = point.get(\"latitude\");\n\t\t\t\t\t\tif (longitude != null && latitude != null) {\n\t\t\t\t\t\t\tcoordinates.push([longitude, latitude]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst geometry = point.get(\"geometry\");\n\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\tconst coords = geometry.coordinates;\n\t\t\t\t\t\t\t\tif (coords) {\n\t\t\t\t\t\t\t\t\tcoordinates.push([coords[0] as any, coords[1] as any]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tlet geometry: any = { type: \"LineString\", coordinates: coordinates };\n\n\t\t\t\t\tdataItem.setRaw(\"geometry\", geometry);\n\t\t\t\t\tmapLine.set(\"geometry\", geometry);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmapLine.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tthis.mapLines.removeValue(mapLine);\n\t\t\tmapLine.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _excludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._excludeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tmapLine.setPrivate(\"visible\", false);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unexcludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unexcludeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tmapLine.setPrivate(\"visible\", true);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _notIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._notIncludeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tmapLine.setPrivate(\"visible\", false);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unNotIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unNotIncludeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tmapLine.setPrivate(\"visible\", true);\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1662, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1667, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/GraticuleSeries.ts"],"sourcesContent":["import { MapLineSeries, IMapLineSeriesSettings, IMapLineSeriesPrivate, IMapLineSeriesDataItem } from \"./MapLineSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport { geoGraticule } from \"d3-geo\";\n\nexport interface IGraticuleSeriesDataItem extends IMapLineSeriesDataItem {\n}\n\nexport interface IGraticuleSeriesPrivate extends IMapLineSeriesPrivate {\n}\n\nexport interface IGraticuleSeriesSettings extends IMapLineSeriesSettings {\n\tclipExtent?: boolean;\n\n\t/**\n\t * Place a grid line every Xth latitude/longitude.\n\t *\n\t * @default 10\n\t */\n\tstep?: number;\n}\n\n/**\n * A [[MapChart]] series to draw a map grid.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/} for more info\n * @important\n */\nexport class GraticuleSeries extends MapLineSeries {\n\n\tpublic static className: string = \"GraticuleSeries\";\n\tpublic static classNames: Array<string> = MapLineSeries.classNames.concat([GraticuleSeries.className]);\n\n\tdeclare public _settings: IGraticuleSeriesSettings;\n\tdeclare public _privateSettings: IGraticuleSeriesPrivate;\n\n\tprotected _dataItem: DataItem<this[\"_dataItemSettings\"]> = this.makeDataItem({});\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.dataItems.push(this._dataItem);\n\t\tthis._generate();\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"step\")) {\n\t\t\tthis._generate();\n\t\t}\n\n\t\tif (this.isDirty(\"clipExtent\")) {\n\n\t\t\tif (this.get(\"clipExtent\")) {\n\t\t\t\tconst chart = this.chart;\n\t\t\t\tif (chart) {\n\t\t\t\t\tchart.events.on(\"geoboundschanged\", () => {\n\t\t\t\t\t\tthis._generate();\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tthis._generate();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _generate() {\n\t\tlet graticule = geoGraticule();\n\n\t\tif (graticule) {\n\t\t\tif (this.get(\"clipExtent\")) {\n\t\t\t\tconst chart = this.chart;\n\t\t\t\tif (chart) {\n\t\t\t\t\tconst geoBounds = chart.geoBounds();\n\t\t\t\t\tif (geoBounds) {\n\t\t\t\t\t\tgraticule.extent([[geoBounds.left, geoBounds.bottom], [geoBounds.right, geoBounds.top]]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst step = this.get(\"step\", 10);\n\t\t\tgraticule.stepMinor([360, 360]);\n\t\t\tgraticule.stepMajor([step, step]);\n\t\t\tthis._dataItem.set(\"geometry\", graticule());\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;AA2BM,MAAO,wBAAwB,uLAAA,CAAA,gBAAa;IAAlD,aAAA;;QAQC,OAAA,cAAA,CAAA,IAAA,EAAA,aAAA;;;;mBAA2D,IAAI,CAAC,YAAY,CAAC,CAAA;;IAiD9E;IA/CW,YAAS;QAClB,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS;QAClC,IAAI,CAAC,SAAS;IACf;IAEO,kBAAe;QACrB,KAAK,CAAC;QAEN,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS;YACzB,IAAI,CAAC,SAAS;;QAGf,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe;YAE/B,IAAI,IAAI,CAAC,GAAG,CAAC,eAAe;gBAC3B,MAAM,QAAQ,IAAI,CAAC,KAAK;gBACxB,IAAI,OAAO;oBACV,MAAM,MAAM,CAAC,EAAE,CAAC,oBAAoB;wBACnC,IAAI,CAAC,SAAS;oBACf;;gBAED,IAAI,CAAC,SAAS;;;IAGjB;IAEU,YAAS;QAClB,IAAI,YAAY,CAAA,GAAA,wLAAA,CAAA,eAAY,AAAZ;QAEhB,IAAI,WAAW;YACd,IAAI,IAAI,CAAC,GAAG,CAAC,eAAe;gBAC3B,MAAM,QAAQ,IAAI,CAAC,KAAK;gBACxB,IAAI,OAAO;oBACV,MAAM,YAAY,MAAM,SAAS;oBACjC,IAAI,WAAW;wBACd,UAAU,MAAM,CAAC;4BAAC;gCAAC,UAAU,IAAI;gCAAE,UAAU,MAAM;6BAAC;4BAAE;gCAAC,UAAU,KAAK;gCAAE,UAAU,GAAG;6BAAC;yBAAC;;;;YAK1F,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ;YAC9B,UAAU,SAAS,CAAC;gBAAC;gBAAK;aAAI;YAC9B,UAAU,SAAS,CAAC;gBAAC;gBAAM;aAAK;YAChC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY;;IAEjC;;AAtDA,OAAA,cAAA,CAAA,iBAAA,aAAA;;;;WAAkC;;AAClC,OAAA,cAAA,CAAA,iBAAA,cAAA;;;;WAA0C,uLAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,MAAM,CAAC;QAAC,gBAAgB,SAAS;KAAC"}},
    {"offset": {"line": 1755, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapUtils.ts"],"sourcesContent":["import type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport * as $math from \"../../core/util/Math\";\nimport { geoCircle, geoCentroid, geoBounds, geoArea } from \"d3-geo\";\n\n/**\n * Returns a GeoJSON representation of a circle, suitable for use as `geometry` value\n * in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   geoPoint  Coordinates\n * @param   radius    Circle radius in degrees\n * @return            Polygon geometry\n */\nexport function getGeoCircle(geoPoint: IGeoPoint, radius: number): GeoJSON.Polygon {\n\treturn geoCircle().center([geoPoint.longitude, geoPoint.latitude]).radius(radius)();\n}\n\n/**\n * Returns geo centroid of a geometry\n */\nexport function getGeoCentroid(geometry: GeoJSON.GeometryObject): IGeoPoint {\n\tconst centroid = geoCentroid(geometry);\n\treturn { longitude: centroid[0], latitude: centroid[1] };\n}\n\n/**\n * Returns geo area of a geometry\n */\nexport function getGeoArea(geometry: GeoJSON.GeometryObject): number {\n\treturn geoArea(geometry);\n}\n\n/**\n * Returns bounds of a geometry\n */\nexport function getGeoBounds(geometry: GeoJSON.GeometryObject): { left: number, right: number, top: number, bottom: number } {\n\tconst bounds = geoBounds(geometry);\n\n\tif (bounds) {\n\t\tconst geoBounds = { left: bounds[0][0], right: bounds[1][0], top: bounds[1][1], bottom: bounds[0][1] };\n\t\tif (geoBounds.right < geoBounds.left) {\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\t\treturn geoBounds;\n\t}\n\treturn { left: 0, right: 0, top: 0, bottom: 0 };\n}\n\n/**\n * Returns a GeoJSON representation of a rectangle, suitable for use\n * as `geometry` value in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   north  North latitude\n * @param   east   East longitude\n * @param   south  South latitude\n * @param   west   West longitude\n * @return         polygon geometry\n */\nexport function getGeoRectangle(north: number, east: number, south: number, west: number): GeoJSON.MultiPolygon {\n\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\n\n\tif (west <= -180) {\n\t\twest = -179.9999;\n\t}\n\tif (south <= -90) {\n\t\tsouth = -89.9999;\n\t}\n\tif (north >= 90) {\n\t\tnorth = 89.9999;\n\t}\n\tif (east >= 180) {\n\t\teast = 179.9999;\n\t}\n\n\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\n\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\n\t\tlet surface: Array<[number, number]> = [];\n\t\tmultiPolygon.push([surface]);\n\n\t\tif (ln + stepLong > east) {\n\t\t\tstepLong = east - ln;\n\t\t}\n\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n\t\t\tsurface.push([ll, north]);\n\t\t}\n\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\n\t\t\tsurface.push([ln + stepLong, lt]);\n\t\t}\n\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n\t\t\tsurface.push([ll, south]);\n\t\t}\n\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\n\t\t\tsurface.push([ln, lt]);\n\t\t}\n\t}\n\n\treturn { type: \"MultiPolygon\", coordinates: multiPolygon };\n}\n\n/**\n * Update longitudes and latitudes that wrap around -180/180 and -90/90 values.\n * \n * @param   geoPoint  Input coordinates\n * @return            Updated coordinates\n */\nexport function normalizeGeoPoint(geoPoint: IGeoPoint): IGeoPoint {\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\n\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n\tif (Math.abs(latitude180) > 90) {\n\t\tlongitude = wrapAngleTo180(longitude + 180);\n\t}\n\n\tgeoPoint.longitude = longitude;\n\tgeoPoint.latitude = latitude;\n\n\treturn geoPoint;\n}\n\n/**\n * @ignore\n */\nexport function wrapAngleTo180(angle: number): number {\n\tangle = angle % 360;\n\n\tif (angle > 180) {\n\t\tangle -= 360;\n\t}\n\tif (angle < -180) {\n\t\tangle += 360;\n\t}\n\n\treturn angle;\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1890, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1895, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapChart.ts"],"sourcesContent":["import type { MapSeries } from \"./MapSeries\";\nimport type { MapPointSeries } from \"./MapPointSeries\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { Time } from \"../../core/util/Animation\";\nimport type { ZoomControl } from \"./ZoomControl\";\nimport type { Animation } from \"../../core/util/Entity\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { IMapPolygonSeriesDataItem } from \"./MapPolygonSeries\";\n\nimport { MapChartDefaultTheme } from \"./MapChartDefaultTheme\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings, ISerialChartEvents } from \"../../core/render/SerialChart\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { geoPath } from \"d3-geo\";\nimport { Color } from \"../../core/util/Color\";\nimport { registry } from \"../../core/Registry\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\n\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { ISpritePointerEvent } from \"../../core/render/Sprite\";\n\nexport interface IMapChartSettings extends ISerialChartSettings {\n\n\t/**\n\t * A projection to use when plotting the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Projections} for more info\n\t */\n\tprojection?: GeoProjection;\n\n\t/**\n\t * Current zoom level.\n\t */\n\tzoomLevel?: number;\n\n\t/**\n\t * current x position of a map\n\t */\n\ttranslateX?: number;\n\n\t/**\n\t * current y position of a map\n\t */\n\ttranslateY?: number;\n\n\t/**\n\t * Vertical centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationY?: number;\n\n\t/**\n\t * Horizontal centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationX?: number;\n\n\t/**\n\t * Depth centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationZ?: number;\n\n\t/**\n\t * Highest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 32\n\t */\n\tmaxZoomLevel?: number;\n\n\t/**\n\t * Lowest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 1\n\t */\n\tminZoomLevel?: number;\n\n\t/**\n\t * Increment zoom level by `zoomStep` when user zooms in via [[ZoomControl]] or\n\t * API.\n\t *\n\t * @default 2\n\t */\n\tzoomStep?: number;\n\n\t/**\n\t * Defines what happens when map is being dragged horizontally.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateX\"\n\t */\n\tpanX?: \"none\" | \"rotateX\" | \"translateX\";\n\n\t/**\n\t * Defines what happens when map is being dragged vertically.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateY\"\n\t */\n\tpanY?: \"none\" | \"rotateY\" | \"translateY\";\n\n\t/**\n\t * Enables pinch-zooming of the map on multi-touch devices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Pinch_zoom} for more info\n\t * @default true\n\t */\n\tpinchZoom?: boolean;\n\n\t/**\n\t * Defines what happens when horizontal mouse wheel (only some mouses do have such a wheel)\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"none\"\n\t */\n\twheelX?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Defines what happens when mouse wheel is turned.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"zoom\"\n\t */\n\twheelY?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Sensitivity of a mouse wheel.\n\t *\n\t * NOTE: this setting is ignored when `wheelX` or `wheelY` is set to `\"zoom\"`.\n\t *\n\t * @default 1\n\t */\n\twheelSensitivity?: number;\n\n\t/**\n\t * Duration of mouse-wheel action animation, in milliseconds.\n\t *\n\t * NOTE: this setting is ignored when `wheelX` or `wheelY` is set to `\"zoom\"`.\n\t */\n\twheelDuration?: number;\n\n\t/**\n\t * An easing function to use for mouse wheel action animations.\n\t *\n\t * NOTE: this setting is ignored when `wheelX` or `wheelY` is set to `\"zoom\"`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\twheelEasing?: (t: Time) => Time;\n\n\t/**\n\t * Duration of zoom/pan animations, in milliseconds.\n\t */\n\tanimationDuration?: number;\n\n\t/**\n\t * An easing function to use for zoom/pan animations.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\tanimationEasing?: (t: Time) => Time;\n\n\n\t/**\n\t * A [[ZoomControl]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Zoom_control} for more info\n\t */\n\tzoomControl?: ZoomControl;\n\n\t/**\n\t * Initial/home zoom level.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeZoomLevel?: number;\n\n\t/**\n\t * Initial/home rotationX.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeRotationX?: number;\n\n\t/**\n\t * Initial/home rotationY.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeRotationY?: number;\n\n\t/**\n\t * Initial coordinates to center map on load or `goHome()` call.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeGeoPoint?: IGeoPoint;\n\n\t/**\n\t * How much of a map can go outside the viewport.\n\t *\n\t * @default 0.4\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning_outside_viewport} for more info\n\t */\n\tmaxPanOut?: number;\n\n\t/**\n\t * Setting `true` means that the map will automatically center itself (or go\n\t * to `homeGeoPoint` if set) when fully zoomed out.\n\t *\n\t * `false` would mean that zoom out will be centered around the mouse\n\t * cursor (when zooming using wheel), or current map position.\n\t * \n\t * @default true\n\t * @since 5.2.1\n\t */\n\tcenterMapOnZoomOut?: boolean;\n\n}\n\nexport interface IMapChartPrivate extends ISerialChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tgeoPath: GeoPath;\n\n\t/**\n\t * @ignore\n\t */\n\tmapScale: number;\n\n}\n\n\nexport interface IMapChartEvents extends ISerialChartEvents {\n\n\t/**\n\t * Invoked when geo bounds of the map change, usually after map is\n\t * initialized.\n\t */\n\tgeoboundschanged: {};\n\n}\n\n\nexport class MapChart extends SerialChart {\n\tpublic static className: string = \"MapChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([MapChart.className]);\n\n\tdeclare public _settings: IMapChartSettings;\n\tdeclare public _privateSettings: IMapChartPrivate;\n\tdeclare public _seriesType: MapSeries;\n\tdeclare public _events: IMapChartEvents;\n\n\tprotected _downTranslateX: number | undefined;\n\tprotected _downTranslateY: number | undefined;\n\tprotected _downRotationX: number | undefined;\n\tprotected _downRotationY: number | undefined;\n\tprotected _downRotationZ: number | undefined;\n\tprotected _pLat: number = 0;\n\tprotected _pLon: number = 0;\n\n\tprotected _movePoints: { [index: number]: IPoint } = {};\n\tprotected _downZoomLevel: number = 1;\n\tprotected _doubleDownDistance: number = 0;\n\n\tprotected _dirtyGeometries: boolean = false;\n\tprotected _geometryColection: GeoJSON.GeometryCollection = { type: \"GeometryCollection\", geometries: [] };\n\n\tpublic _centerLocation: [number, number] | null = null;\n\n\tprotected _za?: Animation<this[\"_settings\"][\"zoomLevel\"]>;\n\tprotected _rxa?: Animation<this[\"_settings\"][\"rotationX\"]>;\n\tprotected _rya?: Animation<this[\"_settings\"][\"rotationY\"]>;\n\tprotected _txa?: Animation<this[\"_settings\"][\"translateX\"]>;\n\tprotected _tya?: Animation<this[\"_settings\"][\"translateY\"]>;\n\n\tprotected _mapBounds = [[0, 0], [0, 0]];\n\n\tprotected _geoCentroid: IGeoPoint = { longitude: 0, latitude: 0 };\n\tprotected _geoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\tprotected _prevGeoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\tprotected _dispatchBounds: boolean = false;\n\n\tprotected _wheelDp: IDisposer | undefined;\n\n\tprotected _pw?: number;\n\tprotected _ph?: number;\n\n\tprotected _mapFitted: boolean = false;\n\n\tprotected _centerX: number = 0;\n\tprotected _centerY: number = 0;\n\n\tprotected _makeGeoPath() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst path = geoPath();\n\t\tpath.projection(projection);\n\t\tthis.setPrivateRaw(\"geoPath\", path);\n\t}\n\n\t/**\n\t * Returns a geoPoint of the current zoom position.\n\t * \n\t * You can later use it to restore zoom position, e.g.: `chart.zoomToGeoPoint(geoPoint, zoomLevel, true)`.\n\t *\n\t * @since 5.2.19\n\t */\n\tpublic geoPoint() {\n\t\treturn this.invert(this.seriesContainer.toGlobal({ x: this.width() / 2, y: this.height() / 2 }));\n\t}\n\n\t/**\n\t * Returns coordinates to geographical center of the map.\n\t */\n\tpublic geoCentroid() {\n\t\treturn this._geoCentroid;\n\t}\n\n\t/**\n\t * Returns geographical bounds of the map.\n\t */\n\tpublic geoBounds() {\n\t\treturn this._geoBounds;\n\t}\n\n\tprotected _handleSetWheel() {\n\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst chartContainer = this.chartContainer;\n\n\t\tif (wheelX != \"none\" || wheelY != \"none\") {\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\n\t\t\tthis._wheelDp = chartContainer.events.on(\"wheel\", (event) => {\n\t\t\t\tconst wheelEasing = this.get(\"wheelEasing\")!;\n\t\t\t\tconst wheelSensitivity = this.get(\"wheelSensitivity\", 1);\n\t\t\t\tconst wheelDuration = this.get(\"wheelDuration\", 0);\n\n\t\t\t\tconst wheelEvent = event.originalEvent;\n\n\t\t\t\t// Ignore wheel event if it is happening on a non-chart element, e.g. if\n\t\t\t\t// some page element is over the chart.\n\t\t\t\tif ($utils.isLocalEvent(wheelEvent, this)) {\n\t\t\t\t\twheelEvent.preventDefault();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst point = chartContainer._display.toLocal(event.point);\n\n\t\t\t\tif ((wheelY == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaY, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t\tif ((wheelX == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaX, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tthis._disposers.push(this._wheelDp);\n\t\t}\n\t\telse {\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst w = this.innerWidth();\n\t\tconst h = this.innerHeight();\n\n\t\tconst previousGeometries = this._geometryColection.geometries;\n\n\t\tif (this.isDirty(\"projection\")) {\n\t\t\tthis._makeGeoPath();\n\t\t\tthis.markDirtyProjection();\n\t\t\tthis._fitMap();\n\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tif (projection.rotate) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t}\n\n\t\t\tlet prev = this._prevSettings.projection;\n\t\t\tif (prev && prev != projection) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\t\t\t\tif (prev.invert) {\n\t\t\t\t\tlet centerLocation = prev.invert([hw, hh]);\n\n\t\t\t\t\tif (centerLocation) {\n\n\t\t\t\t\t\tlet xy = projection(centerLocation);\n\t\t\t\t\t\tif (xy) {\n\t\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n\t\t\tthis._handleSetWheel();\n\t\t}\n\t\tif (this._dirtyGeometries) {\n\t\t\tthis._geometryColection.geometries = [];\n\n\t\t\tthis.series.each((series) => {\n\t\t\t\t$array.pushAll(this._geometryColection.geometries, series._geometries);\n\t\t\t})\n\n\n\t\t\tthis._fitMap();\n\t\t}\n\n\t\tif (previousGeometries.length != 0 && (w != this._pw || h != this._ph || this._dirtyGeometries)) {\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\n\t\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\t\tconst newScale = projection.scale();\n\n\t\t\t\tthis.setPrivateRaw(\"mapScale\", newScale);\n\t\t\t\tprojection.scale(newScale * this.get(\"zoomLevel\", 1));\n\n\t\t\t\tif (this._centerLocation) {\n\t\t\t\t\tlet xy = projection(this._centerLocation);\n\t\t\t\t\tif (xy) {\n\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\n\t\t\t\t\t\tthis._centerX = translate[0];\n\t\t\t\t\t\tthis._centerY = translate[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.markDirtyProjection();\n\n\t\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\t\tthis._mapBounds = geoPath.bounds(this._geometryColection);\n\t\t\t}\n\t\t}\n\n\t\tthis._pw = w;\n\t\tthis._ph = h;\n\n\t\tif (this.isDirty(\"zoomControl\")) {\n\t\t\tconst previous = this._prevSettings.zoomControl;\n\t\t\tconst zoomControl = this.get(\"zoomControl\")!;\n\t\t\tif (zoomControl !== previous) {\n\t\t\t\tthis._disposeProperty(\"zoomControl\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (zoomControl) {\n\t\t\t\t\tzoomControl.setPrivate(\"chart\", this);\n\t\t\t\t\tthis.children.push(zoomControl);\n\t\t\t\t}\n\n\t\t\t\tthis.setRaw(\"zoomControl\", zoomControl);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"zoomLevel\")) {\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tthis.markDirtyProjection();\n\n\t\t\tthis.series.each((series) => {\n\t\t\t\tif (series.isType<MapPointSeries>(\"MapPointSeries\")) {\n\t\t\t\t\tif (series.get(\"autoScale\")) {\n\t\t\t\t\t\t$array.each(series.dataItems, (dataItem) => {\n\t\t\t\t\t\t\tconst bullets = dataItem.bullets;\n\t\t\t\t\t\t\tif (bullets) {\n\t\t\t\t\t\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\t\t\t\t\t\tif (sprite) {\n\t\t\t\t\t\t\t\t\t\tsprite.set(\"scale\", this.get(\"zoomLevel\"));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (this.isDirty(\"translateX\") || this.isDirty(\"translateY\")) {\n\t\t\tprojection.translate([this.get(\"translateX\", this.width() / 2), this.get(\"translateY\", this.height() / 2)])\n\t\t\tthis.markDirtyProjection();\n\t\t}\n\n\t\tif (projection.rotate) {\n\t\t\tif (this.isDirty(\"rotationX\") || this.isDirty(\"rotationY\") || this.isDirty(\"rotationZ\")) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t\tthis.markDirtyProjection();\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"pinchZoom\") || this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\tthis._setUpTouch();\n\t\t}\n\t}\n\n\n\tprotected _fitMap() {\n\t\tconst projection = this.get(\"projection\")!;\n\n\t\tlet w = this.innerWidth();\n\t\tlet h = this.innerHeight();\n\n\t\tif (w > 0 && h > 0) {\n\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\tthis.setPrivateRaw(\"mapScale\", projection.scale());\n\n\t\t\tconst translate = projection.translate();\n\n\t\t\tthis.setRaw(\"translateX\", translate[0]);\n\t\t\tthis.setRaw(\"translateY\", translate[1]);\n\n\t\t\tthis._centerX = translate[0];\n\t\t\tthis._centerY = translate[1];\n\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tthis._mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tthis._geoCentroid = $mapUtils.getGeoCentroid(this._geometryColection);\n\n\t\t\tconst bounds = $mapUtils.getGeoBounds(this._geometryColection);\n\t\t\tthis._geoBounds = bounds;\n\n\t\t\tif (this._geometryColection.geometries.length > 0) {\n\n\t\t\t\tbounds.left = $math.round(this._geoBounds.left, 3);\n\t\t\t\tbounds.right = $math.round(this._geoBounds.right, 3);\n\t\t\t\tbounds.top = $math.round(this._geoBounds.top, 3);\n\t\t\t\tbounds.bottom = $math.round(this._geoBounds.bottom, 3);\n\n\t\t\t\tconst prevGeoBounds = this._prevGeoBounds;\n\n\t\t\t\tif (prevGeoBounds && !$utils.sameBounds(bounds, prevGeoBounds)) {\n\t\t\t\t\tthis._dispatchBounds = true;\n\t\t\t\t\tthis._prevGeoBounds = bounds;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._mapFitted = true;\n\t\t}\n\t}\n\n\t/**\n\t * Returns geographical coordinates for calculated or manual center of the\n\t * map.\n\t */\n\tpublic homeGeoPoint(): IGeoPoint {\n\t\tlet homeGeoPoint = this.get(\"homeGeoPoint\");\n\t\tif (!homeGeoPoint) {\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tconst bounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tconst left = bounds[0][0];\n\t\t\tconst top = bounds[0][1];\n\n\t\t\tconst right = bounds[1][0];\n\t\t\tconst bottom = bounds[1][1];\n\n\t\t\thomeGeoPoint = this.invert({ x: left + (right - left) / 2, y: top + (bottom - top) / 2 });\n\t\t}\n\t\treturn homeGeoPoint;\n\t}\n\n\t/**\n\t * Repositions the map to the \"home\" zoom level and center coordinates.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Resetting_position_level} for more info\n\t * @param  duration  Animation duration in milliseconds\n\t */\n\tpublic goHome(duration?: number) {\n\t\tthis.zoomToGeoPoint(this.homeGeoPoint(), this.get(\"homeZoomLevel\", 1), true, duration, this.get(\"homeRotationX\"), this.get(\"homeRotationY\"));\n\t}\n\n\tpublic _updateChildren() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tif (projection.invert) {\n\t\t\tlet w = this.innerWidth();\n\t\t\tlet h = this.innerHeight();\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tthis._centerLocation = projection.invert([this.innerWidth() / 2, this.innerHeight() / 2]);\n\t\t\t}\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tif (this._dispatchBounds) {\n\t\t\tthis._dispatchBounds = false;\n\t\t\tconst type = \"geoboundschanged\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _setUpTouch(): void {\n\t\tif (!this.chartContainer._display.cancelTouch) {\n\t\t\tthis.chartContainer._display.cancelTouch = (this.get(\"pinchZoom\") || this.get(\"panX\") || this.get(\"panY\")) ? true : false;\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyGeometries() {\n\t\tthis._dirtyGeometries = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.series.each((series) => {\n\t\t\tseries.markDirtyProjection();\n\t\t})\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(MapChartDefaultTheme.new(this._root));\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"map\"]);\n\n\t\tthis.children.push(this.bulletsContainer);\n\n\t\tsuper._afterNew();\n\n\t\tthis._makeGeoPath();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\n\t\tif (this.get(\"translateX\") == null) {\n\t\t\tthis.set(\"translateX\", this.width() / 2);\n\t\t}\n\t\tif (this.get(\"translateY\") == null) {\n\t\t\tthis.set(\"translateY\", this.height() / 2);\n\t\t}\n\n\t\t// Setting trasnparent background so that full body of the plot container\n\t\t// is interactive\n\t\tthis.chartContainer.set(\"interactive\", true);\n\t\tthis.chartContainer.set(\"interactiveChildren\", false);\n\t\tthis.chartContainer.set(\"background\", Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"map\", \"background\"],\n\t\t\tfill: Color.fromHex(0x000000),\n\t\t\tfillOpacity: 0\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handleChartDown(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handleChartUp(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tthis._handleChartMove(event);\n\t\t}));\n\n\t\tlet license = false;\n\t\tfor (let i = 0; i < registry.licenses.length; i++) {\n\t\t\tif (registry.licenses[i].match(/^AM5M.{5,}/i)) {\n\t\t\t\tlicense = true;\n\t\t\t}\n\t\t}\n\t\tif (!license) {\n\t\t\tthis._root._showBranding();\n\t\t}\n\t\telse {\n\t\t\tthis._root._licenseApplied();\n\t\t}\n\n\t\tthis._setUpTouch();\n\n\t}\n\n\tprotected _handleChartDown(event: ISpritePointerEvent) {\n\n\t\tthis._downZoomLevel = this.get(\"zoomLevel\", 1);\n\t\tconst downPoints = this.chartContainer._downPoints;\n\n\t\tlet count = $object.keys(downPoints).length;\n\t\tif (count == 1) {\n\t\t\t// workaround to solve a problem when events are added to some children of chart container (rotation stops working)\n\t\t\tlet downPoint = downPoints[1];\n\t\t\tif (!downPoint) {\n\t\t\t\tdownPoint = downPoints[0];\n\t\t\t}\t\t\t\n\n\t\t\tif (downPoint && (downPoint.x == event.point.x && downPoint.y == event.point.y)) {\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (count > 0) {\n\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\tconst downId = this.chartContainer._getDownPointId();\n\t\t\tif (downId) {\n\t\t\t\tlet movePoint = this._movePoints[downId];\n\t\t\t\tif (movePoint) {\n\t\t\t\t\tthis.chartContainer._downPoints[downId] = movePoint;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (count == 0) {\n\t\t\tlet bg = this.chartContainer.get(\"background\");\n\t\t\tif (bg) {\n\t\t\t\tbg.events.enableType(\"click\");\n\t\t\t}\n\n\t\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\n\t\t\t\tif (this._za) {\n\t\t\t\t\tthis._za.stop();\n\t\t\t\t}\n\t\t\t\tif (this._txa) {\n\t\t\t\t\tthis._txa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._tya) {\n\t\t\t\t\tthis._tya.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rxa) {\n\t\t\t\t\tthis._rxa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rya) {\n\t\t\t\t\tthis._rya.stop();\n\t\t\t\t}\n\n\t\t\t\tconst downPoint = this.chartContainer._display.toLocal(event.point);\n\t\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\t\tlet projection = this.get(\"projection\")!;\n\n\t\t\t\tif (projection.invert) {\n\t\t\t\t\tlet l0 = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\tlet l1 = projection.invert([downPoint.x + 1, downPoint.y + 1]);\n\t\t\t\t\tif (l0 && l1) {\n\t\t\t\t\t\tthis._pLon = Math.abs(l1[0] - l0[0]);\n\t\t\t\t\t\tthis._pLat = Math.abs(l1[1] - l0[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts screen coordinates (X and Y) within chart to latitude and\n\t * longitude.\n\t * \n\t * @param  point  Screen coordinates\n\t * @return        Geographical coordinates\n\t */\n\tpublic invert(point: IPoint): IGeoPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\n\t\tif (projection.invert) {\n\t\t\tconst ll = projection.invert([point.x, point.y]);\n\t\t\tif (ll) {\n\t\t\t\treturn { longitude: ll[0], latitude: ll[1] };\n\t\t\t}\n\t\t}\n\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\t/**\n\t * Converts latitude/longitude to screen coordinates (X and Y).\n\t * \n\t * @param  point  Geographical coordinates\n\t * @param  rotationX  X rotation of a map if different from current\n\t * @param  rotationY  Y rotation of a map if different from current\n\t * \n\t * @return Screen coordinates\n\t */\n\tpublic convert(point: IGeoPoint, rotationX?: number, rotationY?: number): IPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\t\tlet xy;\n\n\t\tif (!projection.rotate) {\n\t\t\trotationX = undefined;\n\t\t\trotationY = undefined;\n\t\t}\n\n\t\tif (rotationX != null || rotationY != null) {\n\t\t\tif (rotationX == null) {\n\t\t\t\trotationX = 0;\n\t\t\t}\n\t\t\tif (rotationY == null) {\n\t\t\t\trotationY = 0;\n\t\t\t}\n\t\t\tlet rotation = projection.rotate();\n\t\t\tprojection.rotate([rotationX, rotationY, 0]);\n\t\t\txy = projection([point.longitude, point.latitude]);\n\t\t\tprojection.rotate(rotation);\n\t\t}\n\t\telse {\n\t\t\txy = projection([point.longitude, point.latitude]);\n\t\t}\n\n\t\tif (xy) {\n\t\t\treturn { x: xy[0], y: xy[1] };\n\t\t}\n\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\tprotected _handleChartUp(_event: ISpritePointerEvent) {\n\t\tthis.chartContainer._downPoints = {}\n\t}\n\n\tprotected _handlePinch() {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet i = 0;\n\t\tlet downPoints: Array<IPoint> = [];\n\t\tlet movePoints: Array<IPoint> = [];\n\n\t\t$object.each(chartContainer._downPoints, (k, point) => {\n\t\t\tdownPoints[i] = point;\n\t\t\tlet movePoint = this._movePoints[k];\n\t\t\tif (movePoint) {\n\t\t\t\tmovePoints[i] = movePoint;\n\t\t\t}\n\t\t\ti++;\n\t\t});\n\n\t\tif (downPoints.length > 1 && movePoints.length > 1) {\n\t\t\tconst display = chartContainer._display;\n\n\t\t\tlet downPoint0 = downPoints[0];\n\t\t\tlet downPoint1 = downPoints[1];\n\n\t\t\tlet movePoint0 = movePoints[0];\n\t\t\tlet movePoint1 = movePoints[1];\n\n\t\t\tif (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n\n\t\t\t\tdownPoint0 = display.toLocal(downPoint0);\n\t\t\t\tdownPoint1 = display.toLocal(downPoint1);\n\n\t\t\t\tmovePoint0 = display.toLocal(movePoint0);\n\t\t\t\tmovePoint1 = display.toLocal(movePoint1);\n\n\t\t\t\tlet initialDistance = Math.hypot(downPoint1.x - downPoint0.x, downPoint1.y - downPoint0.y);\n\t\t\t\tlet currentDistance = Math.hypot(movePoint1.x - movePoint0.x, movePoint1.y - movePoint0.y);\n\n\t\t\t\tlet level = currentDistance / initialDistance * this._downZoomLevel;\n\t\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\n\n\t\t\t\tlet moveCenter = { x: movePoint0.x + (movePoint1.x - movePoint0.x) / 2, y: movePoint0.y + (movePoint1.y - movePoint0.y) / 2 };\n\t\t\t\tlet downCenter = { x: downPoint0.x + (downPoint1.x - downPoint0.x) / 2, y: downPoint0.y + (downPoint1.y - downPoint0.y) / 2 };\n\n\t\t\t\tlet tx = this._downTranslateX || 0;\n\t\t\t\tlet ty = this._downTranslateY || 0;\n\n\t\t\t\tlet zoomLevel = this._downZoomLevel;\n\n\t\t\t\tlet xx = moveCenter.x - (- tx + downCenter.x) / zoomLevel * level;\n\t\t\t\tlet yy = moveCenter.y - (- ty + downCenter.y) / zoomLevel * level;\n\n\t\t\t\tthis.set(\"zoomLevel\", level);\n\t\t\t\tthis.set(\"translateX\", xx);\n\t\t\t\tthis.set(\"translateY\", yy);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleChartMove(event: ISpritePointerEvent) {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet downPoint = chartContainer._getDownPoint();\n\t\tconst downPointId = chartContainer._getDownPointId();\n\t\tconst originalEvent = event.originalEvent as any;\n\n\t\tconst pointerId = originalEvent.pointerId;\n\n\t\tif (this.get(\"pinchZoom\")) {\n\t\t\tif (pointerId) {\n\t\t\t\tthis._movePoints[pointerId] = event.point;\n\n\t\t\t\tif ($object.keys(chartContainer._downPoints).length > 1) {\n\t\t\t\t\tthis._handlePinch();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (downPointId && pointerId && pointerId != downPointId) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (downPoint) {\n\t\t\t\tconst panX = this.get(\"panX\");\n\t\t\t\tconst panY = this.get(\"panY\");\n\t\t\t\tif (panX != \"none\" || panY != \"none\") {\n\t\t\t\t\tconst display = chartContainer._display;\n\t\t\t\t\tlet local = display.toLocal(event.point);\n\t\t\t\t\tdownPoint = display.toLocal(downPoint);\n\n\t\t\t\t\tlet x = this._downTranslateX;\n\t\t\t\t\tlet y = this._downTranslateY;\n\n\t\t\t\t\tif (Math.hypot(downPoint.x - local.x, downPoint.y - local.y) > 5) {\n\t\t\t\t\t\tlet bg = chartContainer.get(\"background\");\n\t\t\t\t\t\tif (bg) {\n\t\t\t\t\t\t\tbg.events.disableType(\"click\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(x) && $type.isNumber(y)) {\n\t\t\t\t\t\t\tlet projection = this.get(\"projection\")!;\n\t\t\t\t\t\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\t\t\t\t\t\tconst maxPanOut = this.get(\"maxPanOut\", 0.4);\n\t\t\t\t\t\t\tconst bounds = this._mapBounds;\n\n\t\t\t\t\t\t\tconst w = this.width();\n\t\t\t\t\t\t\tconst h = this.height();\n\n\t\t\t\t\t\t\tconst ww = bounds[1][0] - bounds[0][0];\n\t\t\t\t\t\t\tconst hh = bounds[1][1] - bounds[0][1];\n\n\t\t\t\t\t\t\tif (panX == \"translateX\") {\n\t\t\t\t\t\t\t\tx += local.x - downPoint.x;\n\n\t\t\t\t\t\t\t\tconst cx = w / 2 - (w / 2 - this._centerX) * zoomLevel;\n\t\t\t\t\t\t\t\tx = Math.min(x, cx + ww * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t\tx = Math.max(x, cx - ww * maxPanOut * zoomLevel);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (panY == \"translateY\") {\n\t\t\t\t\t\t\t\ty += local.y - downPoint.y;\n\t\t\t\t\t\t\t\tconst cy = h / 2 - (h / 2 - this._centerY) * zoomLevel;\n\t\t\t\t\t\t\t\ty = Math.min(y, cy + hh * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t\ty = Math.max(y, cy - hh * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.set(\"translateX\", x);\n\t\t\t\t\t\t\tthis.set(\"translateY\", y);\n\n\t\t\t\t\t\t\tif (projection.invert) {\n\t\t\t\t\t\t\t\tlet downLocation = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\t\t\t\tif (location && downLocation) {\n\t\t\t\t\t\t\t\t\tif (panX == \"rotateX\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationX\", this._downRotationX! - (downPoint.x - local.x) * this._pLon);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (panY == \"rotateY\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationY\", this._downRotationY! + (downPoint.y - local.y) * this._pLat);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleWheelRotateY(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rya = this.animate({ key: \"rotationY\", to: this.get(\"rotationY\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelRotateX(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rxa = this.animate({ key: \"rotationX\", to: this.get(\"rotationX\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelZoom(delta: number, point: IPoint) {\n\t\tlet step = this.get(\"zoomStep\", 2);\n\t\tlet zoomLevel = this.get(\"zoomLevel\", 1);\n\t\tlet newZoomLevel = zoomLevel;\n\t\tif (delta > 0) {\n\t\t\tnewZoomLevel = zoomLevel / step;\n\t\t}\n\t\telse if (delta < 0) {\n\t\t\tnewZoomLevel = zoomLevel * step;\n\t\t}\n\n\t\tif (newZoomLevel != zoomLevel) {\n\t\t\tthis.zoomToPoint(point, newZoomLevel)\n\t\t}\n\t}\n\n\t/**\n\t * Zoom the map to geographical bounds.\n\t *\n\t * @param  geoBounds  Bounds\n\t * @param  duration   Animation duration in milliseconds\n\t * @param  rotationX  X rotation of a map at the end of zoom\n\t * @param  rotationY  Y rotation of a map at the end of zoom\n\t */\n\tpublic zoomToGeoBounds(geoBounds: { left: number, right: number, top: number, bottom: number }, duration?: number, rotationX?: number, rotationY?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\tif (geoBounds.right < geoBounds.left) {\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\n\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\tconst mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\tlet p0 = this.convert({ longitude: geoBounds.left, latitude: geoBounds.top }, rotationX, rotationY);\n\t\tlet p1 = this.convert({ longitude: geoBounds.right, latitude: geoBounds.bottom }, rotationX, rotationY);\n\n\t\tif (p0.y < mapBounds[0][1]) {\n\t\t\tp0.y = mapBounds[0][1];\n\t\t}\n\n\t\tif (p1.y > mapBounds[1][1]) {\n\t\t\tp1.y = mapBounds[1][1];\n\t\t}\n\n\t\tlet zl = this.get(\"zoomLevel\", 1);\n\n\t\tlet bounds = { left: p0.x, right: p1.x, top: p0.y, bottom: p1.y };\n\n\t\tlet seriesContainer = this.seriesContainer;\n\n\t\tlet zoomLevel = .9 * Math.min(seriesContainer.innerWidth() / (bounds.right - bounds.left) * zl, seriesContainer.innerHeight() / (bounds.bottom - bounds.top) * zl);\n\t\tlet x = bounds.left + (bounds.right - bounds.left) / 2;\n\t\tlet y = bounds.top + (bounds.bottom - bounds.top) / 2;\n\n\t\tlet geoPoint = this.invert({ x, y });\n\n\t\tif (rotationX != null || rotationY != null) {\n\t\t\tthis.rotate(rotationX, rotationY);\n\t\t}\n\n\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\n\t}\n\n\t/**\n\t * Zooms the map to specific screen point.\n\t *\n\t * @param  point    Point\n\t * @param  level    Zoom level\n\t * @param  center   Center the map\n\t * @param  duration Duration of the animation in milliseconds\n\t */\n\tpublic zoomToPoint(point: IPoint, level: number, center?: boolean, duration?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\tif (level) {\n\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\n\t\t}\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"animationDuration\", 0);\n\t\t}\n\t\tconst easing = this.get(\"animationEasing\");\n\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\tif (this.get(\"centerMapOnZoomOut\") && level == this.get(\"homeZoomLevel\", 1)) {\n\t\t\tpoint = this.convert(this.homeGeoPoint(), this.get(\"homeRotationX\"), this.get(\"homeRotationY\"));\n\t\t\tcenter = true;\n\t\t}\n\n\t\tlet x = point.x;\n\t\tlet y = point.y;\n\n\t\tlet tx = this.get(\"translateX\", 0);\n\t\tlet ty = this.get(\"translateY\", 0);\n\n\t\tlet cx = x;\n\t\tlet cy = y;\n\n\t\tif (center) {\n\t\t\tcx = this.width() / 2;\n\t\t\tcy = this.height() / 2;\n\t\t}\n\n\t\tlet xx = cx - ((x - tx) / zoomLevel * level);\n\t\tlet yy = cy - ((y - ty) / zoomLevel * level);\n\n\n\t\tthis._txa = this.animate({ key: \"translateX\", to: xx, duration: duration, easing: easing });\n\t\tthis._tya = this.animate({ key: \"translateY\", to: yy, duration: duration, easing: easing });\n\t\tthis._za = this.animate({ key: \"zoomLevel\", to: level, duration: duration, easing: easing });\n\n\t\tif (zoomLevel != level) {\n\t\t\tthis._root.readerAlert(this._t(\"Zoom level changed to %1\", this._root.locale, $type.numberToString(level)));\n\t\t}\n\n\t\treturn this._za;\n\t}\n\n\t/**\n\t * Zooms the map to specific geographical point.\n\t *\n\t * @param  geoPoint  Point\n\t * @param  level     Zoom level\n\t * @param  center    Center the map\n\t * @param  duration  Duration of the animation in milliseconds\n\t * @param  rotationX  X rotation of a map at the end of zoom\n\t * @param  rotationY  Y rotation of a map at the end of zoom\n\t * \n\t */\n\tpublic zoomToGeoPoint(geoPoint: IGeoPoint, level: number, center?: boolean, duration?: number, rotationX?: number, rotationY?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\n\t\tlet xy = this.convert(geoPoint, rotationX, rotationY);\n\n\t\tif (rotationX != null || rotationY != null) {\n\t\t\tthis.rotate(rotationX, rotationY, duration);\n\t\t}\n\n\t\tif (xy) {\n\t\t\treturn this.zoomToPoint(xy, level, center, duration);\n\t\t}\n\t}\n\n\tpublic rotate(rotationX?: number, rotationY?: number, duration?: number) {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tif (!projection.rotate) {\n\t\t}\n\t\telse {\n\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\tduration = this.get(\"animationDuration\", 0);\n\t\t\t}\n\n\t\t\tconst easing = this.get(\"animationEasing\");\n\t\t\tif (rotationX != null) {\n\t\t\t\tthis.animate({ key: \"rotationX\", to: rotationX, duration: duration, easing: easing });\n\t\t\t}\n\t\t\tif (rotationY != null) {\n\t\t\t\tthis.animate({ key: \"rotationY\", to: rotationY, duration: duration, easing: easing });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the map in.\n\t */\n\tpublic zoomIn(): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) * this.get(\"zoomStep\", 2));\n\t}\n\n\t/**\n\t * Zooms the map out.\n\t */\n\tpublic zoomOut(): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) / this.get(\"zoomStep\", 2));\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._dirtyGeometries = false;\n\t\tthis._mapFitted = false;\n\t}\n\n\t/**\n\t * Returns area of a mapPolygon in square pixels.\n\t */\n\tpublic getArea(dataItem: DataItem<IMapPolygonSeriesDataItem>): number {\n\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\tconst geometry = dataItem.get(\"geometry\");\n\t\tif (geometry) {\n\t\t\treturn geoPath.area(geometry);\n\t\t}\n\t\treturn 0;\n\t}\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2991, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2996, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapPolygon.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport * as $mapUtils from \"./MapUtils\";\nimport $polylabel from \"polylabel\";\nimport { geoArea } from \"d3-geo\";\n\nexport interface IMapPolygonSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.MultiPolygon | GeoJSON.Polygon;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n\n}\n\nexport interface IMapPolygonPrivate extends IGraphicsPrivate {\n}\n\n/**\n * A polygon in a [[MapPolygonSeries]].\n */\nexport class MapPolygon extends Graphics {\n\n\tdeclare public _settings: IMapPolygonSettings;\n\tdeclare public _privateSettings: IMapPolygonPrivate;\n\n\tpublic static className: string = \"MapPolygon\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapPolygon.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\t/**\n\t * A [[MapPolygonSeries]] polygon belongs to.\n\t */\n\tpublic series: MapPolygonSeries | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.series;\n\t\t\t\tif (series) {\n\t\t\t\t\tconst projection = series.projection();\n\t\t\t\t\tif (projection) {\n\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geoPath = series.geoPath();\n\n\t\t\t\t\tif (geoPath) {\n\t\t\t\t\t\tthis._clear = true;\n\n\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\tgeoPath.context(null);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (this.isHover()) {\n\t\t\t\t\t\t\tthis.showTooltip();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the geometrical center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic geoCentroid(): IGeoPoint {\n\t\tconst geometry = this.get(\"geometry\")!;\n\t\tif (geometry) {\n\t\t\treturn $mapUtils.getGeoCentroid(geometry);\n\t\t}\n\t\telse {\n\t\t\treturn { latitude: 0, longitude: 0 };\n\t\t}\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the visual center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic visualCentroid(): IGeoPoint {\n\n\t\tlet biggestArea = 0;\n\t\tlet coordinates: number[][][] = [];\n\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tif (geometry.type == \"Polygon\") {\n\t\t\t\tcoordinates = geometry.coordinates as number[][][];\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPolygon\") {\n\t\t\t\tfor (let i = 0; i < geometry.coordinates.length; i++) {\n\t\t\t\t\tlet coords = geometry.coordinates[i] as number[][][];\n\t\t\t\t\tlet area = geoArea({ type: \"Polygon\", coordinates: coords });\n\t\t\t\t\tif (area > biggestArea) {\n\t\t\t\t\t\tcoordinates = coords;\n\t\t\t\t\t\tbiggestArea = area;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(coordinates){\n\t\t\t\tlet center = $polylabel(coordinates as number[][][]);\n\t\t\t\treturn { longitude: center[0], latitude: center[1] };\n\t\t\t}\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tconst series = this.series;\n\n\t\tif (series) {\n\t\t\tconst projection = series.projection();\n\t\t\tif (projection) {\n\t\t\t\tconst geoPoint = this.visualCentroid();\n\t\t\t\tconst xy = projection([geoPoint.longitude, geoPoint.latitude]);\n\n\t\t\t\tif (xy) {\n\t\t\t\t\treturn { x: xy[0], y: xy[1] }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { x: 0, y: 0 };\n\t}\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3158, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/MapPolygonSeries.ts"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { Animation } from \"../../core/util/Entity\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $mapUtils from \"./MapUtils\";\n\n\n\nexport interface IMapPolygonSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPolygonSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapPolygon]] object.\n\t */\n\tmapPolygon: MapPolygon;\n\n\t/**\n\t * GeoJSON geometry of the polygon.\n\t */\n\tgeometry?: GeoJSON.Polygon | GeoJSON.MultiPolygon;\n}\n\nexport interface IMapPolygonSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * If set to `true`, the order of coordinates in GeoJSON will be flipped.\n\t *\n\t * Some GeoJSON software produces those in reverse order, so if your custom\n\t * map appears garbled, try this setting.\n\t * \n\t * @default false\n\t * @since 5.2.42\n\t */\n\treverseGeodata?: boolean;\n\n}\n\n/**\n * Creates a map series for displaying polygons.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/} for more info\n * @important\n */\nexport class MapPolygonSeries extends MapSeries {\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapPolygon(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapPolygon {\n\t\tconst mapPolygon = this.children.push(this.mapPolygons.make());\n\t\tmapPolygon._setDataItem(dataItem);\n\t\tthis.mapPolygons.push(mapPolygon);\n\t\treturn mapPolygon;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all polygons in series.\n\t *\n\t * `mapPolygons.template` can also be used to configure polygons.\n\t *\n\t * @default new ListTemplate<MapPolygon>\n\t */\n\tpublic readonly mapPolygons: ListTemplate<MapPolygon> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapPolygon._new(this._root, {}, [this.mapPolygons.template])\n\t);\n\n\tpublic static className: string = \"MapPolygonSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPolygonSeries.className]);\n\n\tdeclare public _settings: IMapPolygonSeriesSettings;\n\tdeclare public _privateSettings: IMapPolygonSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPolygonSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Polygon\", \"MultiPolygon\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tthis.mapPolygons.template.set(\"fill\", this.get(\"fill\"));\n\t\t}\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapPolygons.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (!mapPolygon) {\n\t\t\tmapPolygon = this.makeMapPolygon(dataItem);\n\t\t}\n\n\t\tdataItem.set(\"mapPolygon\", mapPolygon);\n\t\tlet geometry = dataItem.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tif (this.get(\"reverseGeodata\")) {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates) {\n\t\t\t\t\tfor (let x = 0; x < geometry.coordinates.length; x++) {\n\t\t\t\t\t\tif (geometry.type == \"MultiPolygon\") {\n\t\t\t\t\t\t\tfor (let y = 0; y < geometry.coordinates[x].length; y++) {\n\t\t\t\t\t\t\t\tgeometry.coordinates[x][y].reverse()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tgeometry.coordinates[x].reverse()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapPolygon.set(\"geometry\", geometry);\n\t\t}\n\n\t\tmapPolygon.series = this;\n\n\t\tthis._addGeometry(dataItem.get(\"geometry\"), this);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tthis.mapPolygons.removeValue(mapPolygon);\n\t\t\tmapPolygon.dispose();\n\t\t}\n\t\tthis._removeGeometry(dataItem.get(\"geometry\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _excludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._excludeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tmapPolygon.setPrivate(\"visible\", false);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unexcludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unexcludeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tmapPolygon.setPrivate(\"visible\", true);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _notIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._notIncludeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tmapPolygon.setPrivate(\"visible\", false);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tprotected _unNotIncludeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._unNotIncludeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tmapPolygon.setPrivate(\"visible\", true);\n\t\t}\n\t}\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers and zooms in on the specific polygon.\n\t *\n\t * @param  dataItem  Target data item\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zooming_to_clicked_object} for more info\n\t * @param  rotate If it's true, the map will rotate so that this polygon would be in the center. Mostly usefull with geoOrthographic projection.\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPolygonSeriesDataItem>, rotate?: boolean): Animation<any> | undefined {\n\t\tconst polygon = dataItem.get(\"mapPolygon\");\n\t\tif (polygon) {\n\t\t\tconst geometry = polygon.get(\"geometry\");\n\t\t\tconst chart = this.chart;\n\n\t\t\tif (geometry && chart) {\n\n\t\t\t\tif (rotate) {\n\t\t\t\t\tconst centroid = $mapUtils.getGeoCentroid(geometry);\n\t\t\t\t\tchart.rotate(-centroid.longitude, -centroid.latitude);\n\t\t\t\t\treturn chart.zoomToGeoBounds($mapUtils.getGeoBounds(geometry), undefined, -centroid.longitude, -centroid.latitude);\n\t\t\t\t}\n\n\t\t\t\treturn chart.zoomToGeoBounds($mapUtils.getGeoBounds(geometry),);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the map in so that all polygons in the array are visible.\n\t *\n\t * @param   dataItems  An array of data items to zoom to\n\t * @param   rotate     Rotate the map so it is centered on the selected items\n\t * @return             Animation\n\t * @since 5.9.0\n\t */\n\tpublic zoomToDataItems(dataItems: Array<DataItem<IMapPolygonSeriesDataItem>>, rotate?: boolean): Animation<any> | undefined {\n\t\tlet left!: number;\n\t\tlet right!: number;\n\t\tlet top!: number;\n\t\tlet bottom!: number;\n\n\t\t$array.each(dataItems, (dataItem) => {\n\n\t\t\tconst polygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (polygon) {\n\t\t\t\tconst geometry = polygon.get(\"geometry\");\n\t\t\t\tif (geometry) {\n\t\t\t\t\tlet bounds = $mapUtils.getGeoBounds(geometry);\n\n\t\t\t\t\tif (left == null) {\n\t\t\t\t\t\tleft = bounds.left;\n\t\t\t\t\t}\n\t\t\t\t\tif (right == null) {\n\t\t\t\t\t\tright = bounds.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (top == null) {\n\t\t\t\t\t\ttop = bounds.top;\n\t\t\t\t\t}\n\t\t\t\t\tif (bottom == null) {\n\t\t\t\t\t\tbottom = bounds.bottom;\n\t\t\t\t\t}\n\n\t\t\t\t\tleft = Math.min(bounds.left, left);\n\t\t\t\t\tright = Math.max(bounds.right, right);\n\t\t\t\t\ttop = Math.max(bounds.top, top);\n\t\t\t\t\tbottom = Math.min(bounds.bottom, bottom);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (left != null && right != null && top != null && bottom != null) {\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tif (rotate) {\n\t\t\t\t\tconst rx = left + (right - left) / 2;\n\t\t\t\t\tconst ry = bottom + (top - bottom) / 2;\n\n\t\t\t\t\tchart.rotate(-rx, -ry);\n\t\t\t\t\treturn chart.zoomToGeoBounds({ left, right, top, bottom }, undefined, -rx, -ry);\n\t\t\t\t}\n\n\t\t\t\treturn chart.zoomToGeoBounds({ left, right, top, bottom });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a [[MapPolygon]] that is under specific X/Y point.\n\t *\n\t * @since 5.9.8\n\t * @param   point  X/Y\n\t * @return         Polygon\n\t */\n\tpublic getPolygonByPoint(point: IPoint): MapPolygon | undefined {\n\t\tlet found: MapPolygon | undefined;\n\t\tconst renderer = this._display._renderer;\n\t\tconst displayObject = (renderer as any).getObjectAtPoint(point);\n\t\tif (displayObject) {\n\t\t\tthis.mapPolygons.each(function(polygon) {\n\t\t\t\tif (polygon._display == displayObject) {\n\t\t\t\t\tfound = polygon;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn found;\n\t\t}\n\t}\n\t\n\tpublic getPolygonByGeoPoint(point: IGeoPoint): MapPolygon | undefined {\n\t\treturn this.getPolygonByPoint(this.chart!.convert(point));\n\t}\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3439, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/src/.internal/charts/map/ZoomControl.ts"],"sourcesContent":["import type { MapChart } from \"./MapChart\";\n\nimport { ZoomTools, IZoomToolsPrivate, IZoomToolsSettings } from \"../../core/render/ZoomTools\";\n\nexport interface IZoomControlSettings extends IZoomToolsSettings {\n}\n\nexport interface IZoomControlPrivate extends IZoomToolsPrivate {\n\t/**\n\t * @ignore\n\t */\n\tchart?: MapChart;\n}\n\n/**\n * A control that displays button for zooming [[MapChart]] in and out.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control} for more information\n * @important\n */\nexport class ZoomControl extends ZoomTools {\n\tpublic static className: string = \"ZoomControl\";\n\tpublic static classNames: Array<string> = ZoomTools.classNames.concat([ZoomControl.className]);\n\n\tdeclare public _settings: IZoomControlSettings;\n\tdeclare public _privateSettings: IZoomControlPrivate;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.addTag(\"zoomtools\");\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isPrivateDirty(\"chart\")) {\n\t\t\tthis.set(\"target\", this.getPrivate(\"chart\"));\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;;;;AAoBM,MAAO,oBAAoB,oLAAA,CAAA,YAAS;IAO/B,YAAS;QAClB,KAAK,CAAC;QACN,IAAI,CAAC,MAAM,CAAC;IACb;IAEO,mBAAgB;QACtB,KAAK,CAAC;QAEN,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU;YACjC,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC;;IAErC;;AAjBA,OAAA,cAAA,CAAA,aAAA,aAAA;;;;WAAkC;;AAClC,OAAA,cAAA,CAAA,aAAA,cAAA;;;;WAA0C,oLAAA,CAAA,YAAS,CAAC,UAAU,CAAC,MAAM,CAAC;QAAC,YAAY,SAAS;KAAC"}},
    {"offset": {"line": 3471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}