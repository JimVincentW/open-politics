module.exports = {

"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * A collection of utility functions for various type checks and conversion
 * @hidden
 */ /**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */ /**
 * Returns `true` if value is not a number (NaN).
 *
 * @param value Input value
 * @return Is NaN?
 */ __turbopack_esm__({
    "PLACEHOLDER": ()=>PLACEHOLDER,
    "PLACEHOLDER2": ()=>PLACEHOLDER2,
    "assert": ()=>assert,
    "getType": ()=>getType,
    "isArray": ()=>isArray,
    "isDate": ()=>isDate,
    "isNaN": ()=>isNaN,
    "isNumber": ()=>isNumber,
    "isObject": ()=>isObject,
    "isString": ()=>isString,
    "numberToString": ()=>numberToString,
    "repeat": ()=>repeat,
    "toDate": ()=>toDate,
    "toNumber": ()=>toNumber
});
function isNaN(value) {
    return Number(value) !== value;
}
function getType(value) {
    return ({}).toString.call(value);
}
function assert(condition, message = "Assertion failed") {
    if (!condition) {
        throw new Error(message);
    }
}
function toNumber(value) {
    if (value != null && !isNumber(value)) {
        let converted = Number(value);
        if (isNaN(converted) && isString(value) && value != "") {
            return toNumber(value.replace(/[^0-9.\-]+/g, ''));
        }
        return converted;
    }
    return value;
}
function toDate(value) {
    if (isDate(value)) {
        // TODO maybe don't create a new Date ?
        return new Date(value);
    } else if (isNumber(value)) {
        return new Date(value);
    } else {
        // Try converting to number (assuming timestamp)
        let num = Number(value);
        if (!isNumber(num)) {
            return new Date(value);
        } else {
            return new Date(num);
        }
    }
}
function numberToString(value) {
    // TODO handle Infinity and -Infinity
    if (isNaN(value)) {
        return "NaN";
    }
    if (value === Infinity) {
        return "Infinity";
    }
    if (value === -Infinity) {
        return "-Infinity";
    }
    // Negative 0
    if (value === 0 && 1 / value === -Infinity) {
        return "-0";
    }
    // Preserve negative and deal with absoute values
    let negative = value < 0;
    value = Math.abs(value);
    // TODO test this
    let parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
    let digits = parsed[1];
    let decimals = parsed[2] || "";
    let res;
    // Leave the nummber as it is if it does not use exponents
    if (parsed[3] === undefined) {
        res = decimals === "" ? digits : digits + "." + decimals;
    } else {
        let exponent = +parsed[3];
        // Deal with decimals
        if (value < 1) {
            let zeros = exponent - 1;
            res = "0." + repeat("0", zeros) + digits + decimals;
        // Deal with integers
        } else {
            let zeros = exponent - decimals.length;
            if (zeros === 0) {
                res = digits + decimals;
            } else if (zeros < 0) {
                res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
            } else {
                res = digits + decimals + repeat("0", zeros);
            }
        }
    }
    return negative ? "-" + res : res;
}
function repeat(string, amount) {
    return new Array(amount + 1).join(string);
}
function isDate(value) {
    return getType(value) === "[object Date]";
}
function isString(value) {
    return typeof value === "string";
}
function isNumber(value) {
    return typeof value === "number" && Number(value) == value;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isArray(value) {
    return Array.isArray(value);
}
const PLACEHOLDER = "__§§§__";
const PLACEHOLDER2 = "__§§§§__"; //# sourceMappingURL=Type.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "add": ()=>add,
    "any": ()=>any,
    "copy": ()=>copy,
    "each": ()=>each,
    "eachContinue": ()=>eachContinue,
    "eachReverse": ()=>eachReverse,
    "find": ()=>find,
    "findIndex": ()=>findIndex,
    "findIndexReverse": ()=>findIndexReverse,
    "findMap": ()=>findMap,
    "findReverse": ()=>findReverse,
    "first": ()=>first,
    "getFirstSortedIndex": ()=>getFirstSortedIndex,
    "getSortedIndex": ()=>getSortedIndex,
    "has": ()=>has,
    "indexOf": ()=>indexOf,
    "insert": ()=>insert,
    "insertIndex": ()=>insertIndex,
    "keepIf": ()=>keepIf,
    "last": ()=>last,
    "map": ()=>map,
    "move": ()=>move,
    "pushAll": ()=>pushAll,
    "pushOne": ()=>pushOne,
    "remove": ()=>remove,
    "removeFirst": ()=>removeFirst,
    "removeIndex": ()=>removeIndex,
    "replace": ()=>replace,
    "setIndex": ()=>setIndex,
    "shiftLeft": ()=>shiftLeft,
    "shuffle": ()=>shuffle,
    "slice": ()=>slice,
    "toArray": ()=>toArray
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function indexOf(array, value) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        // TODO handle NaN
        if (array[i] === value) {
            return i;
        }
    }
    return -1;
}
function any(array, test) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        if (test(array[i])) {
            return true;
        }
    }
    return false;
}
function map(array, fn) {
    const length = array.length;
    const output = new Array(length);
    for(let i = 0; i < length; ++i){
        output[i] = fn(array[i], i);
    }
    return output;
}
function each(array, fn) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        fn(array[i], i);
    }
}
function eachReverse(array, fn) {
    let i = array.length;
    while(i > 0){
        --i;
        fn(array[i], i);
    }
}
function eachContinue(array, fn) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        if (!fn(array[i], i)) {
            break;
        }
    }
}
function shiftLeft(array, index) {
    const length = array.length;
    for(let i = index; i < length; ++i){
        array[i - index] = array[i];
    }
    array.length = length - index;
}
function last(array) {
    const length = array.length;
    return length ? array[length - 1] : undefined;
}
function first(array) {
    return array[0];
}
function insert(array, element, index) {
    //if (array) {
    index = Math.max(0, Math.min(index, array.length));
    array.splice(index, 0, element);
//}
}
function setIndex(array, element, index) {
    remove(array, element);
    insert(array, element, index);
}
function pushAll(array, input) {
    const length = input.length;
    for(let i = 0; i < length; ++i){
        array.push(input[i]);
    }
}
function remove(array, element) {
    let found = false;
    let index = 0;
    for(;;){
        index = array.indexOf(element, index);
        if (index === -1) {
            return found;
        } else {
            found = true;
            array.splice(index, 1);
        }
    }
}
function removeFirst(array, element) {
    let index = array.indexOf(element);
    if (index !== -1) {
        array.splice(index, 1);
        return true;
    } else {
        return false;
    }
}
function move(array, element, toIndex) {
    // @todo this implementation must be the same as the List.moveValue method
    // @todo don't do anything if the desired index is the same as the current index
    let index = indexOf(array, element);
    // @todo remove all old values rather than only the first ?
    if (index !== -1) {
        removeIndex(array, index);
    }
    if (toIndex == null) {
        array.push(element);
    } else {
        insertIndex(array, toIndex, element);
    }
}
function add(array, element, index) {
    // Append to the end if index is not set
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(index)) {
        array.push(element);
    } else if (index === 0) {
        array.unshift(element);
    } else {
        array.splice(index, 0, element);
    }
}
function pushOne(array, element) {
    if (array.indexOf(element) === -1) {
        array.push(element);
    }
}
function replace(array, element, index) {
    // check if exists
    let ind = array.indexOf(element);
    // remove if exists
    if (ind !== -1) {
        array.splice(ind, 1);
    }
    // add to end if index is not set
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(index)) {
        array.push(element);
    } else {
        array.splice(index, 0, element);
    }
}
function toArray(input) {
    if (Array.isArray(input)) {
        return input;
    } else {
        return [
            input
        ];
    }
}
function has(array, element) {
    return indexOf(array, element) !== -1;
}
function copy(array) {
    const length = array.length;
    // It's faster to create the array with a pre-defined length
    const output = new Array(length);
    for(let i = 0; i < length; ++i){
        // Because the array has a pre-defined length, we have to assign rather than push
        // This is also faster than pushing
        output[i] = array[i];
    }
    return output;
}
function slice(array, start, end = array.length) {
    const output = new Array(end - start);
    for(let i = start; i < end; ++i){
        output[i - start] = array[i];
    }
    return output;
}
function insertIndex(array, index, value) {
    array.splice(index, 0, value);
}
function removeIndex(array, index) {
    array.splice(index, 1);
}
function findIndex(array, matches) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        if (matches(array[i], i)) {
            return i;
        }
    }
    return -1;
}
function findIndexReverse(array, matches) {
    let i = array.length;
    while(i > 0){
        --i;
        if (matches(array[i], i)) {
            return i;
        }
    }
    return -1;
}
function find(array, matches) {
    const index = findIndex(array, matches);
    if (index !== -1) {
        return array[index];
    }
}
function findReverse(array, matches) {
    const index = findIndexReverse(array, matches);
    if (index !== -1) {
        return array[index];
    }
}
function findMap(array, matches) {
    const length = array.length;
    for(let i = 0; i < length; ++i){
        const value = matches(array[i], i);
        if (value !== undefined) {
            return value;
        }
    }
}
function shuffle(array) {
    // https://stackoverflow.com/a/2450976/449477
    let currentIndex = array.length, temporaryValue, randomIndex;
    // While there remain elements to shuffle...
    while(0 !== currentIndex){
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
}
function getSortedIndex(array, ordering) {
    let start = 0;
    let end = array.length;
    let found = false;
    while(start < end){
        // TODO is this faster/slower than using Math.floor ?
        const pivot = start + end >> 1;
        const order = ordering(array[pivot]);
        // less
        if (order < 0) {
            start = pivot + 1;
        // equal
        } else if (order === 0) {
            found = true;
            start = pivot + 1;
        // more
        } else {
            end = pivot;
        }
    }
    return {
        found: found,
        index: found ? start - 1 : start
    };
}
function getFirstSortedIndex(array, ordering) {
    let start = 0;
    let end = array.length;
    let found = false;
    while(start < end){
        // TODO is this faster/slower than using Math.floor ?
        const pivot = start + end >> 1;
        const order = ordering(array[pivot]);
        // less
        if (order < 0) {
            start = pivot + 1;
        // equal
        } else if (order === 0) {
            found = true;
            end = pivot;
        // more
        } else {
            end = pivot;
        }
    }
    return {
        found: found,
        index: start
    };
}
function keepIf(array, keep) {
    let i = array.length;
    while(i > 0){
        --i;
        if (!keep(array[i])) {
            array.splice(i, 1);
        }
    }
} //# sourceMappingURL=Array.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */ __turbopack_esm__({
    "ArrayDisposer": ()=>ArrayDisposer,
    "CounterDisposer": ()=>CounterDisposer,
    "Disposer": ()=>Disposer,
    "DisposerClass": ()=>DisposerClass,
    "MultiDisposer": ()=>MultiDisposer,
    "MutableValueDisposer": ()=>MutableValueDisposer
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class DisposerClass {
    /**
     * Constructor.
     */ constructor(){
        /**
         * Is object disposed?
         */ Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._disposed = false;
    }
    /**
     * Checks if object is disposed.
     *
     * @return Disposed?
     */ isDisposed() {
        return this._disposed;
    }
    /**
     * Disposes the object.
     */ dispose() {
        if (!this._disposed) {
            this._disposed = true;
            this._dispose();
        }
    }
}
class Disposer {
    /**
     * Constructor.
     *
     * @param dispose  Function that disposes object
     */ constructor(dispose){
        /**
         * Is object disposed?
         */ Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Method that disposes the object.
         */ Object.defineProperty(this, "_dispose", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._disposed = false;
        this._dispose = dispose;
    }
    /**
     * Checks if object is disposed.
     *
     * @return Disposed?
     */ isDisposed() {
        return this._disposed;
    }
    /**
     * Disposes the object.
     */ dispose() {
        if (!this._disposed) {
            this._disposed = true;
            this._dispose();
        }
    }
}
class ArrayDisposer extends DisposerClass {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_disposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    _dispose() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._disposers, (x)=>{
            x.dispose();
        });
    }
}
class MultiDisposer extends DisposerClass {
    constructor(disposers){
        super();
        Object.defineProperty(this, "_disposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._disposers = disposers;
    }
    _dispose() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._disposers, (x)=>{
            x.dispose();
        });
    }
    get disposers() {
        return this._disposers;
    }
}
class MutableValueDisposer extends DisposerClass {
    constructor(){
        super(...arguments);
        /**
         * Current disposer.
         */ Object.defineProperty(this, "_disposer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Current value.
         */ Object.defineProperty(this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    _dispose() {
        if (this._disposer != null) {
            this._disposer.dispose();
            this._disposer = undefined;
        }
    }
    /**
     * Returns current value.
     *
     * @return Value
     */ get() {
        return this._value;
    }
    /**
     * Sets value and disposes previous disposer if it was set.
     *
     * @param value     New value
     * @param disposer  Disposer
     */ set(value, disposer) {
        if (this._disposer != null) {
            this._disposer.dispose();
        }
        this._disposer = disposer;
        this._value = value;
    }
    /**
     * Resets the disposer value.
     */ reset() {
        this.set(undefined, undefined);
    }
}
class CounterDisposer extends Disposer {
    constructor(){
        super(...arguments);
        /**
         * [_counter description]
         *
         * @todo Description
         */ Object.defineProperty(this, "_counter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    /**
     * [increment description]
     *
     * @todo Description
     */ increment() {
        // TODO throw an error if it is disposed
        ++this._counter;
        // TODO make this more efficient
        return new Disposer(()=>{
            --this._counter;
            if (this._counter === 0) {
                this.dispose();
            }
        });
    }
} //# sourceMappingURL=Disposer.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Event Dispatcher module is used for registering listeners and dispatching
 * events across amCharts system.
 */ /**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */ __turbopack_esm__({
    "EventDispatcher": ()=>EventDispatcher,
    "TargetedEventDispatcher": ()=>TargetedEventDispatcher
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
class EventDispatcher {
    /**
     * Constructor
     */ constructor(){
        Object.defineProperty(this, "_listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_killed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_iterating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._listeners = [];
        this._killed = [];
        this._disabled = {};
        this._iterating = 0;
        this._enabled = true;
        this._disposed = false;
    }
    /**
     * Returns if this object has been already disposed.
     *
     * @return Disposed?
     */ isDisposed() {
        return this._disposed;
    }
    /**
     * Dispose (destroy) this object.
     */ dispose() {
        if (!this._disposed) {
            this._disposed = true;
            const a = this._listeners;
            this._iterating = 1;
            this._listeners = null;
            this._disabled = null;
            try {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(a, (x)=>{
                    x.disposer.dispose();
                });
            } finally{
                this._killed = null;
                this._iterating = null;
            }
        }
    }
    /**
     * Checks if this particular event dispatcher has any listeners set.
     *
     * @return Has listeners?
     */ hasListeners() {
        return this._listeners.length !== 0;
    }
    /**
     * Checks if this particular event dispatcher has any particular listeners set.
     *
     * @return Has particular event listeners?
     */ hasListenersByType(type) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.any(this._listeners, (x)=>(x.type === null || x.type === type) && !x.killed);
    }
    /**
     * Enable dispatching of events if they were previously disabled by
     * `disable()`.
     */ enable() {
        this._enabled = true;
    }
    /**
     * Disable dispatching of events until re-enabled by `enable()`.
     */ disable() {
        this._enabled = false;
    }
    /**
     * Enable dispatching particular event, if it was disabled before by
     * `disableType()`.
     *
     * @param type Event type
     */ enableType(type) {
        delete this._disabled[type];
    }
    /**
     * Disable dispatching of events for a certain event type.
     *
     * Optionally, can set how many dispatches to skip before automatically
     * re-enabling the dispatching.
     *
     * @param type    Event type
     * @param amount  Number of event dispatches to skip
     */ disableType(type, amount = Infinity) {
        this._disabled[type] = amount;
    }
    /**
     * Removes listener from dispatcher.
     *
     * Will throw an exception if such listener does not exists.
     *
     * @param listener Listener to remove
     */ _removeListener(listener) {
        if (this._iterating === 0) {
            const index = this._listeners.indexOf(listener);
            if (index === -1) {
                throw new Error("Invalid state: could not remove listener");
            }
            this._listeners.splice(index, 1);
        } else {
            this._killed.push(listener);
        }
    }
    /**
     * Removes existing listener by certain parameters.
     *
     * @param once         Listener's once setting
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     */ _removeExistingListener(once, type, callback, context) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        this._eachListener((info)=>{
            if (info.once === once && // TODO is this correct ?
            info.type === type && (callback === undefined || info.callback === callback) && info.context === context) {
                info.disposer.dispose();
            }
        });
    }
    /**
     * Checks if dispatching for particular event type is enabled.
     *
     * @param type  Event type
     * @return Enabled?
     */ isEnabled(type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        // TODO is this check correct ?
        return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;
    }
    /**
     * Removes all listeners of a particular event type
     *
     * @param type  Listener's type
     */ removeType(type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        this._eachListener((info)=>{
            if (info.type === type) {
                info.disposer.dispose();
            }
        });
    }
    /**
     * Checks if there's already a listener with specific parameters.
     *
     * @param type      Listener's type
     * @param callback  Callback function
     * @param context   Callback context
     * @return Has listener?
     */ has(type, callback, context) {
        const index = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.findIndex(this._listeners, (info)=>{
            return info.once !== true && // Ignoring "once" listeners
            info.type === type && (callback === undefined || info.callback === callback) && info.context === context;
        });
        return index !== -1;
    }
    /**
     * Checks whether event of the particular type should be dispatched.
     *
     * @param type  Event type
     * @return Dispatch?
     */ _shouldDispatch(type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        const count = this._disabled[type];
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(count)) {
            return this._enabled;
        } else {
            if (count <= 1) {
                delete this._disabled[type];
            } else {
                --this._disabled[type];
            }
            return false;
        }
    }
    /**
     * [_eachListener description]
     *
     * All of this extra code is needed when a listener is removed while iterating
     *
     * @todo Description
     * @param fn [description]
     */ _eachListener(fn) {
        ++this._iterating;
        try {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._listeners, fn);
        } finally{
            --this._iterating;
            // TODO should this be inside or outside the finally ?
            if (this._iterating === 0 && this._killed.length !== 0) {
                // Remove killed listeners
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._killed, (killed)=>{
                    this._removeListener(killed);
                });
                this._killed.length = 0;
            }
        }
    }
    /**
     * Dispatches an event immediately without waiting for next cycle.
     *
     * @param type   Event type
     * @param event  Event object
     * @todo automatically add in type and target properties if they are missing
     */ dispatch(type, event) {
        if (this._shouldDispatch(type)) {
            // TODO check if it's faster to use an object of listeners rather than a single big array
            // TODO if the function throws, maybe it should keep going ?
            this._eachListener((listener)=>{
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    listener.dispatch(type, event);
                }
            });
        }
    }
    /**
     * Shelves the event to be dispatched within next update cycle.
     *
     * @param type   Event type
     * @param event  Event object
     * @todo automatically add in type and target properties if they are missing
     */ /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {
        if (this._shouldDispatch(type)) {
            this._eachListener((listener) => {
                // TODO check if it's faster to use an object of listeners rather than a single big array
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    // TODO if the function throws, maybe it should keep going ?
                    // TODO dispatch during the update cycle, rather than using whenIdle
                    $async.whenIdle(() => {
                        if (!listener.killed) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            });
        }
    }*/ /**
     * Creates, catalogs and returns an [[EventListener]].
     *
     * Event listener can be disposed.
     *
     * @param once         Listener's once setting
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @param dispatch
     * @returns An event listener
     */ _on(once, type, callback, context, shouldClone, dispatch) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        this._removeExistingListener(once, type, callback, context);
        const info = {
            type: type,
            callback: callback,
            context: context,
            shouldClone: shouldClone,
            dispatch: dispatch,
            killed: false,
            once: once,
            disposer: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
                info.killed = true;
                this._removeListener(info);
            })
        };
        this._listeners.push(info);
        return info;
    }
    /**
     * Creates an event listener to be invoked on **any** event.
     *
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */ onAll(callback, context, shouldClone = true) {
        return this._on(false, null, callback, context, shouldClone, (_type, event)=>callback.call(context, event)).disposer;
    }
    /**
     * Creates an event listener to be invoked on a specific event type.
     *
     * ```TypeScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     * ```JavaScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     *
     * The above will invoke our custom event handler whenever series we put
     * event on is hidden.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */ on(type, callback, context, shouldClone = true) {
        return this._on(false, type, callback, context, shouldClone, (_type, event)=>callback.call(context, event)).disposer;
    }
    /**
     * Creates an event listener to be invoked on a specific event type once.
     *
     * Once the event listener is invoked, it is automatically disposed.
     *
     * ```TypeScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     * ```JavaScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     *
     * The above will invoke our custom event handler the first time series we
     * put event on is hidden.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */ once(type, callback, context, shouldClone = true) {
        const x = this._on(true, type, callback, context, shouldClone, (_type, event)=>{
            x.disposer.dispose();
            callback.call(context, event);
        });
        // TODO maybe this should return a different Disposer ?
        return x.disposer;
    }
    /**
     * Removes the event listener with specific parameters.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     */ off(type, callback, context) {
        this._removeExistingListener(false, type, callback, context);
    }
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param source Source event dispatcher
     * @ignore
     */ copyFrom(source) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        const disposers = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(source._listeners, (x)=>{
            // TODO is this correct ?
            if (!x.killed && x.shouldClone) {
                if (x.type === null) {
                    disposers.push(this.onAll(x.callback, x.context));
                } else if (x.once) {
                    disposers.push(this.once(x.type, x.callback, x.context));
                } else {
                    disposers.push(this.on(x.type, x.callback, x.context));
                }
            }
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"](disposers);
    }
}
class TargetedEventDispatcher extends EventDispatcher {
    /**
     * Constructor
     *
     * @param target Event dispatcher target
     */ constructor(target){
        super();
        /**
         * A target object which is originating events using this dispatcher.
         */ Object.defineProperty(this, "target", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.target = target;
    }
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param source Source event dispatcher
     * @ignore
     */ copyFrom(source) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        const disposers = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(source._listeners, (x)=>{
            // TODO very hacky
            if (x.context === source.target) {
                return;
            }
            // TODO is this correct ?
            if (!x.killed && x.shouldClone) {
                if (x.type === null) {
                    disposers.push(this.onAll(x.callback, x.context));
                } else if (x.once) {
                    disposers.push(this.once(x.type, x.callback, x.context));
                } else {
                    disposers.push(this.on(x.type, x.callback, x.context));
                }
            }
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"](disposers);
    }
} //# sourceMappingURL=EventDispatcher.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */ /**
 * Represents a relative value (percent).
 *
 * The Percent object, can be instantiated using two ways:
 *
 * * Via `new Percent(X)`.
 * * Via `am5.percent(X)`.
 *
 * You can also use shortcut functions for `0%`, `50%`, and `100%`:
 * * `am5.p0`
 * * `am5.p50`
 * * `am5.p100`
 */ __turbopack_esm__({
    "Percent": ()=>Percent,
    "isPercent": ()=>isPercent,
    "p0": ()=>p0,
    "p100": ()=>p100,
    "p50": ()=>p50,
    "percent": ()=>percent
});
class Percent {
    /**
     * Constructor.
     *
     * @param percent  Percent value
     */ constructor(percent){
        /**
         * Value in percent.
         */ Object.defineProperty(this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._value = percent;
    }
    /**
     * Relative value.
     *
     * E.g. 100% is 1, 50% is 0.5, etc.
     *
     * This is useful to apply transformations to other values. E.g.:
     *
     * ```TypeScript
     * let value = 256;
     * let percent = new am5.p50;
     * console.log(value * percent.value); // outputs 128
     * ```
     * ```JavaScript
     * var value = 256;
     * var percent = new am5.p50;
     * console.log(value * percent.value); // outputs 128
     * ```
     *
     * Alternatively, you can use `am5.percent()` helper function:
     *
     * ```TypeScript
     * let value = 256;
     * let percent = am5.p50;
     * console.log(value * percent.value); // outputs 128
     * ```
     * ```JavaScript
     * var value = 256;
     * var percent = am5.p50;
     * console.log(value * percent.value); // outputs 128
     * ```
     *
     * @readonly
     * @return Relative value
     */ get value() {
        return this._value / 100;
    }
    /**
     * Value in percent.
     *
     * @readonly
     * @return Percent
     */ get percent() {
        return this._value;
    }
    toString() {
        return "" + this._value + "%";
    }
    interpolate(min, max) {
        return min + this.value * (max - min);
    }
    static normalize(percent, min, max) {
        if (percent instanceof Percent) {
            return percent;
        } else {
            if (min === max) {
                return new Percent(0);
            } else {
                return new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);
            }
        }
    }
}
function percent(value) {
    return new Percent(value);
}
const p0 = percent(0);
const p100 = percent(100);
const p50 = percent(50);
function isPercent(value) {
    return value instanceof Percent;
} //# sourceMappingURL=Percent.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "copy": ()=>copy,
    "each": ()=>each,
    "eachContinue": ()=>eachContinue,
    "eachOrdered": ()=>eachOrdered,
    "hasKey": ()=>hasKey,
    "keys": ()=>keys,
    "keysOrdered": ()=>keysOrdered,
    "softCopyProperties": ()=>softCopyProperties
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function keys(object) {
    return Object.keys(object);
}
function keysOrdered(object, order) {
    return keys(object).sort(order);
}
function copy(object) {
    return Object.assign({}, object);
}
function each(object, f) {
    keys(object).forEach((key)=>{
        f(key, object[key]);
    });
}
function eachContinue(object, fn) {
    for(let key in object){
        if (hasKey(object, key)) {
            if (!fn(key, object[key])) {
                break;
            }
        }
    }
}
function eachOrdered(object, fn, ord) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(keysOrdered(object, ord), (key)=>{
        fn(key, object[key]);
    });
}
function hasKey(object, key) {
    return ({}).hasOwnProperty.call(object, key);
}
function softCopyProperties(source, target) {
    each(source, (key, value)=>{
        // only if value is set
        //if ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {
        if (value != null && target[key] == null) {
            target[key] = value;
        }
    });
    return target;
} //# sourceMappingURL=Object.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "StyleRule": ()=>StyleRule,
    "StyleSheet": ()=>StyleSheet,
    "addClass": ()=>addClass,
    "addEventListener": ()=>addEventListener,
    "addSpacing": ()=>addSpacing,
    "alternativeColor": ()=>alternativeColor,
    "blur": ()=>blur,
    "brighten": ()=>brighten,
    "capitalizeFirst": ()=>capitalizeFirst,
    "cleanFormat": ()=>cleanFormat,
    "contains": ()=>contains,
    "decimalPlaces": ()=>decimalPlaces,
    "escapeForRgex": ()=>escapeForRgex,
    "focus": ()=>focus,
    "get12Hours": ()=>get12Hours,
    "getBrightnessStep": ()=>getBrightnessStep,
    "getDayFromWeek": ()=>getDayFromWeek,
    "getEventKey": ()=>getEventKey,
    "getEventTarget": ()=>getEventTarget,
    "getFormat": ()=>getFormat,
    "getLightnessStep": ()=>getLightnessStep,
    "getMonthWeek": ()=>getMonthWeek,
    "getPointerId": ()=>getPointerId,
    "getRendererEvent": ()=>getRendererEvent,
    "getSafeResolution": ()=>getSafeResolution,
    "getShadowRoot": ()=>getShadowRoot,
    "getStyle": ()=>getStyle,
    "getTimeZone": ()=>getTimeZone,
    "getTimezoneOffset": ()=>getTimezoneOffset,
    "getWeek": ()=>getWeek,
    "getWeekYear": ()=>getWeekYear,
    "getYearDay": ()=>getYearDay,
    "hslToHsv": ()=>hslToHsv,
    "hslToRgb": ()=>hslToRgb,
    "hsvToHsl": ()=>hsvToHsl,
    "iOS": ()=>iOS,
    "isLight": ()=>isLight,
    "isLocalEvent": ()=>isLocalEvent,
    "isTouchEvent": ()=>isTouchEvent,
    "lighten": ()=>lighten,
    "mergeTags": ()=>mergeTags,
    "onZoom": ()=>onZoom,
    "padString": ()=>padString,
    "plainText": ()=>plainText,
    "ready": ()=>ready,
    "relativeToValue": ()=>relativeToValue,
    "removeClass": ()=>removeClass,
    "removeElement": ()=>removeElement,
    "rgbToHsl": ()=>rgbToHsl,
    "sameBounds": ()=>sameBounds,
    "saturate": ()=>saturate,
    "setInteractive": ()=>setInteractive,
    "setStyle": ()=>setStyle,
    "splitString": ()=>splitString,
    "stripTags": ()=>stripTags,
    "supports": ()=>supports,
    "trim": ()=>trim,
    "trimLeft": ()=>trimLeft,
    "trimRight": ()=>trimRight,
    "truncateTextWithEllipsis": ()=>truncateTextWithEllipsis
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function ready(f) {
    if (document.readyState !== "loading") {
        f();
    } else {
        const listener = ()=>{
            if (document.readyState !== "loading") {
                document.removeEventListener("readystatechange", listener);
                f();
            }
        };
        document.addEventListener("readystatechange", listener);
    }
}
function removeElement(el) {
    if (el.parentNode) {
        el.parentNode.removeChild(el);
    }
}
function addEventListener(dom, type, listener, options) {
    //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
    dom.addEventListener(type, listener, options || false);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
        dom.removeEventListener(type, listener, options || false);
    });
}
function onZoom(listener) {
    // TODO use matchMedia instead ?
    return addEventListener(window, "resize", (_ev)=>{
        listener();
    });
}
function supports(cap) {
    switch(cap){
        case "touchevents":
            //return "ontouchstart" in document.documentElement;
            return window.hasOwnProperty("TouchEvent");
        case "pointerevents":
            return window.hasOwnProperty("PointerEvent");
        case "mouseevents":
            return window.hasOwnProperty("MouseEvent");
        case "wheelevents":
            return window.hasOwnProperty("WheelEvent");
        case "keyboardevents":
            return window.hasOwnProperty("KeyboardEvent");
    }
    return false;
}
function getPointerId(event) {
    let id = event.pointerId || 0;
    return id;
}
function blur() {
    if (document.activeElement && document.activeElement != document.body) {
        if (document.activeElement.blur) {
            document.activeElement.blur();
        } else {
            let input = document.createElement("button");
            input.style.position = "fixed";
            input.style.top = "0px";
            input.style.left = "-10000px";
            document.body.appendChild(input);
            input.focus();
            input.blur();
            document.body.removeChild(input);
        }
    }
}
function focus(el) {
    if (el) {
        el.focus();
    }
}
function getRendererEvent(key) {
    if (supports("pointerevents")) {
        return key;
    } else if (supports("touchevents")) {
        switch(key){
            case "pointerover":
                return "touchstart";
            case "pointerout":
                return "touchend";
            case "pointerleave":
                return "touchend";
            case "pointerdown":
                return "touchstart";
            case "pointermove":
                return "touchmove";
            case "pointerup":
                return "touchend";
            case "click":
                return "click";
            case "dblclick":
                return "dblclick";
        }
    } else if (supports("mouseevents")) {
        switch(key){
            case "pointerover":
                return "mouseover";
            case "pointerout":
                return "mouseout";
            case "pointerleave":
                return "mouseleave";
            case "pointerdown":
                return "mousedown";
            case "pointermove":
                return "mousemove";
            case "pointerup":
                return "mouseup";
            case "click":
                return "click";
            case "dblclick":
                return "dblclick";
        }
    }
    return key;
}
function isTouchEvent(ev) {
    if (typeof Touch !== "undefined" && ev instanceof Touch) {
        return true;
    } else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && ev.pointerType != null) {
        switch(ev.pointerType){
            case "touch":
            case "pen":
            case 2:
                return true;
            case "mouse":
            case 4:
                return false;
            default:
                return !(ev instanceof MouseEvent);
        }
    } else if (ev.type != null) {
        if (ev.type.match(/^mouse/)) {
            return false;
        }
    }
    return true;
}
function setStyle(dom, property, value) {
    dom.style[property] = value;
}
function getStyle(dom, property) {
    return dom.style[property];
}
function getEventTarget(event) {
    if (event.composedPath) {
        const path = event.composedPath();
        if (path.length === 0) {
            return null;
        } else {
            return path[0];
        }
    } else {
        return event.target;
    }
}
function contains(a, b) {
    let cursor = b;
    while(true){
        if (a === cursor) {
            return true;
        } else if (cursor.parentNode === null) {
            // TODO better ShadowRoot detection
            if (cursor.host == null) {
                return false;
            } else {
                cursor = cursor.host;
            }
        } else {
            cursor = cursor.parentNode;
        }
    }
}
function isLocalEvent(event, target) {
    return event.target && contains(target.root.dom, event.target);
}
function setInteractive(target, interactive) {
    if (interactive) {
        target.style.pointerEvents = "auto";
    } else {
        target.style.pointerEvents = "none";
    }
}
function getEventKey(event) {
    if (event.key !== undefined) {
        return event.key;
    }
    switch(event.keyCode){
        case 9:
            return "Tab";
        case 13:
            return "Enter";
        case 16:
            return "Shift";
        case 17:
            return "Control";
        case 27:
            return "Escape";
        case 32:
            return " ";
        case 37:
            return "ArrowLeft";
        case 38:
            return "ArrowUp";
        case 39:
            return "ArrowRight";
        case 40:
            return "ArrowDown";
        case 46:
            return "Delete";
    }
    return "" + event.keyCode;
}
function getShadowRoot(a) {
    let cursor = a;
    while(true){
        if (cursor.parentNode === null) {
            // TODO better ShadowRoot detection
            if (cursor.host != null) {
                return cursor;
            } else {
                return null;
            }
        } else {
            cursor = cursor.parentNode;
        }
    }
}
/**
 * [rootStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */ let rootStylesheet;
/**
 * @ignore Exclude from docs
 */ function createStylesheet(element, text, nonce = "") {
    // TODO use createElementNS ?
    const e = document.createElement("style");
    e.type = "text/css";
    if (nonce != "") {
        e.setAttribute("nonce", nonce);
    }
    e.textContent = text;
    if (element === null) {
        document.head.appendChild(e);
    } else {
        element.appendChild(e);
    }
    return e;
}
/**
 * [getStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @return [description]
 */ function getStylesheet(element, nonce = "") {
    if (element === null) {
        if (rootStylesheet == null) {
            // TODO use createElementNS ?
            const e = document.createElement("style");
            e.type = "text/css";
            if (nonce != "") {
                e.setAttribute("nonce", nonce);
            }
            document.head.appendChild(e);
            rootStylesheet = e.sheet;
        }
        return rootStylesheet;
    } else {
        // TODO use createElementNS ?
        const e = document.createElement("style");
        e.type = "text/css";
        if (nonce != "") {
            e.setAttribute("nonce", nonce);
        }
        element.appendChild(e);
        return e.sheet;
    }
}
/**
 * [makeStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param selector  [description]
 * @return [description]
 */ function appendStylesheet(root, selector) {
    const index = root.cssRules.length;
    root.insertRule(selector + "{}", index);
    return root.cssRules[index];
}
class StyleRule extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DisposerClass"] {
    /**
     * Constructor.
     *
     * @param selector  CSS selector
     * @param styles    An object of style attribute - value pairs
     */ constructor(element, selector, styles, nonce = ""){
        super();
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * CSS rule.
         */ Object.defineProperty(this, "_rule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._root = getStylesheet(element, nonce);
        try {
            this._rule = appendStylesheet(this._root, selector);
        } catch (err) {
            // Create an empty rule on failed selectors
            this._rule = appendStylesheet(this._root, ":not(*)");
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(styles, (key, value)=>{
            this.setStyle(key, value);
        });
    }
    /**
     * A CSS selector text.
     *
     * E.g.: `.myClass p`
     *
     * @param selector  CSS selector
     */ set selector(selector) {
        this._rule.selectorText = selector;
    }
    /**
     * @return CSS selector
     */ get selector() {
        return this._rule.selectorText;
    }
    // TODO test this
    _dispose() {
        // TODO a bit hacky
        const index = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.indexOf(this._root.cssRules, this._rule);
        if (index === -1) {
            throw new Error("Could not dispose StyleRule");
        } else {
            // TODO if it's empty remove it from the DOM ?
            this._root.deleteRule(index);
        }
    }
    /**
     * Sets the same style properties with browser-specific prefixes.
     *
     * @param name   Attribute name
     * @param value  Attribute value
     */ _setVendorPrefixName(name, value) {
        const style = this._rule.style;
        style.setProperty("-webkit-" + name, value, "");
        style.setProperty("-moz-" + name, value, "");
        style.setProperty("-ms-" + name, value, "");
        style.setProperty("-o-" + name, value, "");
        style.setProperty(name, value, "");
    }
    /**
     * Sets a value for specific style attribute.
     *
     * @param name   Attribute
     * @param value  Value
     */ setStyle(name, value) {
        if (name === "transition") {
            this._setVendorPrefixName(name, value);
        } else {
            this._rule.style.setProperty(name, value, "");
        }
    }
}
class StyleSheet extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DisposerClass"] {
    /**
     * Constructor.
     *
     * @param text  CSS stylesheet
     */ constructor(element, text, nonce = ""){
        super();
        Object.defineProperty(this, "_element", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._element = createStylesheet(element, text, nonce);
    }
    _dispose() {
        if (this._element.parentNode) {
            this._element.parentNode.removeChild(this._element);
        }
    }
}
function addClass(element, className) {
    if (!element) {
        return;
    }
    if (element.classList) {
        const classes = className.split(" ");
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(classes, (name)=>{
            element.classList.add(name);
        });
    } else {
        let currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter((item)=>{
                return item !== className;
            }).join(" ") + " " + className);
        } else {
            element.setAttribute("class", className);
        }
    }
}
function removeClass(element, className) {
    if (!element) {
        return;
    }
    if (element.classList) {
        element.classList.remove(className);
    } else {
        let currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter((item)=>{
                return item !== className;
            }).join(" "));
        }
    }
}
function iOS() {
    return /apple/i.test(navigator.vendor) && "ontouchend" in document;
}
function getSafeResolution() {
    return iOS() ? 1 : undefined;
}
function relativeToValue(percent, full) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(percent)) {
        return percent;
    } else if (percent != null && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(percent.value) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(full)) {
        return full * percent.value;
    } else {
        return 0;
    }
}
function decimalPlaces(number) {
    let match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
        return 0;
    }
    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
function padString(value, len = 0, char = "0") {
    if (typeof value !== "string") {
        value = value.toString();
    }
    return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
}
function trimLeft(text) {
    return text.replace(/^[\s]*/, "");
}
function trimRight(text) {
    return text.replace(/[\s]*$/, "");
}
function trim(text) {
    return trimLeft(trimRight(text));
}
function truncateTextWithEllipsis(text, maxLength, breakWords = false, ellipsis = "...") {
    if (text.length > maxLength) {
        // Find the last non-alphanumeric character before maxLength
        let lastNonAlphanumericIndex = maxLength - 1;
        while(lastNonAlphanumericIndex >= 0 && text.charAt(lastNonAlphanumericIndex).match(/\w/)){
            lastNonAlphanumericIndex--;
        }
        if (lastNonAlphanumericIndex >= 0 && breakWords == false) {
            return text.substring(0, lastNonAlphanumericIndex + 1) + '...';
        } else {
            // If no non-alphanumeric character found, truncate without breaking words
            return text.substring(0, maxLength) + ellipsis;
        }
    } else {
        return text;
    }
}
function getFormat(format) {
    // Undefined?
    if (typeof format === "undefined") {
        return "string";
    }
    // Cleanup and lowercase format
    format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
    // Remove style tags
    format = format.replace(/\[[^\]]+\]/, "");
    // Trim
    format = format.trim();
    // Check for any explicit format hints (i.e. /Date)
    let hints = format.match(/\/(date|number|duration)$/);
    if (hints) {
        return hints[1];
    }
    // Check for explicit hints
    if (format === "number") {
        return "number";
    }
    if (format === "date") {
        return "date";
    }
    if (format === "duration") {
        return "duration";
    }
    // Detect number formatting symbols
    if (format.match(/[#0]/)) {
        return "number";
    }
    // Detect date formatting symbols
    if (format.match(/[ymwdhnsqaxkzgtei]/)) {
        return "date";
    }
    // Nothing? Let's display as string
    return "string";
}
function cleanFormat(format) {
    return format.replace(/\/(date|number|duration)$/i, "");
}
function stripTags(text) {
    return text ? text.replace(/<[^>]*>/g, "") : text;
}
function plainText(text) {
    return text ? stripTags(("" + text).replace(/[\n\r]+/g, ". ")) : text;
}
function escapeForRgex(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
function addSpacing(str) {
    let result = "";
    for(let i = 0; i < str.length; i++){
        const char = str.charAt(i);
        if (char.toUpperCase() == char && i != 0) {
            result += " ";
        }
        result += char;
    }
    return result;
}
function splitString(source) {
    // Regular expression to identify RTL characters
    const rtlChar = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
    // Regular expression to capture segments ending with specific Arabic characters
    const splitPattern = /([^اأدذرزو]*[اأدذرزو])/gi;
    // Split input string into array of words or characters, including whitespace
    let segments = source.split(/(\s+)/); // Split by whitespace, capturing it
    let result = [];
    segments.forEach((segment)=>{
        if (segment.match(/^\s+$/)) {
            // If the segment is purely whitespace
            if (segment = " ") {
                segment = "  ";
            }
            result.push(segment);
        } else if (rtlChar.test(segment)) {
            // If the segment contains RTL characters, handle special splits
            let parts = segment.split(splitPattern).filter((part)=>part !== '');
            // Concatenate parts processed by the split pattern directly to result
            result = result.concat(parts);
        } else {
            // Treat this segment as LTR: split into characters
            result = result.concat([
                ...segment
            ]);
        }
    });
    return result;
}
function getYearDay(date, utc = false) {
    // TODO: utc needed?
    utc;
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime() + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;
    const oneDay = 1000 * 60 * 60 * 24;
    return Math.floor(diff / oneDay);
}
function getWeek(date, _utc = false) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const day = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - day);
    const firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil(((d.getTime() - firstDay.getTime()) / 86400000 + 1) / 7);
}
function getWeekYear(date, _utc = false) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const day = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - day);
    const firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return firstDay.getFullYear();
}
function getMonthWeek(date, utc = false) {
    const firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
    let currentWeek = getWeek(date, utc);
    if (currentWeek == 1) {
        currentWeek = 53;
    }
    return currentWeek - firstWeek + 1;
}
function getDayFromWeek(week, year, weekday = 1, utc = false) {
    let date = new Date(year, 0, 4, 0, 0, 0, 0);
    if (utc) {
        date.setUTCFullYear(year);
    }
    let day = week * 7 + weekday - ((date.getDay() || 7) + 3);
    return day;
}
function get12Hours(hours, base) {
    if (hours > 12) {
        hours -= 12;
    } else if (hours === 0) {
        hours = 12;
    }
    return base != null ? hours + (base - 1) : hours;
}
function getTimeZone(date, long = false, savings = false, utc = false, timezone) {
    if (utc) {
        return long ? "Coordinated Universal Time" : "UTC";
    } else if (timezone) {
        const d1 = date.toLocaleString("en-US", {
            timeZone: timezone
        });
        const d2 = date.toLocaleString("en-US", {
            timeZone: timezone,
            timeZoneName: long ? "long" : "short"
        });
        return trim(d2.substr(d1.length));
    }
    let wotz = date.toLocaleString("UTC");
    let wtz = date.toLocaleString("UTC", {
        timeZoneName: long ? "long" : "short"
    }).substr(wotz.length);
    //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
    if (savings === false) {
        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
    }
    return trim(wtz);
}
function getTimezoneOffset(timezone) {
    const date = new Date(Date.UTC(2012, 0, 1, 0, 0, 0, 0));
    const utcDate = new Date(date.toLocaleString("en-US", {
        timeZone: "UTC"
    }));
    const tzDate = new Date(date.toLocaleString("en-US", {
        timeZone: timezone
    }));
    return (tzDate.getTime() - utcDate.getTime()) / 6e4 * -1;
}
function capitalizeFirst(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
}
function hslToRgb(color) {
    let r, g, b;
    let h = color.h;
    let s = color.s;
    let l = color.l;
    if (s == 0) {
        r = g = b = l; // achromatic
    } else {
        let hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        };
        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        let p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
function rgbToHsl(color) {
    let r = color.r / 255;
    let g = color.g / 255;
    let b = color.b / 255;
    let max = Math.max(r, g, b);
    let min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    let l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    } else {
        let d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
function hsvToHsl(hsv) {
    const l = hsv.v * (1 - hsv.s / 2);
    const s = l === 0 || l === 1 ? 0 : (hsv.v - l) / Math.min(l, 1 - l);
    return {
        h: hsv.h,
        s,
        l,
        a: hsv.a
    };
}
function hslToHsv(hsl) {
    const v = hsl.l + hsl.s * Math.min(hsl.l, 1 - hsl.l);
    const s = v === 0 ? 0 : 2 * (1 - hsl.l / v);
    return {
        h: hsl.h,
        s,
        v,
        a: hsl.a
    };
}
function lighten(rgb, percent) {
    if (rgb) {
        return {
            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
            a: rgb.a
        };
    } else {
        // TODO is this correct ?
        return rgb;
    }
}
;
function getLightnessStep(value, percent) {
    let base = percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
function brighten(rgb, percent) {
    if (rgb) {
        let base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
        //let base = Math.max(rgb.r, rgb.g, rgb.b);
        let step = getLightnessStep(base, percent);
        return {
            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
            a: rgb.a
        };
    } else {
        // TODO is this correct ?
        return rgb;
    }
}
;
function getBrightnessStep(_value, percent) {
    let base = 255; //percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
function isLight(color) {
    return (color.r * 299 + color.g * 587 + color.b * 114) / 1000 >= 128;
}
function saturate(rgb, saturation) {
    if (rgb === undefined || saturation == 1) {
        return rgb;
    }
    let hsl = rgbToHsl(rgb);
    hsl.s = saturation;
    return hslToRgb(hsl);
}
function alternativeColor(color, lightAlternative = {
    r: 255,
    g: 255,
    b: 255
}, darkAlternative = {
    r: 255,
    g: 255,
    b: 255
}) {
    let light = lightAlternative;
    let dark = darkAlternative;
    if (isLight(darkAlternative)) {
        light = darkAlternative;
        dark = lightAlternative;
    }
    return isLight(color) ? dark : light;
}
function mergeTags(tags1, tags2) {
    if (!tags1) {
        tags1 = [];
    }
    return [
        ...tags1,
        ...tags2
    ].filter((value, index, self)=>{
        return self.indexOf(value) === index;
    });
}
function sameBounds(a, b) {
    if (!b) {
        return false;
    }
    if (a.left != b.left) {
        return false;
    }
    if (a.right != b.right) {
        return false;
    }
    if (a.top != b.top) {
        return false;
    }
    if (a.bottom != b.bottom) {
        return false;
    }
    return true;
} //# sourceMappingURL=Utils.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Color": ()=>Color,
    "color": ()=>color,
    "rgba2hex": ()=>rgba2hex
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
/**
 * @ignore
 */ function string2hex(string) {
    //string = cssColorNames[string.toLowerCase()] || string;
    if (string[0] === "#") {
        string = string.substr(1);
    }
    if (string.length == 3) {
        string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);
    }
    return parseInt(string, 16);
}
function rgba2hex(color) {
    color = color.replace(/[ ]/g, "");
    // Init
    let matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i);
    // Try rgb() format
    if (matches) {
        matches.push("1");
    } else {
        matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);
        if (!matches) {
            return 0x000000;
        }
    }
    let hex = "";
    for(let i = 1; i <= 3; i++){
        let val = parseInt(matches[i]).toString(16);
        if (val.length == 1) {
            val = "0" + val;
        }
        hex += val;
    }
    return string2hex(hex);
}
function color(input) {
    return Color.fromAny(input);
}
class Color {
    constructor(hex){
        Object.defineProperty(this, "_hex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._hex = hex | 0;
    }
    /**
     * Color numeric value.
     */ get hex() {
        return this._hex;
    }
    /**
     * Value of color's R channel.
     * @return R value
     */ get r() {
        return this._hex >>> 16;
    }
    /**
     * Value of color's G channel.
     * @return G value
     */ get g() {
        return this._hex >> 8 & 0xFF;
    }
    /**
     * Value of color's B channel.
     * @return B value
     */ get b() {
        return this._hex & 0xFF;
    }
    /**
     * Returns color CSS representation in form of `rgba(r, g, b, a)` string.
     *
     * @param   alpha  Opacity
     * @return         CSS string
     */ toCSS(alpha = 1) {
        return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + alpha + ")";
    }
    /**
     * Returns color CSS representation in form of `#rgb` string.
     *
     * @return         CSS string
     */ toCSSHex() {
        return "#" + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(this.r.toString(16), 2) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(this.g.toString(16), 2) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(this.b.toString(16), 2);
    }
    /**
     * Returns color's HSL info.
     * @param   alpha Opacity
     * @return        HSL info
     */ toHSL(alpha = 1) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.rgbToHsl({
            r: this.r,
            g: this.g,
            b: this.b,
            a: alpha
        });
    }
    /**
     * Converts HSL values into a new [[Color]] object.
     *
     * @param   h H value
     * @param   s S value
     * @param   l L value
     * @return    Color object
     */ static fromHSL(h, s, l) {
        const rgb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hslToRgb({
            h: h,
            s: s,
            l: l
        });
        return this.fromRGB(rgb.r, rgb.g, rgb.b);
    }
    toString() {
        return this.toCSSHex();
    }
    /**
     * Converts hex number into a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromHex(0xff0000) // red
     * ```
     * ```JavaScript
     * Color.fromHex(0xff0000) // red
     * ```
     *
     * @param   hex  Hex color
     * @return       Color
     */ static fromHex(hex) {
        return new Color(hex);
    }
    /**
     * Converts RGB values to a new [[Color]] object.
     *
     * @param   r  R value
     * @param   g  G value
     * @param   b  B value
     * @return     Color
     */ static fromRGB(r, g, b) {
        return new Color((b | 0) + (g << 8) + (r << 16));
    }
    /**
     * Converts RGB string to a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromString("#ff0000") // red
     * ```
     * ```JavaScript
     * Color.fromString("#ff0000") // red
     * ```
     *
     * @param   s  RGB string
     * @return     Color
     */ static fromString(s) {
        return new Color(string2hex(s));
    }
    /**
     * Converts CSS rgba() syntax to a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromCSS("rgba(255, 0, 0, 1)") // red
     * ```
     * ```JavaScript
     * Color.fromCSS("rgba(255, 0, 0, 1)") // red
     * ```
     *
     * @param  {string} s [description]
     * @return {Color}    [description]
     */ static fromCSS(s) {
        return new Color(rgba2hex(s));
    }
    /**
     * Convert to color from virtually anything.
     *
     * Will throw an exception if unable to resolve the color.
     *
     * @param   s  Source
     * @return     Color
     */ static fromAny(s) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isString(s)) {
            if (s[0] == "#") {
                return Color.fromString(s);
            } else if (s.substr(0, 3) == "rgb") {
                return Color.fromCSS(s);
            }
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(s)) {
            return Color.fromHex(s);
        } else if (s instanceof Color) {
            return Color.fromHex(s.hex);
        }
        throw new Error("Unknown color syntax: " + s);
    }
    /**
     * Returns a new [[Color]] object based on either `lightAlternative` or
     * `darkAlternative` depending on which one is more contrasting with
     * the `color`.
     *
     * @param   color             Reference color
     * @param   lightAlternative  Light color
     * @param   darkAlternative   Dark color
     * @return                    Alternative color
     */ static alternative(color, lightAlternative, darkAlternative) {
        const rgb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.alternativeColor({
            r: color.r,
            g: color.g,
            b: color.b
        }, lightAlternative ? {
            r: lightAlternative.r,
            g: lightAlternative.g,
            b: lightAlternative.b
        } : undefined, darkAlternative ? {
            r: darkAlternative.r,
            g: darkAlternative.g,
            b: darkAlternative.b
        } : undefined);
        return this.fromRGB(rgb.r, rgb.g, rgb.b);
    }
    /**
     * Returns an intermediate Color between two reference colors depending on
     * the progress (`diff`) between the two.
     *
     * @param   diff  Progress
     * @param   from  Source color
     * @param   to    Target color
     * @param   mode  Interpolation mode
     * @return        Color
     */ static interpolate(diff, from, to, mode = "rgb") {
        if (mode == "hsl") {
            const fromHSL = from.toHSL();
            const toHSL = to.toHSL();
            return Color.fromHSL((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, fromHSL.h, toHSL.h), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, fromHSL.s, toHSL.s), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, fromHSL.l, toHSL.l));
        } else {
            return Color.fromRGB((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, from.r, to.r), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, from.g, to.g), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["range"])(diff, from.b, to.b));
        }
    }
    /**
     * Returns a new [[Color]] lightened by `percent` value.
     *
     * Use negative value to darken the color.
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */ static lighten(color, percent) {
        const rgb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.lighten({
            r: color.r,
            g: color.g,
            b: color.b
        }, percent);
        return Color.fromRGB(rgb.r, rgb.g, rgb.b);
    }
    /**
     * Returns a new [[Color]] brightened by `percent` value.
     *
     * Use negative value to dim the color.
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */ static brighten(color, percent) {
        const rgb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.brighten({
            r: color.r,
            g: color.g,
            b: color.b
        }, percent);
        return Color.fromRGB(rgb.r, rgb.g, rgb.b);
    }
    /**
     * Returns a new [[Color]] saturated by `percent` value.
     *
     * Value range is between `0` (fully desaturated), to `1` (full color).
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */ static saturate(color, percent) {
        const rgb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.saturate({
            r: color.r,
            g: color.g,
            b: color.b
        }, percent);
        return Color.fromRGB(rgb.r, rgb.g, rgb.b);
    }
} //# sourceMappingURL=Color.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "AnimationState": ()=>AnimationState,
    "AnimationTime": ()=>AnimationTime,
    "colorInterpolate": ()=>colorInterpolate,
    "defaultInterpolate": ()=>defaultInterpolate,
    "getInterpolate": ()=>getInterpolate,
    "normalize": ()=>normalize,
    "percentInterpolate": ()=>percentInterpolate,
    "range": ()=>range,
    "waitForAnimations": ()=>waitForAnimations
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tslib/tslib.es6.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
function waitForAnimations(animations) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["__awaiter"])(this, void 0, void 0, function*() {
        if (animations !== undefined) {
            const promises = [];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(animations, (_, animation)=>{
                promises.push(animation.waitForStop());
            });
            yield Promise.all(promises);
        }
    });
}
function normalize(value, min, max) {
    if (min === max) {
        return 0;
    } else {
        return Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);
    }
}
function range(diff, from, to) {
    return from + diff * (to - from);
}
function defaultInterpolate(diff, from, to) {
    if (diff >= 1) {
        return to;
    } else {
        return from;
    }
}
function percentInterpolate(diff, from, to) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"](range(diff, from.percent, to.percent));
}
function colorInterpolate(diff, from, to) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].interpolate(diff, from, to);
}
function getInterpolate(from, to) {
    if (typeof from === "number" && typeof to === "number") {
        return range;
    }
    if (from instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"] && to instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Percent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Percent"]) {
        return percentInterpolate;
    }
    if (from instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"] && to instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"]) {
        return colorInterpolate;
    }
    return defaultInterpolate;
}
var AnimationState;
(function(AnimationState) {
    AnimationState[AnimationState["Stopped"] = 0] = "Stopped";
    AnimationState[AnimationState["Playing"] = 1] = "Playing";
    AnimationState[AnimationState["Paused"] = 2] = "Paused";
})(AnimationState || (AnimationState = {}));
class AnimationTime {
    constructor(entity, duration){
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_playingDuration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_startingTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"]()
        });
        Object.defineProperty(this, "easing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._entity = entity;
        this._duration = duration;
    }
    _stopEvent() {
        const type = "stopped";
        if (this.events.isEnabled(type)) {
            this.events.dispatch(type, {
                type: type,
                target: this
            });
        }
    }
    _runAnimation(currentTime) {
        if (this._playingDuration !== null) {
            if (this._startingTime === null) {
                this._startingTime = currentTime;
                return AnimationState.Playing;
            } else {
                const diff = (currentTime - this._startingTime) / this._playingDuration;
                if (diff >= 1) {
                    this._playingDuration = null;
                    this._startingTime = null;
                    this._from = this._to;
                    this._current = this._to;
                    this._entity.markDirty();
                    this._stopEvent();
                    const type = "ended";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, {
                            type: type,
                            target: this
                        });
                    }
                    return AnimationState.Stopped;
                } else {
                    this._current = range(diff, this._from, this._to);
                    this._entity.markDirty();
                    const type = "progress";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, {
                            type: type,
                            target: this,
                            progress: diff
                        });
                    }
                    return AnimationState.Playing;
                }
            }
        } else {
            return AnimationState.Stopped;
        }
    }
    _play() {
        this._from = this._current;
        if (this._playingDuration === null) {
            this._entity._root._addAnimation(this);
            const type = "started";
            if (this.events.isEnabled(type)) {
                this.events.dispatch(type, {
                    type: type,
                    target: this
                });
            }
        } else {
            this._startingTime = null;
        }
        this._playingDuration = Math.abs(this._to - this._from) * this._duration;
    }
    get duration() {
        return this._duration;
    }
    set duration(value) {
        if (this._duration !== value) {
            this._duration = value;
            if (value === 0) {
                this.jumpTo(this._to);
            } else if (this._current !== this._to) {
                this._play();
            }
        }
    }
    get current() {
        if (this.easing) {
            return this.easing(this._current);
        } else {
            return this._current;
        }
    }
    stop() {
        this.jumpTo(this._current);
    }
    jumpTo(value) {
        if (this._current !== value) {
            this._entity.markDirty();
        }
        if (this._playingDuration !== null) {
            this._stopEvent();
        }
        this._playingDuration = null;
        this._startingTime = null;
        this._current = value;
        this._from = value;
        this._to = value;
    }
    tweenTo(value) {
        if (this._current === value || this._duration === 0) {
            this.jumpTo(value);
        } else {
            if (this._to !== value) {
                this._to = value;
                this._play();
            }
        }
    }
} /*export class AnimationValue extends AnimationTime {
    public _min: number;
    public _max: number;

    constructor(entity: Entity, duration: number, min: number, max: number) {
        super(entity, duration);
        this._min = min;
        this._max = max;
    }

    public get min(): number {
        return this._min;
    }

    public set min(value: number) {
        if (this._min !== value) {
            this._min = value;
            this._entity.markDirty();
        }
    }

    public get max(): number {
        return this._max;
    }

    public set max(value: number) {
        if (this._max !== value) {
            this._max = value;
            this._entity.markDirty();
        }
    }

    public currentValue(): number {
        return range(super.currentTime(), this._min, this._max);
    }

    public jumpToValue(value: number) {
        super.jumpToTime(normalize(value, this._min, this._max));
    }

    public tweenToValue(value: number) {
        super.tweenToTime(normalize(value, this._min, this._max));
    }
}
*/  //# sourceMappingURL=Animation.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "DEGREES": ()=>DEGREES,
    "HALFPI": ()=>HALFPI,
    "PI": ()=>PI,
    "RADIANS": ()=>RADIANS,
    "boundsOverlap": ()=>boundsOverlap,
    "ceil": ()=>ceil,
    "circlesOverlap": ()=>circlesOverlap,
    "closest": ()=>closest,
    "cos": ()=>cos,
    "fitAngleToRange": ()=>fitAngleToRange,
    "fitToRange": ()=>fitToRange,
    "getAngle": ()=>getAngle,
    "getArcBounds": ()=>getArcBounds,
    "getArcPoint": ()=>getArcPoint,
    "getCubicControlPointA": ()=>getCubicControlPointA,
    "getCubicControlPointB": ()=>getCubicControlPointB,
    "getPointOnLine": ()=>getPointOnLine,
    "getPointOnQuadraticCurve": ()=>getPointOnQuadraticCurve,
    "inBounds": ()=>inBounds,
    "mergeBounds": ()=>mergeBounds,
    "normalizeAngle": ()=>normalizeAngle,
    "round": ()=>round,
    "sin": ()=>sin,
    "spiralPoints": ()=>spiralPoints,
    "tan": ()=>tan
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const PI = Math.PI;
const HALFPI = PI / 2;
const RADIANS = PI / 180;
const DEGREES = 180 / PI;
function round(value, precision, floor) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(precision) || precision <= 0) {
        let rounded = Math.round(value);
        if (floor) {
            if (rounded - value == 0.5) {
                rounded--;
            }
        }
        return rounded;
    } else {
        let d = Math.pow(10, precision);
        return Math.round(value * d) / d;
    }
}
function ceil(value, precision) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(precision) || precision <= 0) {
        return Math.ceil(value);
    } else {
        let d = Math.pow(10, precision);
        return Math.ceil(value * d) / d;
    }
}
function getCubicControlPointA(p0, p1, p2, tensionX, tensionY) {
    return {
        x: (-p0.x + p1.x / tensionX + p2.x) * tensionX,
        y: (-p0.y + p1.y / tensionY + p2.y) * tensionY
    };
}
function getCubicControlPointB(p1, p2, p3, tensionX, tensionY) {
    return {
        x: (p1.x + p2.x / tensionX - p3.x) * tensionX,
        y: (p1.y + p2.y / tensionY - p3.y) * tensionY
    };
}
function fitToRange(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
function sin(angle) {
    return Math.sin(RADIANS * angle);
}
function tan(angle) {
    return Math.tan(RADIANS * angle);
}
function cos(angle) {
    return Math.cos(RADIANS * angle);
}
function normalizeAngle(value) {
    value = value % 360;
    if (value < 0) {
        value += 360;
    }
    return value;
}
function getArcBounds(cx, cy, startAngle, endAngle, radius) {
    let minX = Number.MAX_VALUE;
    let minY = Number.MAX_VALUE;
    let maxX = -Number.MAX_VALUE;
    let maxY = -Number.MAX_VALUE;
    let bpoints = [];
    bpoints.push(getArcPoint(radius, startAngle));
    bpoints.push(getArcPoint(radius, endAngle));
    let fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
    let toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);
    for(let angle = fromAngle; angle <= toAngle; angle += 90){
        if (angle >= startAngle && angle <= endAngle) {
            bpoints.push(getArcPoint(radius, angle));
        }
    }
    for(let i = 0; i < bpoints.length; i++){
        let pt = bpoints[i];
        if (pt.x < minX) {
            minX = pt.x;
        }
        if (pt.y < minY) {
            minY = pt.y;
        }
        if (pt.x > maxX) {
            maxX = pt.x;
        }
        if (pt.y > maxY) {
            maxY = pt.y;
        }
    }
    return {
        left: cx + minX,
        top: cy + minY,
        right: cx + maxX,
        bottom: cy + maxY
    };
}
function getArcPoint(radius, arc) {
    return {
        x: radius * cos(arc),
        y: radius * sin(arc)
    };
}
function mergeBounds(bounds) {
    const len = bounds.length;
    if (len > 0) {
        let bound = bounds[0];
        let left = bound.left;
        let top = bound.top;
        let right = bound.right;
        let bottom = bound.bottom;
        if (len > 1) {
            for(let i = 1; i < len; i++){
                bound = bounds[i];
                left = Math.min(bound.left, left);
                right = Math.max(bound.right, right);
                top = Math.min(bound.top, top);
                bottom = Math.max(bound.bottom, bottom);
            }
        }
        return {
            left,
            right,
            top,
            bottom
        };
    }
    return {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
    };
}
function fitAngleToRange(value, startAngle, endAngle) {
    if (startAngle > endAngle) {
        let temp = startAngle;
        startAngle = endAngle;
        endAngle = temp;
    }
    value = normalizeAngle(value);
    let count = (startAngle - normalizeAngle(startAngle)) / 360;
    if (value < startAngle) {
        value += 360 * (count + 1);
    }
    let maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
    let maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
    if (value > endAngle) {
        if (value - 360 > startAngle) {
            value -= 360;
        } else {
            if (value < maxEnd) {
                value = endAngle;
            } else {
                value = startAngle;
            }
        }
    }
    if (value < startAngle) {
        if (value > maxStart) {
            value = startAngle;
        } else {
            value = endAngle;
        }
    }
    return value;
}
function inBounds(point, bounds) {
    if (point.x >= bounds.left && point.y >= bounds.top && point.x <= bounds.right && point.y <= bounds.bottom) {
        return true;
    }
    return false;
}
function getAngle(point1, point2) {
    if (!point2) {
        point2 = {
            x: point1.x * 2,
            y: point1.y * 2
        };
    }
    let diffX = point2.x - point1.x;
    let diffY = point2.y - point1.y;
    let angle = Math.atan2(diffY, diffX) * DEGREES;
    if (angle < 0) {
        angle += 360;
    }
    return normalizeAngle(angle);
}
function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
    let x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
    let y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
    return {
        x: x,
        y: y
    };
}
function getPointOnLine(pointA, pointB, position) {
    return {
        x: pointA.x + (pointB.x - pointA.x) * position,
        y: pointA.y + (pointB.y - pointA.y) * position
    };
}
function closest(values, referenceValue) {
    return values.reduce(function(prev, curr) {
        return Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev;
    });
}
function boundsOverlap(bounds1, bounds2) {
    const horizontalOverlap = bounds1.left < bounds2.right && bounds1.right > bounds2.left;
    const verticalOverlap = bounds1.top < bounds2.bottom && bounds1.bottom > bounds2.top;
    return horizontalOverlap && verticalOverlap;
}
function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {
    let r = innerRadius + 0.01;
    let angle = startAngle * RADIANS;
    let points = [];
    while(r < radius + radiusStep){
        let stepSize = step;
        if (stepSize / 2 > r) {
            stepSize = 2 * r;
        }
        angle += 2 * Math.asin(stepSize / 2 / r);
        if (angle * DEGREES > endAngle + (radius - innerRadius) / radiusStep * 360) {
            break;
        }
        let degrees = angle * DEGREES;
        let point = {
            x: cx + r * Math.cos(angle),
            y: cy + r * radiusY / radius * Math.sin(angle)
        };
        points.push(point);
        r = innerRadius + degrees / 360 * radiusStep;
    }
    points.shift();
    return points;
}
function circlesOverlap(circle1, circle2) {
    return Math.hypot(circle1.x - circle2.x, circle1.y - circle2.y) <= circle1.radius + circle2.radius;
} //# sourceMappingURL=Math.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * A collection of easing functions
 *
 * Parts of this collection are taken from D3.js library (https://d3js.org/)
 */ /**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */ __turbopack_esm__({
    "bounce": ()=>bounce,
    "circle": ()=>circle,
    "cubic": ()=>cubic,
    "elastic": ()=>elastic,
    "exp": ()=>exp,
    "inOut": ()=>inOut,
    "linear": ()=>linear,
    "out": ()=>out,
    "pow": ()=>pow,
    "quad": ()=>quad,
    "sine": ()=>sine,
    "yoyo": ()=>yoyo
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function linear(t) {
    return t;
}
function quad(t) {
    return t * t;
}
function cubic(t) {
    return t * t * t;
}
function pow(t, e) {
    return Math.pow(t, e);
}
function exp(t) {
    return Math.pow(2, 10 * t - 10);
}
function sine(t) {
    return 1 - Math.cos(t * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.HALFPI);
}
function circle(t) {
    return 1 - Math.sqrt(1 - t * t);
}
function yoyo(ease) {
    return function(t) {
        if (t < 0.5) {
            return ease(t * 2.0);
        } else {
            return ease((1.0 - t) * 2.0);
        }
    };
}
function out(ease) {
    return function(t) {
        return 1.0 - ease(1.0 - t);
    };
}
function inOut(ease) {
    return function(t) {
        if (t <= 0.5) {
            return ease(t * 2.0) / 2.0;
        } else {
            return 1.0 - ease((1.0 - t) * 2.0) / 2.0;
        }
    };
}
/**
 * ============================================================================
 * BOUNCE
 * ============================================================================
 * @hidden
 */ let b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
function bounce(t) {
    return 1 - bounceOut(1 - t);
}
/**
 * @ignore
 */ function bounceOut(t) {
    t = t;
    if (t < b1) {
        return b0 * t * t;
    } else if (t < b3) {
        return b0 * (t -= b2) * t + b4;
    } else if (t < b6) {
        return b0 * (t -= b5) * t + b7;
    } else {
        return b0 * (t -= b8) * t + b9;
    }
}
/**
 * ============================================================================
 * ELASTIC
 * ============================================================================
 * @hidden
 */ /**
 * @ignore
 */ let tau = 2 * Math.PI;
/**
 * @ignore
 */ let amplitude = 1;
/**
 * @ignore
 */ let period = 0.3 / tau;
/**
 * @ignore
 */ let s = Math.asin(1 / amplitude) * period;
function elastic(t) {
    let v = t;
    return amplitude * Math.pow(2, 10 * --v) * Math.sin((s - v) / period);
} //# sourceMappingURL=Ease.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/States.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "State": ()=>State,
    "States": ()=>States
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Ease$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class State {
    constructor(entity, settings){
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_userSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._entity = entity;
        this._settings = settings;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(settings, (key)=>{
            this._userSettings[key] = true;
        });
    }
    get(key, fallback) {
        const value = this._settings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    /**
     * @ignore
     */ setRaw(key, value) {
        this._settings[key] = value;
    }
    /**
     * Sets a setting `value` for the specified `key` to be set when the state
     * is applied.
     *
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */ set(key, value) {
        this._userSettings[key] = true;
        this.setRaw(key, value);
    }
    /**
     * Removes a setting value for the specified `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */ remove(key) {
        delete this._userSettings[key];
        delete this._settings[key];
    }
    /**
     * Sets multiple settings at once.
     *
     * `settings` must be an object with key: value pairs.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param settings Settings
     */ setAll(settings) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(settings).forEach((key)=>{
            this.set(key, settings[key]);
        });
    }
    _eachSetting(f) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._settings, f);
    }
    /**
     * Applies the state to the target element.
     *
     * All setting values are set immediately.
     */ apply() {
        const seen = {};
        seen["stateAnimationEasing"] = true;
        seen["stateAnimationDuration"] = true;
        const defaultState = this._entity.states.lookup("default");
        this._eachSetting((key, value)=>{
            if (!seen[key]) {
                seen[key] = true;
                // save values to default state
                if (this !== defaultState) {
                    if (!(key in defaultState._settings)) {
                        defaultState._settings[key] = this._entity.get(key);
                    }
                }
                this._entity.set(key, value);
            }
        });
    }
    /**
     * Applies the state to the target element.
     *
     * Returns an object representing all [[Animation]] objects created for
     * each setting key transition.
     *
     * @return           Animations
     */ applyAnimate(duration) {
        if (duration == null) {
            duration = this._settings.stateAnimationDuration;
        }
        if (duration == null) {
            duration = this.get("stateAnimationDuration", this._entity.get("stateAnimationDuration", 0));
        }
        let easing = this._settings.stateAnimationEasing;
        if (easing == null) {
            easing = this.get("stateAnimationEasing", this._entity.get("stateAnimationEasing", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Ease$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cubic));
        }
        const defaultState = this._entity.states.lookup("default");
        const seen = {};
        seen["stateAnimationEasing"] = true;
        seen["stateAnimationDuration"] = true;
        const animations = {};
        this._eachSetting((key, value)=>{
            if (!seen[key]) {
                seen[key] = true;
                // save values to default state
                if (this != defaultState) {
                    if (!(key in defaultState._settings)) {
                        defaultState._settings[key] = this._entity.get(key);
                    }
                }
                const animation = this._entity.animate({
                    key: key,
                    to: value,
                    duration: duration,
                    easing: easing
                });
                if (animation) {
                    animations[key] = animation;
                }
            }
        });
        return animations;
    }
}
class States {
    constructor(entity){
        Object.defineProperty(this, "_states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._entity = entity;
    }
    /**
     * Checks if a state by `name` exists. Returns it there is one.
     *
     * @param  name  State name
     * @return       State
     */ lookup(name) {
        return this._states[name];
    }
    /**
     * Sets supplied `settings` on a state by the `name`.
     *
     * If such state does not yet exists, it is created.
     *
     * @param   name      State name
     * @param   settings  Settings
     * @return            New State
     */ create(name, settings) {
        const state = this._states[name];
        if (state) {
            state.setAll(settings);
            return state;
        } else {
            const state = new State(this._entity, settings);
            this._states[name] = state;
            return state;
        }
    }
    /**
     * Removes the state called `name`.
     *
     * @param   name      State name
     */ remove(name) {
        delete this._states[name];
    }
    /**
     * Applies a named state to the target element.
     *
     * @param  newState  State name
     */ apply(newState) {
        const state = this._states[newState];
        if (state) {
            state.apply();
        }
        this._entity._applyState(newState);
    }
    /**
     * Applies a named state to the element.
     *
     * Returns an object representing all [[Animation]] objects created for
     * each setting key transition.
     *
     * @param   newState  State name
     * @return            Animations
     */ applyAnimate(newState, duration) {
        let animations;
        const state = this._states[newState];
        if (state) {
            animations = state.applyAnimate(duration);
        }
        this._entity._applyStateAnimated(newState, duration);
        return animations;
    }
} //# sourceMappingURL=States.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Order.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @ignore
 */ __turbopack_esm__({
    "compare": ()=>compare,
    "compareArray": ()=>compareArray,
    "compareNumber": ()=>compareNumber,
    "reverse": ()=>reverse
});
function compare(left, right) {
    if (left === right) {
        return 0;
    } else if (left < right) {
        return -1;
    } else {
        return 1;
    }
}
function compareArray(left, right, f) {
    const leftLength = left.length;
    const rightLength = right.length;
    const length = Math.min(leftLength, rightLength);
    for(let i = 0; i < length; ++i){
        const order = f(left[i], right[i]);
        if (order !== 0) {
            return order;
        }
    }
    return compare(leftLength, rightLength);
}
function reverse(order) {
    if (order < 0) {
        return 1;
    } else if (order > 0) {
        return -1;
    } else {
        return 0;
    }
}
function compareNumber(a, b) {
    if (a === b) {
        return 0;
    } else if (a < b) {
        return -1;
    } else {
        return 1;
    }
} //# sourceMappingURL=Order.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Adapters": ()=>Adapters,
    "Animation": ()=>Animation,
    "Entity": ()=>Entity,
    "Settings": ()=>Settings
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$States$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/States.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/Registry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Ease$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Order.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
class Adapters {
    constructor(entity){
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_callbacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._entity = entity;
    }
    /**
     * Add a function (`callback`) that will modify value for setting `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
     */ add(key, callback) {
        let callbacks = this._callbacks[key];
        if (callbacks === undefined) {
            callbacks = this._callbacks[key] = [];
        }
        callbacks.push(callback);
        this._entity._markDirtyKey(key);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(callbacks, callback)) {
                this._entity._markDirtyKey(key);
            }
        });
    }
    /**
     * Removes all adapters for the specific key.
     *
     * @since 5.1.0
     */ remove(key) {
        const callbacks = this._callbacks[key];
        if (callbacks !== undefined) {
            delete this._callbacks[key];
            if (callbacks.length !== 0) {
                this._entity._markDirtyKey(key);
            }
        }
    }
    /**
     * Enables (previously disabled) adapters for specific key.
     *
     * @since 5.1.0
     */ enable(key) {
        if (this._disabled[key]) {
            delete this._disabled[key];
            this._entity._markDirtyKey(key);
        }
    }
    /**
     * Disables all adapters for specific key.
     *
     * @since 5.1.0
     */ disable(key) {
        if (!this._disabled[key]) {
            this._disabled[key] = true;
            this._entity._markDirtyKey(key);
        }
    }
    /**
     * @ignore
     */ fold(key, value) {
        if (!this._disabled[key]) {
            const callbacks = this._callbacks[key];
            if (callbacks !== undefined) {
                for(let i = 0, len = callbacks.length; i < len; ++i){
                    value = callbacks[i](value, this._entity, key);
                }
            }
        }
        return value;
    }
}
class Animation {
    constructor(animation, from, to, duration, easing, loops, startingTime){
        Object.defineProperty(this, "_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_easing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_loops", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_interpolate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_oldTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_stopped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_playing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"]()
        });
        this._animation = animation;
        this._from = from;
        this._to = to;
        this._duration = duration;
        this._easing = easing;
        this._loops = loops;
        this._interpolate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getInterpolate"])(from, to);
        this._oldTime = startingTime;
    }
    get to() {
        return this._to;
    }
    get from() {
        return this._from;
    }
    get playing() {
        return this._playing;
    }
    get stopped() {
        return this._stopped;
    }
    stop() {
        if (!this._stopped) {
            this._stopped = true;
            this._playing = false;
            if (this.events.isEnabled("stopped")) {
                this.events.dispatch("stopped", {
                    type: "stopped",
                    target: this
                });
            }
        }
    }
    pause() {
        this._playing = false;
        this._oldTime = null;
    }
    play() {
        if (!this._stopped && !this._playing) {
            this._playing = true;
            this._animation._startAnimation();
        }
    }
    get percentage() {
        return this._time / this._duration;
    }
    waitForStop() {
        return new Promise((resolve, _reject)=>{
            if (this._stopped) {
                resolve();
            } else {
                const listener = ()=>{
                    stopped.dispose();
                    resolve();
                };
                const stopped = this.events.on("stopped", listener);
            }
        });
    }
    _checkEnded() {
        if (this._loops > 1) {
            --this._loops;
            return false;
        } else {
            return true;
        }
    }
    _run(currentTime) {
        if (this._oldTime !== null) {
            this._time += currentTime - this._oldTime;
            if (this._time > this._duration) {
                this._time = this._duration;
            }
        }
        this._oldTime = currentTime;
    }
    _reset(currentTime) {
        this._oldTime = currentTime;
        this._time = 0;
    }
    _value(diff) {
        return this._interpolate(this._easing(diff), this._from, this._to);
    }
}
/**
 * @ignore
 */ let counter = 0;
class Settings {
    constructor(settings){
        /**
         * Unique ID.
         */ Object.defineProperty(this, "uid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ++counter
        });
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_privateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_settingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_privateSettingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_prevSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_prevPrivateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_animatingSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_animatingPrivateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // TODO move this into Entity
        Object.defineProperty(this, "_userProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._settings = settings;
    }
    _checkDirty() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._settings).forEach((key)=>{
            this._userProperties[key] = true;
            this._markDirtyKey(key);
        });
    }
    /**
     * @ignore
     */ resetUserSettings() {
        this._userProperties = {};
    }
    _runAnimation(currentTime) {
        let state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnimationState"].Stopped;
        if (!this.isDisposed()) {
            let playing = false;
            let paused = false;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._animatingSettings, (key, animation)=>{
                if (animation.stopped) {
                    this._stopAnimation(key);
                } else if (animation.playing) {
                    animation._run(currentTime);
                    const diff = animation.percentage;
                    if (diff >= 1) {
                        if (animation._checkEnded()) {
                            this.set(key, animation._value(1));
                        } else {
                            playing = true;
                            animation._reset(currentTime);
                            this._set(key, animation._value(1));
                        }
                    } else {
                        playing = true;
                        this._set(key, animation._value(diff));
                    }
                } else {
                    paused = true;
                }
            });
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._animatingPrivateSettings, (key, animation)=>{
                if (animation.stopped) {
                    this._stopAnimationPrivate(key);
                } else if (animation.playing) {
                    animation._run(currentTime);
                    const diff = animation.percentage;
                    if (diff >= 1) {
                        if (animation._checkEnded()) {
                            this.setPrivate(key, animation._value(1));
                        } else {
                            playing = true;
                            animation._reset(currentTime);
                            this._setPrivate(key, animation._value(1));
                        }
                    } else {
                        playing = true;
                        this._setPrivate(key, animation._value(diff));
                    }
                } else {
                    paused = true;
                }
            });
            if (playing) {
                state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnimationState"].Playing;
            } else if (paused) {
                state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Animation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnimationState"].Paused;
            }
        }
        return state;
    }
    _markDirtyKey(_key) {
        this.markDirty();
    }
    _markDirtyPrivateKey(_key) {
        this.markDirty();
    }
    /**
     * Sets a callback function to invoke when specific key of settings changes
     * or is set.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @param   key       Settings key
     * @param   callback  Callback
     * @return            Disposer for event
     */ on(key, callback) {
        let events = this._settingEvents[key];
        if (events === undefined) {
            events = this._settingEvents[key] = [];
        }
        events.push(callback);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
            if (events.length === 0) {
                delete this._settingEvents[key];
            }
        });
    }
    /**
     * Removes a callback for when value of a setting changes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @param   key       Private settings key
     * @param   callback  Callback
     * @since 5.9.2
     */ off(key, callback) {
        let events = this._settingEvents[key];
        if (events !== undefined && callback !== undefined) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
        } else {
            delete this._settingEvents[key];
        }
    }
    /**
     * Sets a callback function to invoke when specific key of private settings
     * changes or is set.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @param   key       Private settings key
     * @param   callback  Callback
     * @return            Disposer for event
     */ onPrivate(key, callback) {
        let events = this._privateSettingEvents[key];
        if (events === undefined) {
            events = this._privateSettingEvents[key] = [];
        }
        events.push(callback);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
            if (events.length === 0) {
                delete this._privateSettingEvents[key];
            }
        });
    }
    /**
     * Removes a callback for when value of a private setting changes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @param   key       Private settings key
     * @param   callback  Callback
     * @since 5.9.2
     */ offPrivate(key, callback) {
        let events = this._privateSettingEvents[key];
        if (events !== undefined && callback !== undefined) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
        } else {
            delete this._privateSettingEvents[key];
        }
    }
    /**
     * @ignore
     */ getRaw(key, fallback) {
        const value = this._settings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    /**
     * Returns `true` if the setting exists.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key        Settings key
     * @return  {boolean}  Key exists
     */ has(key) {
        return key in this._settings;
    }
    get(key, fallback) {
        return this.getRaw(key, fallback);
    }
    _sendKeyEvent(key, value) {
        const events = this._settingEvents[key];
        if (events !== undefined) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (callback)=>{
                callback(value, this, key);
            });
        }
    }
    _sendPrivateKeyEvent(key, value) {
        const events = this._privateSettingEvents[key];
        if (events !== undefined) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (callback)=>{
                callback(value, this, key);
            });
        }
    }
    /**
     * @ignore
     */ _setRaw(key, old, value) {
        this._prevSettings[key] = old;
        this._sendKeyEvent(key, value);
    }
    /**
     * @ignore
     */ setRaw(key, value) {
        const old = this._settings[key];
        this._settings[key] = value;
        if (old !== value) {
            this._setRaw(key, old, value);
        }
    }
    /**
     * @ignore
     */ _set(key, value) {
        const old = this._settings[key];
        this._settings[key] = value;
        if (old !== value) {
            this._setRaw(key, old, value);
            this._markDirtyKey(key);
        }
    }
    _stopAnimation(key) {
        const animation = this._animatingSettings[key];
        if (animation) {
            delete this._animatingSettings[key];
            animation.stop();
        }
    }
    /**
     * Sets a setting `value` for the specified `key`, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */ set(key, value) {
        this._set(key, value);
        this._stopAnimation(key);
        return value;
    }
    /**
     * Removes a setting value for the specified `key`;
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */ remove(key) {
        if (key in this._settings) {
            this._prevSettings[key] = this._settings[key];
            delete this._settings[key];
            this._sendKeyEvent(key, undefined);
            this._markDirtyKey(key);
        }
        this._stopAnimation(key);
    }
    /**
     * Removes all keys;
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     */ removeAll() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._settings), (key)=>{
            this.remove(key);
        });
    }
    /**
     * Returns a value of a private setting.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info
     */ getPrivate(key, fallback) {
        const value = this._privateSettings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    /**
     * @ignore
     */ _setPrivateRaw(key, old, value) {
        this._prevPrivateSettings[key] = old;
        this._sendPrivateKeyEvent(key, value);
    }
    /**
     * @ignore
     */ setPrivateRaw(key, value) {
        const old = this._privateSettings[key];
        this._privateSettings[key] = value;
        if (old !== value) {
            this._setPrivateRaw(key, old, value);
        }
    }
    /**
     * @ignore
     */ _setPrivate(key, value) {
        const old = this._privateSettings[key];
        this._privateSettings[key] = value;
        if (old !== value) {
            this._setPrivateRaw(key, old, value);
            this._markDirtyPrivateKey(key);
        }
    }
    _stopAnimationPrivate(key) {
        const animation = this._animatingPrivateSettings[key];
        if (animation) {
            animation.stop();
            delete this._animatingPrivateSettings[key];
        }
    }
    /**
     * @ignore
     */ setPrivate(key, value) {
        this._setPrivate(key, value);
        this._stopAnimationPrivate(key);
        return value;
    }
    /**
     * @ignore
     */ removePrivate(key) {
        if (key in this._privateSettings) {
            this._prevPrivateSettings[key] = this._privateSettings[key];
            delete this._privateSettings[key];
            this._markDirtyPrivateKey(key);
        }
        this._stopAnimationPrivate(key);
    }
    /**
     * Sets multiple settings at once.
     *
     * `settings` must be an object with key: value pairs.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param settings Settings
     */ setAll(settings) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(settings, (key, value)=>{
            this.set(key, value);
        });
    }
    /**
     * Animates setting values from current/start values to new ones.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info
     * @param   options  Animation options
     * @return           Animation object
     */ animate(options) {
        const key = options.key;
        const to = options.to;
        const duration = options.duration || 0;
        const loops = options.loops || 1;
        const from = options.from === undefined ? this.get(key) : options.from;
        const easing = options.easing === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Ease$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.linear : options.easing;
        if (duration === 0) {
            this.set(key, to);
        } else {
            if (from === undefined || from === to) {
                this.set(key, to);
            } else {
                this.set(key, from);
                const animation = this._animatingSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());
                this._startAnimation();
                return animation;
            }
        }
        const animation = new Animation(this, from, to, duration, easing, loops, null);
        animation.stop();
        return animation;
    }
    /**
     * @ignore
     */ animatePrivate(options) {
        const key = options.key;
        const to = options.to;
        const duration = options.duration || 0;
        const loops = options.loops || 1;
        const from = options.from === undefined ? this.getPrivate(key) : options.from;
        const easing = options.easing === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Ease$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.linear : options.easing;
        if (duration === 0) {
            this.setPrivate(key, to);
        } else {
            if (from === undefined || from === to) {
                this.setPrivate(key, to);
            } else {
                this.setPrivate(key, from);
                const animation = this._animatingPrivateSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());
                this._startAnimation();
                return animation;
            }
        }
        const animation = new Animation(this, from, to, duration, easing, loops, null);
        animation.stop();
        return animation;
    }
    _dispose() {}
    /**
     * Returns `true` if this element is disposed.
     *
     * @return Disposed
     */ isDisposed() {
        return this._disposed;
    }
    /**
     * Disposes this object.
     */ dispose() {
        if (!this._disposed) {
            this._disposed = true;
            this._dispose();
        }
    }
}
class Entity extends Settings {
    /**
     * IMPORTANT! Do not instantiate this class via `new Class()` syntax.
     *
     * Use static method `Class.new()` instead.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @ignore
     */ constructor(root, settings, isReal, templates = []){
        super(settings);
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // for testing purposes
        Object.defineProperty(this, "states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$States$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["States"](this)
        });
        Object.defineProperty(this, "adapters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Adapters(this)
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this._createEvents()
        });
        Object.defineProperty(this, "_userPrivateProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dirtyPrivate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Templates for the themes
        Object.defineProperty(this, "_templates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Internal templates which can be overridden by the user's templates
        Object.defineProperty(this, "_internalTemplates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Default themes which can be overridden by the user's themes
        Object.defineProperty(this, "_defaultThemes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Disposers for all of the templates
        Object.defineProperty(this, "_templateDisposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_disposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Whether the template setup function should be run
        Object.defineProperty(this, "_runSetup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_disposerProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        this._root = root;
        this._internalTemplates = templates;
        if (settings.id) {
            this._registerId(settings.id);
        }
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   root      Root element
     * @param   settings  Settings
     * @param   template  Template
     * @return            Instantiated object
     */ static new(root, settings, template) {
        const x = new this(root, settings, true);
        x._template = template;
        x._afterNew();
        return x;
    }
    static _new(root, settings, templates = []) {
        const x = new this(root, settings, true, templates);
        x._afterNew();
        return x;
    }
    _afterNew() {
        this._checkDirty();
        let shouldApply = false;
        const template = this._template;
        if (template) {
            shouldApply = true;
            template._setObjectTemplate(this);
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._internalTemplates, (template)=>{
            shouldApply = true;
            template._setObjectTemplate(this);
        });
        if (shouldApply) {
            this._applyTemplates(false);
        }
        this.states.create("default", {});
        this._setDefaults();
    }
    // This is the same as _afterNew, except it also applies the themes.
    // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).
    _afterNewApplyThemes() {
        this._checkDirty();
        const template = this._template;
        if (template) {
            template._setObjectTemplate(this);
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._internalTemplates, (template)=>{
            template._setObjectTemplate(this);
        });
        this.states.create("default", {});
        this._setDefaults();
        this._applyThemes();
    }
    _createEvents() {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"]();
    }
    /**
     * @ignore
     */ get classNames() {
        return this.constructor.classNames;
    }
    /**
     * @ignore
     */ get className() {
        return this.constructor.className;
    }
    _setDefaults() {}
    _setDefaultFn(key, f) {
        const value = this.get(key);
        if (value) {
            return value;
        } else {
            const value = f();
            this.set(key, value);
            return value;
        }
    }
    _setDefault(key, value) {
        if (!this.has(key)) {
            super.set(key, value);
        }
    }
    _setRawDefault(key, value) {
        if (!this.has(key)) {
            super.setRaw(key, value);
        }
    }
    _clearDirty() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._dirty).forEach((key)=>{
            this._dirty[key] = false;
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(this._dirtyPrivate).forEach((key)=>{
            this._dirtyPrivate[key] = false;
        });
    }
    /**
     * @ignore
     */ isDirty(key) {
        return !!this._dirty[key];
    }
    /**
     * @ignore
     */ isPrivateDirty(key) {
        return !!this._dirtyPrivate[key];
    }
    _markDirtyKey(key) {
        this._dirty[key] = true;
        super._markDirtyKey(key);
    }
    _markDirtyPrivateKey(key) {
        this._dirtyPrivate[key] = true;
        super._markDirtyKey(key);
    }
    /**
     * Checks if element is of certain class (or inherits one).
     *
     * @param   type  Class name to check
     * @return {boolean} Is of class?
     */ isType(type) {
        return this.classNames.indexOf(type) !== -1;
    }
    _pushPropertyDisposer(key, disposer) {
        let disposers = this._disposerProperties[key];
        if (disposers === undefined) {
            disposers = this._disposerProperties[key] = [];
        }
        disposers.push(disposer);
        return disposer;
    }
    _disposeProperty(key) {
        const disposers = this._disposerProperties[key];
        if (disposers !== undefined) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(disposers, (disposer)=>{
                disposer.dispose();
            });
            delete this._disposerProperties[key];
        }
    }
    /**
     * @todo needs description
     * @param  value  Template
     */ set template(value) {
        const template = this._template;
        if (template !== value) {
            this._template = value;
            if (template) {
                template._removeObjectTemplate(this);
            }
            if (value) {
                value._setObjectTemplate(this);
            }
            this._applyTemplates();
        }
    }
    get template() {
        return this._template;
    }
    /**
     * @ignore
     */ markDirty() {
        this._root._addDirtyEntity(this);
    }
    _startAnimation() {
        this._root._addAnimation(this);
    }
    _animationTime() {
        return this._root.animationTime;
    }
    _applyState(_name) {}
    _applyStateAnimated(_name, _duration) {}
    get(key, fallback) {
        const value = this.adapters.fold(key, this._settings[key]);
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    /**
     * @ignore
     */ isUserSetting(key) {
        return this._userProperties[key] || false;
    }
    /**
     * Sets a setting `value` for the specified `key`, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */ set(key, value) {
        this._userProperties[key] = true;
        return super.set(key, value);
    }
    /**
     * @ignore
     */ setRaw(key, value) {
        this._userProperties[key] = true;
        super.setRaw(key, value);
    }
    /**
     * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */ _setSoft(key, value) {
        if (!this._userProperties[key]) {
            return super.set(key, value);
        }
        return value;
    }
    /**
     * Removes a setting value for the specified `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */ remove(key) {
        delete this._userProperties[key];
        this._removeTemplateProperty(key);
    }
    /**
     * @ignore
     */ setPrivate(key, value) {
        this._userPrivateProperties[key] = true;
        return super.setPrivate(key, value);
    }
    /**
     * @ignore
     */ setPrivateRaw(key, value) {
        this._userPrivateProperties[key] = true;
        super.setPrivateRaw(key, value);
    }
    /**
     * @ignore
     */ removePrivate(key) {
        delete this._userPrivateProperties[key];
        this._removeTemplatePrivateProperty(key);
    }
    _setTemplateProperty(template, key, value) {
        if (!this._userProperties[key]) {
            const match = this._findTemplateByKey(key);
            if (template === match) {
                super.set(key, value);
            }
        }
    }
    _setTemplatePrivateProperty(template, key, value) {
        if (!this._userPrivateProperties[key]) {
            const match = this._findTemplateByPrivateKey(key);
            if (template === match) {
                super.setPrivate(key, value);
            }
        }
    }
    _removeTemplateProperty(key) {
        if (!this._userProperties[key]) {
            const match = this._findTemplateByKey(key);
            if (match) {
                // TODO don't stop the animation if the property didn't change
                super.set(key, match._settings[key]);
            } else {
                super.remove(key);
            }
        }
    }
    _removeTemplatePrivateProperty(key) {
        if (!this._userPrivateProperties[key]) {
            const match = this._findTemplateByPrivateKey(key);
            if (match) {
                // TODO don't stop the animation if the property didn't change
                super.setPrivate(key, match._privateSettings[key]);
            } else {
                super.removePrivate(key);
            }
        }
    }
    _walkParents(f) {
        f(this._root._rootContainer);
        f(this);
    }
    // TODO faster version of this method which is specialized to just 1 key
    _applyStateByKey(name) {
        const other = this.states.create(name, {});
        const seen = {};
        this._eachTemplate((template)=>{
            const state = template.states.lookup(name);
            if (state) {
                state._apply(other, seen);
            }
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(other._settings, (key)=>{
            if (!seen[key] && !other._userSettings[key]) {
                other.remove(key);
            }
        });
    }
    _applyTemplate(template, state) {
        this._templateDisposers.push(template._apply(this, state));
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(template._settings, (key, value)=>{
            if (!state.settings[key] && !this._userProperties[key]) {
                state.settings[key] = true;
                super.set(key, value);
            }
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(template._privateSettings, (key, value)=>{
            if (!state.privateSettings[key] && !this._userPrivateProperties[key]) {
                state.privateSettings[key] = true;
                super.setPrivate(key, value);
            }
        });
        if (this._runSetup && template.setup) {
            this._runSetup = false;
            template.setup(this);
        }
    }
    /**
     * Calls the closure with each template and returns the first template which is true
     */ _findStaticTemplate(f) {
        if (this._template) {
            if (f(this._template)) {
                return this._template;
            }
        }
    }
    _eachTemplate(f) {
        this._findStaticTemplate((template)=>{
            f(template);
            return false;
        });
        // _internalTemplates is sorted with most specific to the right
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachReverse(this._internalTemplates, f);
        // _templates is sorted with most specific to the left
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._templates, f);
    }
    _applyTemplates(remove = true) {
        if (remove) {
            this._disposeTemplates();
        }
        const state = {
            settings: {},
            privateSettings: {},
            states: {}
        };
        this._eachTemplate((template)=>{
            this._applyTemplate(template, state);
        });
        if (remove) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._settings, (key)=>{
                if (!this._userProperties[key] && !state.settings[key]) {
                    super.remove(key);
                }
            });
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._privateSettings, (key)=>{
                if (!this._userPrivateProperties[key] && !state.privateSettings[key]) {
                    super.removePrivate(key);
                }
            });
        }
    }
    _findTemplate(f) {
        const value = this._findStaticTemplate(f);
        if (value === undefined) {
            // _internalTemplates is sorted with most specific to the right
            const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.findReverse(this._internalTemplates, f);
            if (value === undefined) {
                // _templates is sorted with most specific to the left
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.find(this._templates, f);
            } else {
                return value;
            }
        } else {
            return value;
        }
    }
    _findTemplateByKey(key) {
        return this._findTemplate((template)=>{
            return key in template._settings;
        });
    }
    _findTemplateByPrivateKey(key) {
        return this._findTemplate((template)=>{
            return key in template._privateSettings;
        });
    }
    _disposeTemplates() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._templateDisposers, (disposer)=>{
            disposer.dispose();
        });
        this._templateDisposers.length = 0;
    }
    _removeTemplates() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._templates, (template)=>{
            template._removeObjectTemplate(this);
        });
        this._templates.length = 0;
    }
    _applyThemes(force = false) {
        let isConnected = false;
        const defaults = [];
        let themes = [];
        const themeTags = new Set();
        const tags = this.get("themeTagsSelf");
        if (tags) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(tags, (tag)=>{
                themeTags.add(tag);
            });
        }
        this._walkParents((entity)=>{
            if (entity === this._root._rootContainer) {
                isConnected = true;
            }
            if (entity._defaultThemes.length > 0) {
                defaults.push(entity._defaultThemes);
            }
            const theme = entity.get("themes");
            if (theme) {
                themes.push(theme);
            }
            const tags = entity.get("themeTags");
            if (tags) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(tags, (tag)=>{
                    themeTags.add(tag);
                });
            }
        });
        themes = defaults.concat(themes);
        this._removeTemplates();
        if (isConnected || force) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachReverse(this.classNames, (name)=>{
                const allRules = [];
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(themes, (themes)=>{
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(themes, (theme)=>{
                        const rules = theme._lookupRules(name);
                        if (rules) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachReverse(rules, (rule)=>{
                                const matches = rule.tags.every((tag)=>{
                                    return themeTags.has(tag);
                                });
                                if (matches) {
                                    const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getFirstSortedIndex(allRules, (x)=>{
                                        const order = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(rule.tags.length, x.tags.length);
                                        if (order === 0) {
                                            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compareArray(rule.tags, x.tags, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare);
                                        } else {
                                            return order;
                                        }
                                    });
                                    allRules.splice(result.index, 0, rule);
                                }
                            });
                        }
                    });
                });
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(allRules, (rule)=>{
                    this._templates.push(rule.template);
                    rule.template._setObjectTemplate(this);
                });
            });
        }
        this._applyTemplates();
        if (isConnected || force) {
            // This causes it to only run the setup function the first time that the themes are applied
            this._runSetup = false;
        }
        return isConnected || force;
    }
    _changed() {}
    _beforeChanged() {
        if (this.isDirty("id")) {
            const id = this.get("id");
            if (id) {
                this._registerId(id);
            }
            const prevId = this._prevSettings.id;
            if (prevId) {
                delete __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registry"].entitiesById[prevId];
            }
        }
    }
    _registerId(id) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registry"].entitiesById[id] && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registry"].entitiesById[id] !== this) {
            throw new Error("An entity with id \"" + id + "\" already exists.");
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registry"].entitiesById[id] = this;
    }
    _afterChanged() {}
    /**
     * @ignore
     */ addDisposer(disposer) {
        this._disposers.push(disposer);
        return disposer;
    }
    _dispose() {
        super._dispose();
        const template = this._template;
        if (template) {
            template._removeObjectTemplate(this);
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._internalTemplates, (template)=>{
            template._removeObjectTemplate(this);
        });
        this._removeTemplates();
        this._disposeTemplates();
        this.events.dispose();
        this._disposers.forEach((x)=>{
            x.dispose();
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._disposerProperties, (_, disposers)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(disposers, (disposer)=>{
                disposer.dispose();
            });
        });
        const id = this.get("id");
        if (id) {
            delete __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$Registry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registry"].entitiesById[id];
        }
    }
    /**
     * Creates and returns a "disposable" timeout.
     *
     * @param   fn     Callback
     * @param   delay  Delay in milliseconds
     * @return         Timeout disposer
     */ setTimeout(fn, delay) {
        const id = setTimeout(()=>{
            this.removeDispose(disposer);
            fn();
        }, delay);
        const disposer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            clearTimeout(id);
        });
        this._disposers.push(disposer);
        return disposer;
    }
    /**
     * @ignore
     */ removeDispose(target) {
        if (!this.isDisposed()) {
            let index = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.indexOf(this._disposers, target);
            if (index > -1) {
                this._disposers.splice(index, 1);
            }
        }
        target.dispose();
    }
    /**
     * @ignore
     */ hasTag(tag) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.indexOf(this.get("themeTags", []), tag) !== -1;
    }
    /**
     * @ignore
     */ addTag(tag) {
        if (!this.hasTag(tag)) {
            const tags = this.get("themeTags", []);
            tags.push(tag);
            this.set("themeTags", tags);
        }
    }
    /**
     * @ignore
     */ removeTag(tag) {
        if (this.hasTag(tag)) {
            const tags = this.get("themeTags", []);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.remove(tags, tag);
            this.set("themeTags", tags);
        }
    }
    _t(text, locale, ...rest) {
        return this._root.language.translate(text, locale, ...rest);
    }
    /**
     * An instance of [[Root]] object.
     *
     * @readonly
     * @since 5.0.6
     * @return Root object
     */ get root() {
        return this._root;
    }
}
Object.defineProperty(Entity, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Entity"
});
Object.defineProperty(Entity, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        "Entity"
    ]
}); //# sourceMappingURL=Entity.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Template.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Template": ()=>Template,
    "TemplateAdapters": ()=>TemplateAdapters,
    "TemplateState": ()=>TemplateState,
    "TemplateStates": ()=>TemplateStates
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
class TemplateState {
    constructor(name, template, settings){
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._name = name;
        this._template = template;
        this._settings = settings;
    }
    get(key, fallback) {
        const value = this._settings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    set(key, value) {
        this._settings[key] = value;
        // TODO maybe only do this if the value changed ?
        this._template._stateChanged(this._name);
    }
    remove(key) {
        delete this._settings[key];
        // TODO maybe only do this if the value changed ?
        this._template._stateChanged(this._name);
    }
    setAll(settings) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keys(settings).forEach((key)=>{
            this._settings[key] = settings[key];
        });
        this._template._stateChanged(this._name);
    }
    _apply(other, seen) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._settings, (key, value)=>{
            if (!seen[key] && !other._userSettings[key]) {
                seen[key] = true;
                other.setRaw(key, value);
            }
        });
    }
}
class TemplateStates {
    constructor(template){
        Object.defineProperty(this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._template = template;
    }
    lookup(name) {
        return this._states[name];
    }
    create(name, settings) {
        const state = this._states[name];
        if (state) {
            state.setAll(settings);
            return state;
        } else {
            const state = new TemplateState(name, this._template, settings);
            this._states[name] = state;
            this._template._stateChanged(name);
            return state;
        }
    }
    remove(name) {
        delete this._states[name];
        this._template._stateChanged(name);
    }
    _apply(entity, state) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._states, (key, value)=>{
            let seen = state.states[key];
            if (seen == null) {
                seen = state.states[key] = {};
            }
            const other = entity.states.create(key, {});
            value._apply(other, seen);
        });
    }
}
class TemplateAdapters {
    constructor(){
        Object.defineProperty(this, "_callbacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
    }
    add(key, callback) {
        let callbacks = this._callbacks[key];
        if (callbacks === undefined) {
            callbacks = this._callbacks[key] = [];
        }
        callbacks.push(callback);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(callbacks, callback);
            if (callbacks.length === 0) {
                delete this._callbacks[key];
            }
        });
    }
    remove(key) {
        const callbacks = this._callbacks[key];
        if (callbacks !== undefined) {
            delete this._callbacks[key];
        }
    }
    _apply(entity) {
        const disposers = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._callbacks, (key, callbacks)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(callbacks, (callback)=>{
                disposers.push(entity.adapters.add(key, callback));
            });
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"](disposers);
    }
}
class Template {
    constructor(settings, isReal){
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_privateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        // TODO code duplication with Properties
        Object.defineProperty(this, "_settingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_privateSettingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new TemplateStates(this)
        });
        Object.defineProperty(this, "adapters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new TemplateAdapters()
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"]()
        });
        Object.defineProperty(this, "setup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        this._settings = settings;
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   root      Root element
     * @param   settings  Settings
     * @param   template  Template
     * @return            Instantiated object
     */ static new(settings) {
        return new Template(settings, true);
    }
    /**
     * Array of all entities using this template.
     */ get entities() {
        return this._entities;
    }
    get(key, fallback) {
        const value = this._settings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    setRaw(key, value) {
        this._settings[key] = value;
    }
    set(key, value) {
        if (this._settings[key] !== value) {
            this.setRaw(key, value);
            this._entities.forEach((entity)=>{
                entity._setTemplateProperty(this, key, value);
            });
        }
    }
    remove(key) {
        if (key in this._settings) {
            delete this._settings[key];
            this._entities.forEach((entity)=>{
                entity._removeTemplateProperty(key);
            });
        }
    }
    removeAll() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._settings, (key, _value)=>{
            this.remove(key);
        });
    }
    getPrivate(key, fallback) {
        const value = this._privateSettings[key];
        if (value !== undefined) {
            return value;
        } else {
            return fallback;
        }
    }
    setPrivateRaw(key, value) {
        this._privateSettings[key] = value;
        return value;
    }
    setPrivate(key, value) {
        if (this._privateSettings[key] !== value) {
            this.setPrivateRaw(key, value);
            this._entities.forEach((entity)=>{
                entity._setTemplatePrivateProperty(this, key, value);
            });
        }
        return value;
    }
    removePrivate(key) {
        if (key in this._privateSettings) {
            delete this._privateSettings[key];
            this._entities.forEach((entity)=>{
                entity._removeTemplatePrivateProperty(key);
            });
        }
    }
    setAll(value) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(value, (key, value)=>{
            this.set(key, value);
        });
    }
    // TODO code duplication with Properties
    on(key, callback) {
        let events = this._settingEvents[key];
        if (events === undefined) {
            events = this._settingEvents[key] = [];
        }
        events.push(callback);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
            if (events.length === 0) {
                delete this._settingEvents[key];
            }
        });
    }
    // TODO code duplication with Properties
    onPrivate(key, callback) {
        let events = this._privateSettingEvents[key];
        if (events === undefined) {
            events = this._privateSettingEvents[key] = [];
        }
        events.push(callback);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Disposer"](()=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeFirst(events, callback);
            if (events.length === 0) {
                delete this._privateSettingEvents[key];
            }
        });
    }
    _apply(entity, state) {
        const disposers = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._settingEvents, (key, events)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                disposers.push(entity.on(key, event));
            });
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._privateSettingEvents, (key, events)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(events, (event)=>{
                disposers.push(entity.onPrivate(key, event));
            });
        });
        this.states._apply(entity, state);
        disposers.push(this.adapters._apply(entity));
        disposers.push(entity.events.copyFrom(this.events));
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"](disposers);
    }
    _setObjectTemplate(entity) {
        this._entities.push(entity);
    }
    _removeObjectTemplate(entity) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.remove(this._entities, entity);
    }
    _stateChanged(name) {
        this._entities.forEach((entity)=>{
            entity._applyStateByKey(name);
        });
    }
} //# sourceMappingURL=Template.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "List": ()=>List,
    "ListAutoDispose": ()=>ListAutoDispose,
    "ListTemplate": ()=>ListTemplate
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
/**
 * Checks if specific index fits into length.
 *
 * @param index  Index
 * @param len    Length
 * @ignore
 */ function checkBounds(index, len) {
    if (!(index >= 0 && index < len)) {
        throw new Error("Index out of bounds: " + index);
    }
}
class List {
    /**
     * Constructor
     *
     * @param initial  Inital list of values to add to list
     */ constructor(initial = []){
        /**
         * List values.
         */ Object.defineProperty(this, "_values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$EventDispatcher$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventDispatcher"]()
        });
        this._values = initial;
    }
    /**
     * An array of values in the list.
     *
     * Do not use this property to add values. Rather use dedicated methods, like
     * `push()`, `removeIndex()`, etc.
     *
     * @readonly
     * @return List values
     */ get values() {
        return this._values;
    }
    /**
     * Checks if list contains specific item reference.
     *
     * @param item  Item to search for
     * @return `true` if found, `false` if not found
     */ contains(value) {
        return this._values.indexOf(value) !== -1;
    }
    /**
     * Removes specific item from the list.
     *
     * @param item An item to remove
     */ removeValue(value) {
        let i = 0;
        let length = this._values.length;
        while(i < length){
            // TODO handle NaN
            if (this._values[i] === value) {
                this.removeIndex(i);
                --length;
            } else {
                ++i;
            }
        }
    }
    /**
     * Searches the list for specific item and returns its index.
     *
     * @param item  An item to search for
     * @return Index or -1 if not found
     */ indexOf(value) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.indexOf(this._values, value);
    }
    /**
     * Number of items in list.
     *
     * @readonly
     * @return Number of items
     */ get length() {
        return this._values.length;
    }
    /**
     * Checks if there's a value at specific index.
     *
     * @param index  Index
     * @return Value exists?
     */ hasIndex(index) {
        return index >= 0 && index < this._values.length;
    }
    /**
     * Returns an item at specified index.
     *
     * @param index  Index
     * @return List item
     */ getIndex(index) {
        return this._values[index];
    }
    _onPush(newValue) {
        if (this.events.isEnabled("push")) {
            this.events.dispatch("push", {
                type: "push",
                target: this,
                newValue
            });
        }
    }
    _onInsertIndex(index, newValue) {
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatch("insertIndex", {
                type: "insertIndex",
                target: this,
                index,
                newValue
            });
        }
    }
    _onSetIndex(index, oldValue, newValue) {
        if (this.events.isEnabled("setIndex")) {
            this.events.dispatch("setIndex", {
                type: "setIndex",
                target: this,
                index,
                oldValue,
                newValue
            });
        }
    }
    _onRemoveIndex(index, oldValue) {
        if (this.events.isEnabled("removeIndex")) {
            this.events.dispatch("removeIndex", {
                type: "removeIndex",
                target: this,
                index,
                oldValue
            });
        }
    }
    _onMoveIndex(oldIndex, newIndex, value) {
        if (this.events.isEnabled("moveIndex")) {
            this.events.dispatch("moveIndex", {
                type: "moveIndex",
                target: this,
                oldIndex,
                newIndex,
                value
            });
        }
    }
    _onClear(oldValues) {
        if (this.events.isEnabled("clear")) {
            this.events.dispatch("clear", {
                type: "clear",
                target: this,
                oldValues
            });
        }
    }
    /**
     * Sets value at specific index.
     *
     * If there's already a value at the index, it is overwritten.
     *
     * @param index  Index
     * @param value  New value
     * @return New value
     */ setIndex(index, value) {
        checkBounds(index, this._values.length);
        const oldValue = this._values[index];
        // Do nothing if the old value and the new value are the same
        if (oldValue !== value) {
            this._values[index] = value;
            this._onSetIndex(index, oldValue, value);
        }
        return oldValue;
    }
    /**
     * Adds an item to the list at a specific index, which pushes all the other
     * items further down the list.
     *
     * @param index Index
     * @param item  An item to add
     */ insertIndex(index, value) {
        checkBounds(index, this._values.length + 1);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.insertIndex(this._values, index, value);
        this._onInsertIndex(index, value);
        return value;
    }
    /**
     * Swaps indexes of two items in the list.
     *
     * @param a  Item 1
     * @param b  Item 2
     */ swap(a, b) {
        const len = this._values.length;
        checkBounds(a, len);
        checkBounds(b, len);
        if (a !== b) {
            const value_a = this._values[a];
            const value_b = this._values[b];
            this._values[a] = value_b;
            this._onSetIndex(a, value_a, value_b);
            this._values[b] = value_a;
            this._onSetIndex(b, value_b, value_a);
        }
    }
    /**
     * Removes a value at specific index.
     *
     * @param index  Index of value to remove
     * @return Removed value
     */ removeIndex(index) {
        checkBounds(index, this._values.length);
        const oldValue = this._values[index];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeIndex(this._values, index);
        this._onRemoveIndex(index, oldValue);
        return oldValue;
    }
    /**
     * Moves an item to a specific index within the list.
     *
     * If the index is not specified it will move the item to the end of the
     * list.
     *
     * @param value  Item to move
     * @param index  Index to place item at
     */ moveValue(value, toIndex) {
        // TODO don't do anything if the desired index is the same as the current index
        let index = this.indexOf(value);
        // TODO remove all old values rather than only the first ?
        if (index !== -1) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.removeIndex(this._values, index);
            if (toIndex == null) {
                const toIndex = this._values.length;
                this._values.push(value);
                this._onMoveIndex(index, toIndex, value);
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.insertIndex(this._values, toIndex, value);
                this._onMoveIndex(index, toIndex, value);
            }
        } else if (toIndex == null) {
            this._values.push(value);
            this._onPush(value);
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.insertIndex(this._values, toIndex, value);
            this._onInsertIndex(toIndex, value);
        }
        return value;
    }
    /**
     * Adds an item to the end of the list.
     *
     * @param item  An item to add
     */ push(value) {
        this._values.push(value);
        this._onPush(value);
        return value;
    }
    /**
     * Adds an item as a first item in the list.
     *
     * @param item  An item to add
     */ unshift(value) {
        this.insertIndex(0, value);
        return value;
    }
    /**
     * Adds multiple items to the list.
     *
     * @param items  An Array of items to add
     */ pushAll(values) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(values, (value)=>{
            this.push(value);
        });
    }
    /**
     * Copies and adds items from abother list.
     *
     * @param source  A list top copy items from
     */ copyFrom(source) {
        this.pushAll(source._values);
    }
    /**
     * Returns the last item from the list, and removes it.
     *
     * @return Item
     */ pop() {
        let index = this._values.length - 1;
        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
    }
    /**
     * Returns the first item from the list, and removes it.
     *
     * @return Item
     */ shift() {
        return this._values.length ? this.removeIndex(0) : undefined;
    }
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param newArray  New items
     */ setAll(newArray) {
        const old = this._values;
        this._values = [];
        this._onClear(old);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(newArray, (value)=>{
            this._values.push(value);
            this._onPush(value);
        });
    }
    /**
     * Removes all items from the list.
     */ clear() {
        this.setAll([]);
    }
    /**
     * Returns an ES6 iterator for the list.
     */ *[Symbol.iterator]() {
        const length = this._values.length;
        for(let i = 0; i < length; ++i){
            yield this._values[i];
        }
    }
    /**
     * Calls `f` for each element in the list.
     *
     * `f` should have at least one parameter defined which will get a current
     * item, with optional second argument - index.
     */ each(f) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._values, f);
    }
    /**
     * Calls `f` for each element in the list, from right to left.
     *
     * `f` should have at least one parameter defined which will get a current
     * item, with optional second argument - index.
     */ eachReverse(f) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachReverse(this._values, f);
    }
}
class ListAutoDispose extends List {
    constructor(){
        super(...arguments);
        /**
         * Automatically disposes elements that are removed from the list.
         *
         * @default true
         */ Object.defineProperty(this, "autoDispose", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _onSetIndex(index, oldValue, newValue) {
        if (this.autoDispose) {
            oldValue.dispose();
        }
        super._onSetIndex(index, oldValue, newValue);
    }
    _onRemoveIndex(index, oldValue) {
        if (this.autoDispose) {
            oldValue.dispose();
        }
        super._onRemoveIndex(index, oldValue);
    }
    _onClear(oldValues) {
        if (this.autoDispose) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(oldValues, (x)=>{
                x.dispose();
            });
        }
        super._onClear(oldValues);
    }
    isDisposed() {
        return this._disposed;
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            if (this.autoDispose) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._values, (x)=>{
                    x.dispose();
                });
            }
        }
    }
}
class ListTemplate extends ListAutoDispose {
    constructor(template, make){
        super();
        Object.defineProperty(this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "make", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.template = template;
        this.make = make;
    }
} //# sourceMappingURL=List.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Children.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Children": ()=>Children
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class Children extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["List"] {
    constructor(container){
        super();
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_container", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._container = container;
        this._events = this.events.onAll((change)=>{
            if (change.type === "clear") {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(change.oldValues, (x)=>{
                    this._onRemoved(x);
                });
            } else if (change.type === "push") {
                this._onInserted(change.newValue);
            } else if (change.type === "setIndex") {
                this._onRemoved(change.oldValue);
                this._onInserted(change.newValue, change.index);
            } else if (change.type === "insertIndex") {
                this._onInserted(change.newValue, change.index);
            } else if (change.type === "removeIndex") {
                this._onRemoved(change.oldValue);
            } else if (change.type === "moveIndex") {
                this._onRemoved(change.value);
                this._onInserted(change.value, change.newIndex);
            } else {
                throw new Error("Unknown IListEvent type");
            }
        });
    }
    _onInserted(child, index) {
        child._setParent(this._container, true);
        const childrenDisplay = this._container._childrenDisplay;
        if (index === undefined) {
            childrenDisplay.addChild(child._display);
        } else {
            childrenDisplay.addChildAt(child._display, index);
        }
    }
    _onRemoved(child) {
        this._container._childrenDisplay.removeChild(child._display);
        this._container.markDirtyBounds();
        this._container.markDirty();
    }
    /**
     * Returns `true` if obejct is disposed.
     */ isDisposed() {
        return this._disposed;
    }
    /**
     * Permanently dispose this object.
     */ dispose() {
        if (!this._disposed) {
            this._disposed = true;
            this._events.dispose();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.values, (child)=>{
                child.dispose();
            });
        }
    }
} //# sourceMappingURL=Children.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "TextFormatter": ()=>TextFormatter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class TextFormatter {
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Escaped text
     */ static escape(text) {
        return text.replace(/\[\[/g, this.prefix + "1").replace(/([^\/\]]{1})\]\]/g, "$1" + this.prefix + "2").replace(/\]\]/g, this.prefix + "2").replace(/\{\{/g, this.prefix + "3").replace(/\}\}/g, this.prefix + "4").replace(/\'\'/g, this.prefix + "5");
    }
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param text  Escaped text
     * @return Unescaped text
     */ static unescape(text) {
        return text.replace(new RegExp(this.prefix + "1", "g"), "[[").replace(new RegExp(this.prefix + "2", "g"), "]]").replace(new RegExp(this.prefix + "3", "g"), "{{").replace(new RegExp(this.prefix + "4", "g"), "}}").replace(new RegExp(this.prefix + "5", "g"), "''");
    }
    /**
     * Cleans up the text text for leftover double square brackets.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Cleaned up text
     */ static cleanUp(text) {
        return text.replace(/\[\[/g, "[").replace(/\]\]/g, "]").replace(/\{\{/g, "{").replace(/\}\}/g, "}").replace(/\'\'/g, "'");
    }
    /**
     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
     *
     * If the second parameter `quotedBlocks` is set to `true` this method will
     * also single out text blocks enclosed within single quotes that no
     * formatting should be applied to, and they should be displayed as is.
     *
     * Default for the above is `false`, so that you can use single quote in text
     * without escaping it.
     *
     * If enabled, single quotes can be escaped by doubling it - adding two
     * single quotes, which will be replaced by a one single quote in the final
     * output.
     *
     * @ignore Exclude from docs
     * @param text          Text to chunk
     * @param quotedBlocks  Use quoted blocks
     * @param noFormatting  Formatting blocks will be treated as regular text
     * @return Array of string chunks
     */ static chunk(text, quotedBlocks = false, noFormatting = false) {
        // Init result
        let res = [];
        // Replace double (escaped) square spaces and quotes with temporary codes
        text = this.escape(text);
        // Deal with style blocks
        let chunks = quotedBlocks ? text.split("'") : [
            text
        ];
        for(let i = 0; i < chunks.length; i++){
            let chunk = chunks[i];
            // Empty?
            if (chunk === "") {
                continue;
            }
            if (i % 2 === 0) {
                // Text outside quotes
                // Parse for style blocks which are "text" chunks, the rest chunks are
                // "value"
                chunk = chunk.replace(/\]\[/g, "]" + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER + "[");
                chunk = chunk.replace(/\[\]/g, "[ ]");
                let chunks2 = chunk.split(/[\[\]]+/);
                for(let i2 = 0; i2 < chunks2.length; i2++){
                    let chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                    // Placeholder?
                    if (chunk2 === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER) {
                        continue;
                    }
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or value
                    if (i2 % 2 === 0) {
                        res.push({
                            "type": "value",
                            "text": chunk2
                        });
                    } else {
                        res.push({
                            "type": noFormatting ? "value" : "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            } else {
                // A text within doublequotes
                // All chunks are "text"
                let chunks2 = chunk.split(/[\[\]]+/);
                for(let i2 = 0; i2 < chunks2.length; i2++){
                    let chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or text
                    if (i2 % 2 === 0) {
                        res.push({
                            "type": "text",
                            "text": chunk2
                        });
                    } else if (this.isImage(chunk2)) {
                        res.push({
                            "type": "image",
                            "text": "[" + chunk2 + "]"
                        });
                    } else {
                        res.push({
                            "type": "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            }
        }
        return res;
    }
    /**
     * Checks if supplied format contains image information and should be
     * formatted as such.
     * I.e.: `[img: myImage.png]`
     *
     * @ignore
     * @param  text  Format
     * @return true if it is an image
     */ static isImage(text) {
        return text.match(/img[ ]?:/) ? true : false;
    }
    static getTextStyle(style) {
        // let textStyle: string[] = [];
        // let textFill: string | undefined;
        let format = {};
        if (style == "" || style == "[ ]") {
            return {};
        }
        // Pre-process quoted text
        const q = style.match(/('[^']*')|("[^"]*")/gi);
        if (q) {
            for(let i = 0; i < q.length; i++){
                style = style.replace(q[i], q[i].replace(/['"]*/g, "").replace(/[ ]+/g, "+"));
            }
        }
        // Get style parts
        let b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w\-]+)|(\/)/gi);
        // Empty?
        if (!b) {
            return {};
        }
        // Check each part
        for(let i = 0; i < b.length; i++){
            if (b[i].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i)) {
                format.fontWeight = b[i];
            } else if (b[i].match(/^(underline|line-through)$/i)) {
                format.textDecoration = b[i];
            } else if (b[i] == "/") {
            // Just closing tag
            // Do nothing
            } else if (!b[i].match(/:/)) {
                // Color
                format.fill = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromString(b[i]);
            } else {
                const p = b[i].replace("+", " ").split(/:[ ]*/);
                format[p[0]] = p[1];
            //textStyle.push(b[i].replace(/^[a-zA-Z]:[ ]*/, ""));
            //b[i] = b[i].replace(/\+/g, " ");
            }
        }
        return format;
    }
}
Object.defineProperty(TextFormatter, "prefix", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "__amcharts__"
}); //# sourceMappingURL=TextFormatter.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/** @ignore */ /** */ __turbopack_esm__({
    "getTagValueFromObject": ()=>getTagValueFromObject,
    "populateString": ()=>populateString
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function populateString(target, string) {
    if (string != null) {
        string = "" + string;
        string = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].escape(string);
        let tags = string.match(/\{([^}]+)\}/g);
        let i;
        if (tags) {
            for(i = 0; i < tags.length; i++){
                let tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                let value = getTagValue(target, tag, "");
                if (value == null) {
                    value = "";
                }
                string = string.split(tags[i]).join(value);
            }
        }
        string = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].unescape(string);
    } else {
        string = "";
    }
    // TODO: apply adapter?
    return string;
}
/**
 * @ignore
 */ function getTagValue(target, tagName, format) {
    let value;
    const dataItem = target.dataItem;
    // Parse parts
    let parts = [];
    let reg = /(format[a-zA-Z]*)\((.*)\)|([^.]+)/g;
    let matches;
    while(true){
        matches = reg.exec(tagName);
        if (matches === null) {
            break;
        }
        if (matches[3]) {
            // Simple property
            parts.push({
                prop: matches[3]
            });
            // Check if maybe we should force a formatter on this value
            const dateFields = target.getDateFormatter().get("dateFields", []);
            const numericFields = target.getNumberFormatter().get("numericFields", []);
            const durationFields = target.getDurationFormatter().get("durationFields", []);
            if (dateFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatDate",
                    params: []
                });
            } else if (numericFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatNumber",
                    params: []
                });
            } else if (durationFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatDuration",
                    params: []
                });
            }
        } else {
            // Method
            // Parse parameters
            let params = [];
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.trim(matches[2]) != "") {
                let reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                let matches2;
                while(true){
                    matches2 = reg2.exec(matches[2]);
                    if (matches2 === null) {
                        break;
                    }
                    params.push(matches2[1] || matches2[2] || matches2[3]);
                }
            }
            parts.push({
                method: matches[1],
                params: params
            });
        }
    }
    // Check if we can retrieve the value from data item
    if (dataItem) {
        // Check values
        value = getTagValueFromObject(target, parts, dataItem._settings);
        // Check properties
        if (value == null || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(value)) {
            value = getTagValueFromObject(target, parts, dataItem);
        }
        // Check data context
        let dataContext = dataItem.dataContext;
        if (value == null && dataContext) {
            value = getTagValueFromObject(target, parts, dataContext);
            // Maybe it's a literal dot-separated name of the key in dataContext?
            if (value == null) {
                value = getTagValueFromObject(target, [
                    {
                        prop: tagName
                    }
                ], dataContext);
            }
            // scond data context level sometimes exist (tree map)
            if (value == null && dataContext.dataContext) {
                value = getTagValueFromObject(target, parts, dataContext.dataContext);
            }
        }
        // Check component's data item
        if (value == null && dataItem.component && dataItem.component.dataItem !== dataItem) {
            value = getTagValue(dataItem.component, tagName, format);
        }
    }
    // Check sprite's properties
    if (value == null) {
        value = getTagValueFromObject(target, parts, target);
    }
    // Finally, check the parent
    if (value == null && target.parent) {
        value = getTagValue(target.parent, tagName, format);
    }
    return value;
}
/**
 * @ignore
 */ function getCustomDataValue(target, prop) {
    const customData = target.getPrivate("customData");
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(customData)) {
        return customData[prop];
    }
}
function getTagValueFromObject(target, parts, object, format) {
    let current = object;
    let formatApplied = false;
    for(let i = 0, len = parts.length; i < len; i++){
        let part = parts[i];
        if (part.prop) {
            // Regular property
            if (current instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$render$2f$Sprite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Sprite"]) {
                let tmp = current.get(part.prop);
                if (tmp == null) tmp = current.getPrivate(part.prop);
                if (tmp == null) tmp = getCustomDataValue(current, part.prop);
                if (tmp == null) tmp = current[part.prop];
                current = tmp;
            } else if (current.get) {
                let tmp = current.get(part.prop);
                if (tmp == null) tmp = current[part.prop];
                current = tmp;
            } else {
                current = current[part.prop];
            }
            if (current == null) {
                // Not set, return undefined
                return;
            }
        } else {
            // Method
            switch(part.method){
                case "formatNumber":
                    let numberValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(current);
                    if (numberValue != null) {
                        current = target.getNumberFormatter().format(numberValue, format || part.params[0] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "formatDate":
                    let dateValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toDate(current);
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isDate(dateValue) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNaN(dateValue.getTime())) {
                        // Was not able to get date out of value, quitting and letting
                        // calling method try another value
                        return;
                    }
                    if (dateValue != null) {
                        current = target.getDateFormatter().format(dateValue, format || part.params[0] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "formatDuration":
                    let durationValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(current);
                    if (durationValue != null) {
                        current = target.getDurationFormatter().format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "urlEncode":
                case "encodeURIComponent":
                    current = encodeURIComponent(current);
                    break;
                default:
                    if (current[part.method]) {
                        current[part.method].apply(object, part.params);
                    }
                    break;
            }
        }
    }
    // Apply default format if it wasn't applied explicitly
    if (!formatApplied) {
        let formatParts = [
            {
                method: "",
                params: format
            }
        ];
        if (format == null) {
            // Format is not set
            // Determine from the type of the value
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(current)) {
                formatParts[0].method = "formatNumber";
                formatParts[0].params = "";
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isDate(current)) {
                formatParts[0].method = "formatDate";
                formatParts[0].params = "";
            }
        } else {
            // Format set
            // Try to determine formatter based on the format
            let formatterType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getFormat(format);
            // format
            if (formatterType === "number") {
                formatParts[0].method = "formatNumber";
            } else if (formatterType === "date") {
                formatParts[0].method = "formatDate";
            } else if (formatterType === "duration") {
                formatParts[0].method = "formatDuration";
            }
        }
        // Apply format
        if (formatParts[0].method) {
            current = getTagValueFromObject(target, formatParts, current);
        }
    }
    return current;
} //# sourceMappingURL=PopulateString.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/DataParser.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "CSVParser": ()=>CSVParser,
    "JSONParser": ()=>JSONParser
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class JSONParser {
    /**
     * Parses JSON string.
     *
     * @param   input    JSON
     * @param   options  Options
     * @return           Data
     */ static parse(input, options) {
        options = this._applyDefaults(options);
        try {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isString(input)) {
                let data = JSON.parse(input);
                if (options.reverse && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isArray(data)) {
                    data.reverse();
                }
                return data;
            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isArray(input) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(input)) {
                return input;
            } else {
                throw "Unable to parse JSON data";
            }
        } catch (e) {
            return undefined;
        }
    }
    static _applyDefaults(options) {
        const normalized = {};
        const defaults = {
            reverse: false
        };
        if (!options) {
            options = {};
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(defaults, (key, val)=>{
            normalized[key] = options[key] || val;
        });
        return normalized;
    }
}
class CSVParser {
    /**
     * Parses CSV string.
     *
     * @param   input    CSV
     * @param   options  Options
     * @return           Data
     */ static parse(input, options) {
        options = this._applyDefaults(options);
        // Get CSV data as array
        let data = this.CSVToArray(input, options.delimiter);
        // Init resuling array
        let res = [], cols = [], col, i;
        // Skip rows
        for(i = 0; i < options.skipRows; i++){
            data.shift();
        }
        // First row holds column names?
        if (options.useColumnNames) {
            cols = data.shift();
            // Normalize column names
            for(let x = 0; x < cols.length; x++){
                // trim
                col = cols[x] != null ? cols[x].replace(/^\s+|\s+$/gm, "") : "";
                // Check for empty
                if ("" === col) {
                    col = "col" + x;
                }
                cols[x] = col;
            }
        }
        // Iterate through the result set
        let row;
        while(true){
            row = options.reverse ? data.pop() : data.shift();
            if (!row) {
                break;
            }
            if (options.skipEmpty && row.length === 1 && row[0] === "") {
                continue;
            }
            let dataPoint = {};
            for(i = 0; i < row.length; i++){
                col = undefined === cols[i] ? "col" + i : cols[i];
                dataPoint[col] = row[i];
            }
            res.push(dataPoint);
        }
        return res;
    }
    /**
     * @ignore
     */ static CSVToArray(data, delimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        delimiter = delimiter || ',';
        // Create a regular expression to parse the CSV values.
        let objPattern = new RegExp(// Delimiters.
        "(\\" + delimiter + "|\\r?\\n|\\r|^)" + // Quoted fields.
        "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + // Standard fields.
        "([^\"\\" + delimiter + "\\r\\n]*))", "gi");
        // Create an array to hold our data. Give the array
        // a default empty first row.
        let arrData = [
            []
        ];
        // Create an array to hold our individual pattern
        // matching groups.
        let arrMatches = null;
        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while(true){
            arrMatches = objPattern.exec(data);
            if (!arrMatches) {
                break;
            }
            // Get the delimiter that was found.
            let strMatchedDelimiter = arrMatches[1];
            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (strMatchedDelimiter.length && strMatchedDelimiter !== delimiter) {
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push([]);
            }
            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            let strMatchedValue;
            if (arrMatches[2]) {
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
            } else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[3];
            }
            // Now that we have our value string, let's add
            // it to the data array.
            arrData[arrData.length - 1].push(strMatchedValue);
        }
        // Return the parsed data.
        return arrData;
    }
    static _applyDefaults(options) {
        const normalized = {};
        const defaults = {
            delimiter: ",",
            reverse: false,
            skipRows: 0,
            skipEmpty: true,
            useColumnNames: false
        };
        if (!options) {
            options = {};
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(defaults, (key, val)=>{
            normalized[key] = options[key] || val;
        });
        return normalized;
    }
} //# sourceMappingURL=DataParser.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Modified from Pixi:
 *
 * The MIT License
 *
 * Copyright (c) 2013-2017 Mathew Groves, Chad Engler
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ /**
 * @ignore
 */ __turbopack_esm__({
    "Matrix": ()=>Matrix
});
class Matrix {
    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0){
        Object.defineProperty(this, "a", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "c", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "d", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    }
    /**
     * Sets the matrix based on all the available properties
     */ setTransform(x, y, pivotX, pivotY, rotation, scale = 1) {
        this.a = Math.cos(rotation) * scale;
        this.b = Math.sin(rotation) * scale;
        this.c = -Math.sin(rotation) * scale;
        this.d = Math.cos(rotation) * scale;
        this.tx = x - (pivotX * this.a + pivotY * this.c);
        this.ty = y - (pivotX * this.b + pivotY * this.d);
    }
    /**
     * Get a new position with the current transformation applied.
     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
     */ apply(origin) {
        return {
            x: this.a * origin.x + this.c * origin.y + this.tx,
            y: this.b * origin.x + this.d * origin.y + this.ty
        };
    }
    /**
     * Get a new position with the inverse of the current transformation applied.
     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
     */ applyInverse(origin) {
        const id = 1 / (this.a * this.d + this.c * -this.b);
        return {
            x: this.d * id * origin.x + -this.c * id * origin.y + (this.ty * this.c - this.tx * this.d) * id,
            y: this.a * id * origin.y + -this.b * id * origin.x + (-this.ty * this.a + this.tx * this.b) * id
        };
    }
    /**
     * Appends the given Matrix to this Matrix.
     */ append(matrix) {
        const a1 = this.a;
        const b1 = this.b;
        const c1 = this.c;
        const d1 = this.d;
        this.a = matrix.a * a1 + matrix.b * c1;
        this.b = matrix.a * b1 + matrix.b * d1;
        this.c = matrix.c * a1 + matrix.d * c1;
        this.d = matrix.c * b1 + matrix.d * d1;
        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
    }
    /**
     * Prepends the given Matrix to this Matrix.
     */ prepend(matrix) {
        const tx1 = this.tx;
        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
            const a1 = this.a;
            const c1 = this.c;
            this.a = a1 * matrix.a + this.b * matrix.c;
            this.b = a1 * matrix.b + this.b * matrix.d;
            this.c = c1 * matrix.a + this.d * matrix.c;
            this.d = c1 * matrix.b + this.d * matrix.d;
        }
        this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;
        this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;
    }
    /**
     * Copies the other matrix's properties into this matrix
     */ copyFrom(matrix) {
        this.a = matrix.a;
        this.b = matrix.b;
        this.c = matrix.c;
        this.d = matrix.d;
        this.tx = matrix.tx;
        this.ty = matrix.ty;
    }
} //# sourceMappingURL=Matrix.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "ColorSet": ()=>ColorSet
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
class ColorSet extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    //protected _currentPass: number = 0;
    _afterNew() {
        // Applying themes because color set will not have parent
        super._afterNewApplyThemes();
        this._dirty["colors"] = false;
    }
    _beforeChanged() {
        if (this.isDirty("colors")) {
            this.reset();
        }
    }
    /**
     * @ignore
     */ generateColors() {
        this.setPrivate("currentPass", this.getPrivate("currentPass", 0) + 1);
        const pass = this.getPrivate("currentPass");
        const colors = this.get("colors", [
            this.get("baseColor", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromHex(0xff0000))
        ]);
        if (!this.getPrivate("numColors")) {
            this.setPrivate("numColors", colors.length);
        }
        //const len = colors.length;
        const len = this.getPrivate("numColors");
        //const start = len - this.getPrivate("numColors")!;
        const start = 0;
        const passOptions = this.get("passOptions");
        const reuse = this.get("reuse");
        for(let i = start; i < len; i++){
            if (reuse) {
                colors.push(colors[i]);
            } else {
                const hsl = colors[i].toHSL();
                let h = hsl.h + (passOptions.hue || 0) * pass;
                while(h > 1)h -= 1;
                let s = hsl.s + (passOptions.saturation || 0) * pass;
                //if (s > 1) s -= Math.floor(s);
                if (s > 1) s = 1;
                if (s < 0) s = 0;
                let l = hsl.l + (passOptions.lightness || 0) * pass;
                //if (l > 1) l -= Math.floor(l);
                while(l > 1)l -= 1;
                colors.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromHSL(h, s, l));
            }
        }
    }
    /**
     * Returns a [[Color]] at specific index.
     *
     * If there's no color at this index, a new color is generated.
     *
     * @param   index  Index
     * @return         Color
     */ getIndex(index) {
        const colors = this.get("colors", []);
        const saturation = this.get("saturation");
        if (index >= colors.length) {
            this.generateColors();
            return this.getIndex(index);
        }
        return saturation != null ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].saturate(colors[index], saturation) : colors[index];
    }
    /**
     * Returns next [[Color]] in the list.
     *
     * If the list is out of colors, new ones are generated dynamically.
     */ next() {
        let currentStep = this.getPrivate("currentStep", this.get("startIndex", 0));
        this.setPrivate("currentStep", currentStep + this.get("step", 1));
        return this.getIndex(currentStep);
    }
    /**
     * Resets counter to the start of the list, so the next call for `next()` will
     * return the first color.
     */ reset() {
        this.setPrivate("currentStep", this.get("startIndex", 0));
        this.setPrivate("currentPass", 0);
    }
}
Object.defineProperty(ColorSet, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "ColorSet"
});
Object.defineProperty(ColorSet, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        ColorSet.className
    ])
}); //# sourceMappingURL=ColorSet.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Data.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "JsonData": ()=>JsonData,
    "ListData": ()=>ListData
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/List.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class ListData extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$List$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["List"] {
    constructor(){
        super(...arguments);
        /**
         * An optional processor for data.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
         */ Object.defineProperty(this, "processor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    /**
     * @ignore
     */ incrementRef() {}
    /**
     * @ignore
     */ decrementRef() {}
    _onPush(newValue) {
        if (this.processor) {
            this.processor.processRow(newValue);
        }
        super._onPush(newValue);
    }
    _onInsertIndex(index, newValue) {
        if (this.processor) {
            this.processor.processRow(newValue);
        }
        super._onInsertIndex(index, newValue);
    }
    _onSetIndex(index, oldValue, newValue) {
        if (this.processor) {
            this.processor.processRow(newValue);
        }
        super._onSetIndex(index, oldValue, newValue);
    }
}
class JsonData {
    constructor(value){
        Object.defineProperty(this, "processor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._value = value;
    }
    incrementRef() {}
    decrementRef() {}
} //# sourceMappingURL=Data.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/DataProcessor.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "DataProcessor": ()=>DataProcessor
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class DataProcessor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "_checkDates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_checkNumbers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_checkColors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_checkEmpty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_checkDeep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    _afterNew() {
        super._afterNew();
        this._checkFeatures();
        this.on("dateFields", ()=>this._checkFeatures());
        this.on("dateFormat", ()=>this._checkFeatures());
        this.on("numericFields", ()=>this._checkFeatures());
        this.on("colorFields", ()=>this._checkFeatures());
        this.on("emptyAs", ()=>this._checkFeatures());
    }
    _checkFeatures() {
        if (this.isDirty("dateFields") || this.isDirty("dateFormat")) {
            this._checkDates = this.get("dateFields") && this.get("dateFields").length > 0;
        }
        if (this.isDirty("numericFields")) {
            this._checkNumbers = this.get("numericFields") && this.get("numericFields").length > 0;
        }
        if (this.isDirty("colorFields")) {
            this._checkColors = this.get("colorFields") && this.get("colorFields").length > 0;
        }
        if (this.isDirty("emptyAs")) {
            this._checkEmpty = this.get("emptyAs") != null;
        }
        this._checkDeepFeatures();
    }
    _checkDeepFeatures() {
        const deepFields = [];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each([
            "dateFields",
            "numericFields",
            "colorFields"
        ], (where)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this.get(where, []), (field)=>{
                const steps = field.split(".");
                steps.pop();
                while(steps.length > 0){
                    deepFields.push(steps.join("."));
                    steps.pop();
                }
            });
        });
        this._checkDeep = deepFields.length > 0;
        this.setPrivate("deepFields", deepFields);
    }
    /**
     * Processess entire array of data.
     *
     * NOTE: calling this will modify original array!
     */ processMany(data) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(data, (row)=>{
                this.processRow(row);
            });
        }
    }
    /**
     * Processes a row (object) of data.
     *
     * NOTE: calling this will modify values of the original object!
     */ processRow(row, prefix = "") {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(row, (key, _value)=>{
            const lookupKey = prefix + key;
            if (this._checkEmpty) {
                row[key] = this._maybeToEmpty(row[key]);
            }
            if (this._checkNumbers) {
                row[key] = this._maybeToNumber(lookupKey, row[key]);
            }
            if (this._checkDates) {
                row[key] = this._maybeToDate(lookupKey, row[key]);
            }
            if (this._checkColors) {
                row[key] = this._maybeToColor(lookupKey, row[key]);
            }
            if (this._checkDeep && this.getPrivate("deepFields", []).indexOf(lookupKey) !== -1 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(row[key])) {
                this.processRow(row[key], lookupKey + ".");
            }
        });
    }
    _maybeToNumber(field, value) {
        if (this.get("numericFields").indexOf(field) !== -1) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(value);
        }
        return value;
    }
    _maybeToDate(field, value) {
        if (this.get("dateFields").indexOf(field) !== -1) {
            return this._root.dateFormatter.parse(value, this.get("dateFormat", "")).getTime();
        }
        return value;
    }
    _maybeToEmpty(value) {
        if ((value == null || value == "") && this.get("emptyAs") != null) {
            return this.get("emptyAs");
        }
        return value;
    }
    _maybeToColor(field, value) {
        if (this.get("colorFields").indexOf(field) !== -1) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Color"].fromAny(value);
        }
        return value;
    }
} //# sourceMappingURL=DataProcessor.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Timezone.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Timezone": ()=>Timezone
});
function parseDate(timezone, date) {
    let year = 0;
    let month = 0;
    let day = 1;
    let hour = 0;
    let minute = 0;
    let second = 0;
    let millisecond = 0;
    let weekday = 0;
    timezone.formatToParts(date).forEach((x)=>{
        switch(x.type){
            case "year":
                year = +x.value;
                break;
            case "month":
                month = +x.value - 1;
                break;
            case "day":
                day = +x.value;
                break;
            case "hour":
                hour = +x.value;
                break;
            case "minute":
                minute = +x.value;
                break;
            case "second":
                second = +x.value;
                break;
            case "fractionalSecond":
                millisecond = +x.value;
                break;
            case "weekday":
                switch(x.value){
                    case "Sun":
                        weekday = 0;
                        break;
                    case "Mon":
                        weekday = 1;
                        break;
                    case "Tue":
                        weekday = 2;
                        break;
                    case "Wed":
                        weekday = 3;
                        break;
                    case "Thu":
                        weekday = 4;
                        break;
                    case "Fri":
                        weekday = 5;
                        break;
                    case "Sat":
                        weekday = 6;
                        break;
                }
        }
    });
    if (hour === 24) {
        hour = 0;
    }
    return {
        year,
        month,
        day,
        hour,
        minute,
        second,
        millisecond,
        weekday
    };
}
function toUTCDate(timezone, date) {
    const { year, month, day, hour, minute, second, millisecond } = parseDate(timezone, date);
    return Date.UTC(year, month, day, hour, minute, second, millisecond);
}
class Timezone {
    constructor(timezone, isReal){
        Object.defineProperty(this, "_utc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_dtf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        this.name = timezone;
        this._utc = new Intl.DateTimeFormat("UTC", {
            hour12: false,
            timeZone: "UTC",
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            weekday: "short",
            fractionalSecondDigits: 3
        });
        this._dtf = new Intl.DateTimeFormat("UTC", {
            hour12: false,
            timeZone: timezone,
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            weekday: "short",
            fractionalSecondDigits: 3
        });
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   timezone  IANA timezone
     * @return            Instantiated object
     */ static new(timezone) {
        return new this(timezone, true);
    }
    convertLocal(date) {
        const offset = this.offsetUTC(date);
        const userOffset = date.getTimezoneOffset();
        const output = new Date(date);
        output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));
        const newUserOffset = output.getTimezoneOffset();
        if (userOffset != newUserOffset) {
            output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);
        }
        return output;
    }
    offsetUTC(date) {
        const utc = toUTCDate(this._utc, date);
        const dtf = toUTCDate(this._dtf, date);
        return (utc - dtf) / 60000;
    }
    parseDate(date) {
        return parseDate(this._dtf, date);
    }
} //# sourceMappingURL=Timezone.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/DateFormatter.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "DateFormatter": ()=>DateFormatter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Timezone$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Timezone.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class DateFormatter extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    _setDefaults() {
        // Defaults
        this._setDefault("capitalize", true);
        this._setDefault("dateFormat", "yyyy-MM-dd");
        super._setDefaults();
    }
    _beforeChanged() {
        super._beforeChanged();
    }
    /**
     * Formats a source `Date` object into string format
     * @param   source          inpout date
     * @param   format          Output format
     * @param   ignoreTimezone  Ignore timezone?
     * @return                  Formatted date
     */ format(source, format, ignoreTimezone = false) {
        // Locale?
        // TODO
        // No format passed in or it's empty
        if (typeof format === "undefined" || format === "") {
            format = this.get("dateFormat", "yyyy-MM-dd");
        }
        // Init return value
        let formatted;
        // Cast?
        // TODO: decide if we need to cast
        let date = source;
        // Is it a built-in format or Intl.DateTimeFormat
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(format)) {
            try {
                const locales = this.get("intlLocales");
                if (locales) {
                    return new Intl.DateTimeFormat(locales, format).format(date);
                } else {
                    return new Intl.DateTimeFormat(undefined, format).format(date);
                }
            } catch (e) {
                return "Invalid";
            }
        }
        // get format info (it will also deal with parser caching)
        let info = this.parseFormat(format);
        // Should we apply custom time zone?
        const timezone = this._root.timezone;
        if (timezone && !this._root.utc && !ignoreTimezone) {
            date = timezone.convertLocal(date);
        }
        // Check if it's a valid date
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(date.getTime())) {
            // TODO translation
            //return this._t("Invalid date");
            return "Invalid date";
        }
        // Apply format
        formatted = this.applyFormat(date, info, ignoreTimezone);
        // Capitalize
        if (this.get("capitalize")) {
            formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
        }
        // We're done
        return formatted;
    }
    /**
     * Applies format to Date.
     *
     * @param date      Date object
     * @param info      Parsed format information
     * @return Formatted date string
     */ applyFormat(date, info, ignoreTimezone = false) {
        // Init return value
        let res = info.template;
        // Get values
        let fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, timestamp = date.getTime();
        if (this._root.utc && !ignoreTimezone) {
            fullYear = date.getUTCFullYear();
            month = date.getUTCMonth();
            weekday = date.getUTCDay();
            day = date.getUTCDate();
            hours = date.getUTCHours();
            minutes = date.getUTCMinutes();
            seconds = date.getUTCSeconds();
            milliseconds = date.getUTCMilliseconds();
        } else {
            fullYear = date.getFullYear();
            month = date.getMonth();
            weekday = date.getDay();
            day = date.getDate();
            hours = date.getHours();
            minutes = date.getMinutes();
            seconds = date.getSeconds();
            milliseconds = date.getMilliseconds();
        }
        // Go through each part and format/replace it in template
        for(let i = 0, len = info.parts.length; i < len; i++){
            let value = "";
            switch(info.parts[i]){
                case "G":
                    value = this._t(fullYear < 0 ? "_era_bc" : "_era_ad");
                    break;
                case "yyyy":
                    value = Math.abs(fullYear).toString();
                    if (fullYear < 0) {
                        value += this._t("_era_bc");
                    }
                    break;
                case "yyy":
                case "yy":
                case "y":
                    value = Math.abs(fullYear).toString().substr(-info.parts[i].length);
                    if (fullYear < 0) {
                        value += this._t("_era_bc");
                    }
                    break;
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                    let year = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getWeekYear(date, this._root.utc);
                    if (info.parts[i] == "YYYY") {
                        value = Math.abs(year).toString();
                    } else {
                        value = Math.abs(year).toString().substr(-info.parts[i].length);
                    }
                    if (year < 0) {
                        value += this._t("_era_bc");
                    }
                    break;
                case "u":
                    break;
                case "q":
                    value = "" + Math.ceil((date.getMonth() + 1) / 3);
                    break;
                case "MMMMM":
                    value = this._t(this._getMonth(month)).substr(0, 1);
                    break;
                case "MMMM":
                    value = this._t(this._getMonth(month));
                    break;
                case "MMM":
                    value = this._t(this._getShortMonth(month));
                    break;
                case "MM":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(month + 1, 2, "0");
                    break;
                case "M":
                    value = (month + 1).toString();
                    break;
                case "ww":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getWeek(date, this._root.utc), 2, "0");
                    break;
                case "w":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getWeek(date, this._root.utc).toString();
                    break;
                case "W":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getMonthWeek(date, this._root.utc).toString();
                    break;
                case "dd":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(day, 2, "0");
                    break;
                case "d":
                    value = day.toString();
                    break;
                case "DD":
                case "DDD":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getYearDay(date, this._root.utc).toString(), info.parts[i].length, "0");
                    break;
                case "D":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getYearDay(date, this._root.utc).toString();
                    break;
                case "F":
                    break;
                case "g":
                    break;
                case "t":
                    value = this._root.language.translateFunc("_dateOrd").call(this, day);
                    break;
                case "E":
                    value = (weekday || 7).toString();
                    break;
                case "EE":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString((weekday || 7).toString(), 2, "0");
                    break;
                case "EEE":
                case "eee":
                    value = this._t(this._getShortWeekday(weekday));
                    break;
                case "EEEE":
                case "eeee":
                    value = this._t(this._getWeekday(weekday));
                    break;
                case "EEEEE":
                case "eeeee":
                    value = this._t(this._getShortWeekday(weekday)).substr(0, 1);
                    break;
                case "e":
                case "ee":
                    value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();
                    if (info.parts[i] == "ee") {
                        value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(value, 2, "0");
                    }
                    break;
                case "a":
                    if (hours >= 12) {
                        value = this._t("PM");
                    } else {
                        value = this._t("AM");
                    }
                    break;
                case "aa":
                    if (hours >= 12) {
                        value = this._t("P.M.");
                    } else {
                        value = this._t("A.M.");
                    }
                    break;
                case "aaa":
                    if (hours >= 12) {
                        value = this._t("P");
                    } else {
                        value = this._t("A");
                    }
                    break;
                case "h":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.get12Hours(hours).toString();
                    break;
                case "hh":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.get12Hours(hours), 2, "0");
                    break;
                case "H":
                    value = hours.toString();
                    break;
                case "HH":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(hours, 2, "0");
                    break;
                case "K":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.get12Hours(hours, 0).toString();
                    break;
                case "KK":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.get12Hours(hours, 0), 2, "0");
                    break;
                case "k":
                    value = (hours + 1).toString();
                    break;
                case "kk":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(hours + 1, 2, "0");
                    break;
                case "m":
                    value = minutes.toString();
                    break;
                case "mm":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(minutes, 2, "0");
                    break;
                case "s":
                    value = seconds.toString();
                    break;
                case "ss":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(seconds, 2, "0");
                    break;
                case "S":
                case "SS":
                case "SSS":
                    value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();
                    break;
                case "x":
                    value = timestamp.toString();
                    break;
                case "n":
                case "nn":
                case "nnn":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(milliseconds, info.parts[i].length, "0");
                    break;
                case "z":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getTimeZone(date, false, false, this._root.utc, this._root.timezone ? this._root.timezone.name : undefined).replace(/[+-]+[0-9]+$/, "");
                    break;
                case "zz":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getTimeZone(date, true, false, this._root.utc, this._root.timezone ? this._root.timezone.name : undefined);
                    break;
                case "zzz":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getTimeZone(date, false, true, this._root.utc, this._root.timezone ? this._root.timezone.name : undefined).replace(/[+-]+[0-9]+$/, "");
                    break;
                case "zzzz":
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getTimeZone(date, true, true, this._root.utc, this._root.timezone ? this._root.timezone.name : undefined);
                    break;
                case "Z":
                case "ZZ":
                    let timezone = this._root.utc ? "UTC" : this._root.timezone;
                    if (timezone instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Timezone$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Timezone"]) {
                        timezone = timezone.name;
                    }
                    const offset = timezone ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getTimezoneOffset(timezone) : date.getTimezoneOffset();
                    let tz = Math.abs(offset) / 60;
                    let tzh = Math.floor(tz);
                    let tzm = tz * 60 - tzh * 60;
                    if (this._root.utc) {
                        tzh = 0;
                        tzm = 0;
                    }
                    if (info.parts[i] == "Z") {
                        value = "GMT";
                        value += offset > 0 ? "-" : "+";
                        value += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(tzh, 2) + ":" + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(tzm, 2);
                    } else {
                        value = offset > 0 ? "-" : "+";
                        value += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(tzh, 2) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(tzm, 2);
                    }
                    break;
                case "i":
                    value = date.toISOString();
                    break;
                case "I":
                    value = date.toUTCString();
                    break;
            }
            res = res.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER, value);
        }
        return res;
    }
    /**
     * Parses format into structured infromation.
     *
     * @param format Format template
     */ parseFormat(format) {
        // Check cache
        // TODO: implement caching of the parsed format
        // Init format parse info holder
        let info = {
            "template": "",
            "parts": []
        };
        // Let TextFormatter split into chunks
        let chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].chunk(format, true);
        for(let i = 0; i < chunks.length; i++){
            let chunk = chunks[i];
            if (chunk.type === "value") {
                // Just "Date"?
                if (chunk.text.match(/^date$/i)) {
                    let dateFormat = this.get("dateFormat", "yyyy-MM-dd");
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isString(dateFormat)) {
                        dateFormat = "yyyy-MM-dd";
                    }
                    chunk.text = dateFormat;
                }
                // Find all possible parts
                let matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                // Found?
                if (matches) {
                    // Populate template
                    for(let x = 0; x < matches.length; x++){
                        info.parts.push(matches[x]);
                        chunk.text = chunk.text.replace(matches[x], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER);
                    }
                }
            }
            // Apply to template
            info.template += chunk.text;
        }
        // Save cache
        // TODO
        return info;
    }
    _months() {
        return [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ];
    }
    _getMonth(index) {
        return this._months()[index];
    }
    _shortMonths() {
        return [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May(short)",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ];
    }
    _getShortMonth(index) {
        return this._shortMonths()[index];
    }
    _weekdays() {
        return [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ];
    }
    _getWeekday(index) {
        return this._weekdays()[index];
    }
    _shortWeekdays() {
        return [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ];
    }
    _getShortWeekday(index) {
        return this._shortWeekdays()[index];
    }
    parse(source, format) {
        // Is it already a Date
        if (source instanceof Date) {
            return source;
        }
        // Is it a numeric timestamp
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(source)) {
            return new Date(source);
        }
        // Are we parsing a timestamp?
        if (format == "x") {
            return new Date(parseInt(source));
        }
        // No? Let's check if it's string, and try converting to it if nec
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isString(source)) {
            source = source.toString();
        }
        // Init return value
        let res;
        // Init RegEx for parsing
        let reg = "";
        // Clean format
        format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cleanFormat(format);
        // Clip format to length of the source string
        format = format.substr(0, source.length);
        // Parse format
        let info = this.parseFormat(format);
        // Init parsed items holder
        let parsedIndexes = {
            "year": -1,
            "year3": -1,
            "year2": -1,
            "year1": -1,
            "month": -1,
            "monthShort": -1,
            "monthLong": -1,
            "weekdayShort": -1,
            "weekdayLong": -1,
            "day": -1,
            "yearDay": -1,
            "week": -1,
            "hourBase0": -1,
            "hour12Base0": -1,
            "hourBase1": -1,
            "hour12Base1": -1,
            "minute": -1,
            "second": -1,
            "millisecond": -1,
            "millisecondDigits": -1,
            "am": -1,
            "zone": -1,
            "timestamp": -1,
            "iso": -1
        };
        // Init values
        let resValues = {
            "year": 1970,
            "month": 0,
            "day": 1,
            "hour": 0,
            "minute": 0,
            "second": 0,
            "millisecond": 0,
            "timestamp": null,
            "offset": 0,
            "utc": this._root.utc
        };
        // Index adjuster
        let indexAdjust = 0;
        let index = 0;
        // Iterate through all of the parts
        for(let i = 0; i < info.parts.length; i++){
            // Set current match index
            index = i + indexAdjust + 1;
            switch(info.parts[i]){
                case "yyyy":
                case "YYYY":
                    reg += "([0-9]{4})";
                    parsedIndexes.year = index;
                    break;
                case "yyy":
                case "YYY":
                    reg += "([0-9]{3})";
                    parsedIndexes.year3 = index;
                    break;
                case "yy":
                case "YY":
                    reg += "([0-9]{2})";
                    parsedIndexes.year2 = index;
                    break;
                case "y":
                case "Y":
                    reg += "([0-9]{1})";
                    parsedIndexes.year1 = index;
                    break;
                case "MMMM":
                    reg += "(" + this.getStringList(this._months()).join("|") + ")";
                    parsedIndexes.monthLong = index;
                    break;
                case "MMM":
                    reg += "(" + this.getStringList(this._shortMonths()).join("|") + ")";
                    parsedIndexes.monthShort = index;
                    break;
                case "MM":
                case "M":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.month = index;
                    break;
                case "ww":
                case "w":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.week = index;
                    break;
                case "dd":
                case "d":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.day = index;
                    break;
                case "DDD":
                case "DD":
                case "D":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.yearDay = index;
                    break;
                case "dddd":
                    reg += "(" + this.getStringList(this._weekdays()).join("|") + ")";
                    parsedIndexes.weekdayLong = index;
                    break;
                case "ddd":
                    reg += "(" + this.getStringList(this._shortWeekdays()).join("|") + ")";
                    parsedIndexes.weekdayShort = index;
                    break;
                case "aaa":
                case "aa":
                case "a":
                    // TODO: fix (escape regex)
                    reg += "(" + this.getStringList([
                        "AM",
                        "PM",
                        "A\.M\.",
                        "P\.M\.",
                        "A",
                        "P"
                    ]).join("|") + ")";
                    parsedIndexes.am = index;
                    break;
                case "hh":
                case "h":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base1 = index;
                    break;
                case "HH":
                case "H":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase0 = index;
                    break;
                case "KK":
                case "K":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base0 = index;
                    break;
                case "kk":
                case "k":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase1 = index;
                    break;
                case "mm":
                case "m":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.minute = index;
                    break;
                case "ss":
                case "s":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.second = index;
                    break;
                case "SSS":
                case "SS":
                case "S":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    parsedIndexes.millisecondDigits = info.parts[i].length;
                    break;
                case "nnn":
                case "nn":
                case "n":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    break;
                case "x":
                    reg += "([0-9]{1,})";
                    parsedIndexes.timestamp = index;
                    break;
                case "Z":
                    reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "ZZ":
                    reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "i":
                    reg += "([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)";
                    parsedIndexes.iso = index;
                    indexAdjust += 7;
                    break;
                case "G":
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                case "MMMMM":
                case "W":
                case "EEEEE":
                case "EEEE":
                case "EEE":
                case "EE":
                case "E":
                case "eeeee":
                case "eeee":
                case "eee":
                case "ee":
                case "e":
                case "zzzz":
                case "zzz":
                case "zz":
                case "z":
                case "t":
                    // Ignore
                    indexAdjust--;
                    break;
            }
            reg += "[^0-9]*";
        }
        // Try matching
        let regex = new RegExp(reg);
        let matches = source.match(regex);
        if (matches) {
            // Populate the date object
            // Full year
            if (parsedIndexes.year > -1) {
                resValues.year = parseInt(matches[parsedIndexes.year]);
            }
            // 3-digit year
            if (parsedIndexes.year3 > -1) {
                let val = parseInt(matches[parsedIndexes.year3]);
                val += 1000;
                resValues.year = val;
            }
            // 2-digit year
            if (parsedIndexes.year2 > -1) {
                let val = parseInt(matches[parsedIndexes.year2]);
                if (val > 50) {
                    val += 1000;
                } else {
                    val += 2000;
                }
                resValues.year = val;
            }
            // 1-digit year
            if (parsedIndexes.year1 > -1) {
                let val = parseInt(matches[parsedIndexes.year1]);
                val = Math.floor(new Date().getFullYear() / 10) * 10 + val;
                resValues.year = val;
            }
            // Full month
            if (parsedIndexes.monthLong > -1) {
                resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
            }
            // Short month
            if (parsedIndexes.monthShort > -1) {
                resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
            }
            // Numeric month
            if (parsedIndexes.month > -1) {
                resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
            }
            // Weekday
            // @todo
            // Week
            if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {
                // We parse weeks ONLY if day is not explicitly set
                // TODO: this needs work
                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                resValues.month = 0;
                resValues.day = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);
            }
            // Day
            if (parsedIndexes.day > -1) {
                resValues.day = parseInt(matches[parsedIndexes.day]);
            }
            // Year day
            if (parsedIndexes.yearDay > -1) {
                resValues.month = 0;
                resValues.day = parseInt(matches[parsedIndexes.yearDay]);
            }
            // 24 Hour (0-23)
            if (parsedIndexes.hourBase0 > -1) {
                resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
            }
            // 24 Hour (1-24)
            if (parsedIndexes.hourBase1 > -1) {
                resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
            }
            // 12 Hour (0-11)
            if (parsedIndexes.hour12Base0 > -1) {
                let val = parseInt(matches[parsedIndexes.hour12Base0]);
                if (val == 11) {
                    val = 0;
                }
                if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                resValues.hour = val;
            }
            // 12 Hour (1-12)
            if (parsedIndexes.hour12Base1 > -1) {
                let val = parseInt(matches[parsedIndexes.hour12Base1]);
                if (val == 12) {
                    val = 0;
                }
                if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                resValues.hour = val;
            }
            // Minute
            if (parsedIndexes.minute > -1) {
                resValues.minute = parseInt(matches[parsedIndexes.minute]);
            }
            // Second
            if (parsedIndexes.second > -1) {
                resValues.second = parseInt(matches[parsedIndexes.second]);
            }
            // Millisecond
            if (parsedIndexes.millisecond > -1) {
                let val = parseInt(matches[parsedIndexes.millisecond]);
                if (parsedIndexes.millisecondDigits == 2) {
                    val *= 10;
                } else if (parsedIndexes.millisecondDigits == 1) {
                    val *= 100;
                }
                resValues.millisecond = val;
            }
            // Timestamp
            if (parsedIndexes.timestamp > -1) {
                resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
                const ts = new Date(resValues.timestamp);
                resValues.year = ts.getUTCFullYear();
                resValues.month = ts.getUTCMonth();
                resValues.day = ts.getUTCDate();
                resValues.hour = ts.getUTCHours();
                resValues.minute = ts.getUTCMinutes();
                resValues.second = ts.getUTCSeconds();
                resValues.millisecond = ts.getUTCMilliseconds();
            }
            // Adjust time zone
            if (parsedIndexes.zone > -1) {
                resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);
            }
            // ISO
            if (parsedIndexes.iso > -1) {
                resValues.year = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 0]);
                resValues.month = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 1]) - 1;
                resValues.day = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 2]);
                resValues.hour = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 3]);
                resValues.minute = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 4]);
                resValues.second = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 5]);
                resValues.millisecond = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(matches[parsedIndexes.iso + 6]);
                if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
                    resValues.utc = true;
                } else if (matches[parsedIndexes.iso + 7] != "") {
                    resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);
                }
            }
            // Create Date object
            if (resValues.utc) {
                res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
            } else {
                res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);
            }
        } else {
            // Didn't match anything
            // Let's try dropping it into Date constructor and hope for the best
            res = new Date(source);
        }
        return res;
    }
    resolveTimezoneOffset(date, zone) {
        let value = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
        if (value) {
            let match = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
            let dir = match[1];
            let hour = match[2];
            let minute = match[3];
            let offset = parseInt(hour) * 60 + parseInt(minute);
            // Adjust offset
            // Making it negative does not seem to make sense, but it's right
            // because of how JavaScript calculates GMT offsets
            if (dir == "+") {
                offset *= -1;
            }
            // Check the difference in offset
            let originalOffset = (date || new Date()).getTimezoneOffset();
            let diff = offset - originalOffset;
            return diff;
        }
        return 0;
    }
    /**
     * Resolves month name (i.e. "December") into a month number (11).
     *
     * @param value  Month name
     * @return Month number
     */ resolveMonth(value) {
        // Let's try English first
        let month = this._months().indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (!this._root.language.isDefault()) {
            month = this._root.language.translateAll(this._months()).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    }
    /**
     * Resolves short month name (i.e. "Dec") into a month number.
     *
     * @param value  Short month name
     * @return Month number
     */ resolveShortMonth(value) {
        // Let's try English first
        let month = this._shortMonths().indexOf(value);
        if (month > -1) {
            return month;
        }
        // Maybe long month (workaround for May)
        month = this._months().indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (this._root.language && !this._root.language.isDefault()) {
            month = this._root.language.translateAll(this._shortMonths()).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    }
    /**
     * Checks if passed in string represents AM/PM notation in many of its
     * versions.
     *
     * @param value  Source string
     * @return Is it AM/PM?
     */ isAm(value) {
        let list = this.getStringList([
            "AM",
            "A.M.",
            "A"
        ]);
        return list.indexOf(value.toUpperCase()) > -1;
    }
    /**
     * Translates list of strings.
     *
     * @param list  Source strings
     * @return Translated strings
     */ getStringList(list) {
        let res = [];
        for(let i = 0; i < list.length; i++){
            // translate?
            if (this._root.language) {
                res.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.escapeForRgex(this._t(list[i])));
            } else {
                res.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.escapeForRgex(list[i]));
            }
        }
        return res;
    }
} //# sourceMappingURL=DateFormatter.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/DurationFormatter.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "DurationFormatter": ()=>DurationFormatter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class DurationFormatter extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    constructor(){
        super(...arguments);
        /**
         * Collection of aliases for units.
         */ Object.defineProperty(this, "_unitAliases", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                "Y": "y",
                "D": "d",
                "H": "h",
                "K": "h",
                "k": "h",
                "n": "S"
            }
        });
    }
    _setDefaults() {
        const dmillisecond = "_duration_millisecond";
        const dsecond = "_duration_second";
        const dminute = "_duration_minute";
        const dhour = "_duration_hour";
        const dday = "_duration_day";
        const dweek = "_duration_week";
        const dmonth = "_duration_month";
        const dyear = "_duration_year";
        const asecond = "_second";
        const aminute = "_minute";
        const ahour = "_hour";
        const aday = "_day";
        const aweek = "_week";
        const amonth = "_week";
        const ayear = "_year";
        // Defaults
        this._setDefault("negativeBase", 0);
        this._setDefault("baseUnit", "second");
        this._setDefault("durationFormats", {
            "millisecond": {
                "millisecond": this._t(dmillisecond),
                "second": this._t(dmillisecond + asecond),
                "minute": this._t(dmillisecond + aminute),
                "hour": this._t(dmillisecond + ahour),
                "day": this._t(dmillisecond + aday),
                "week": this._t(dmillisecond + aweek),
                "month": this._t(dmillisecond + amonth),
                "year": this._t(dmillisecond + ayear)
            },
            "second": {
                "second": this._t(dsecond),
                "minute": this._t(dsecond + aminute),
                "hour": this._t(dsecond + ahour),
                "day": this._t(dsecond + aday),
                "week": this._t(dsecond + aweek),
                "month": this._t(dsecond + amonth),
                "year": this._t(dsecond + ayear)
            },
            "minute": {
                "minute": this._t(dminute),
                "hour": this._t(dminute + ahour),
                "day": this._t(dminute + aday),
                "week": this._t(dminute + aweek),
                "month": this._t(dminute + amonth),
                "year": this._t(dminute + ayear)
            },
            "hour": {
                "hour": this._t(dhour),
                "day": this._t(dhour + aday),
                "week": this._t(dhour + aweek),
                "month": this._t(dhour + amonth),
                "year": this._t(dhour + ayear)
            },
            "day": {
                "day": this._t(dday),
                "week": this._t(dday + aweek),
                "month": this._t(dday + amonth),
                "year": this._t(dday + ayear)
            },
            "week": {
                "week": this._t(dweek),
                "month": this._t(dweek + amonth),
                "year": this._t(dweek + ayear)
            },
            "month": {
                "month": this._t(dmonth),
                "year": this._t(dmonth + ayear)
            },
            "year": {
                "year": this._t(dyear)
            }
        });
        super._setDefaults();
    }
    _beforeChanged() {
        super._beforeChanged();
    }
    /**
     * Formats the number as duration.
     *
     * For example `1000` (base unit seconds) would be converted to `16:40` as in
     * 16 minutes and 40 seconds.
     *
     * @param value   Value to format
     * @param format  Format to apply
     * @param base    Override base unit
     * @return Formatted number
     */ format(value, format, base) {
        // no base unit?
        let baseUnit = base || this.get("baseUnit");
        // no format passed in or empty
        if (typeof format === "undefined" || format === "") {
            if (this.get("durationFormat") != null) {
                format = this.get("durationFormat");
            } else {
                format = this.getFormat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toNumber(value), undefined, baseUnit);
            }
        }
        // Clean format
        format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cleanFormat(format);
        // get format info (it will also deal with parser caching)
        let info = this.parseFormat(format, baseUnit);
        // cast to number just in case
        // TODO: maybe use better casting
        let source = Number(value);
        // format and replace the number
        let details;
        if (source > this.get("negativeBase")) {
            details = info.positive;
        } else if (source < this.get("negativeBase")) {
            details = info.negative;
        } else {
            details = info.zero;
        }
        // Format
        let formatted = this.applyFormat(source, details);
        // Apply color?
        if (details.color !== "") {
            formatted = "[" + details.color + "]" + formatted + "[/]";
        }
        return formatted;
    }
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param format  Format string, i.e. "#,###.00"
     * @param base    Override base unit
     * @return Parsed information
     */ parseFormat(format, base) {
        // Check cache
        // TODO
        // let cached = this.getCache(format);
        // if (cached != null) {
        // 	return cached;
        // }
        // no base unit?
        let baseUnit = base || this.get("baseUnit");
        // Initialize duration parsing info
        let info = {
            "positive": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "negative": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "zero": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2);
        // Split it up and deal with different formats
        let parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        } else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        } else {
            info.negative.source = parts[1];
        }
        // Parse each
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(info, (_part, item)=>{
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            // TODO
            // if (typeof this.getCache(item.source) !== "undefined") {
            // 	info[part] = this.getCache(item.source);
            // 	return;
            // }
            // Begin parsing
            let partFormat = item.source;
            // Check for [] directives
            let dirs = [];
            dirs = item.source.match(/^\[([^\]]*)\]/);
            if (dirs && dirs.length && dirs[0] !== "") {
                partFormat = item.source.substr(dirs[0].length);
                item.color = dirs[1];
            }
            // Let TextFormatter split into chunks
            let chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].chunk(partFormat, true);
            for(let i = 0; i < chunks.length; i++){
                let chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2, "|");
                if (chunk.type === "value") {
                    // Just "Duration"?
                    // if (chunk.text.toLowerCase() === "duration") {
                    // 	chunk.text = durationFormat;
                    // }
                    // Check for "a" (absolute) modifier
                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                        item.absolute = true;
                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                    }
                    // Find all possible parts
                    let matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                    if (matches) {
                        // Populate template
                        for(let x = 0; x < matches.length; x++){
                            // Is it an alias?
                            if (matches[x] == null) {
                                matches[x] = this._unitAliases[matches[x]];
                            }
                            item.parts.push(matches[x]);
                            chunk.text = chunk.text.replace(matches[x], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER);
                        }
                    }
                }
                // Apply to template
                item.template += chunk.text;
            }
            // Apply style formatting
            //item.template = TextFormatter.format(item.template, this.outputFormat);
            // Save cache
            // TODO
            //this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        // TODO
        //this.setCache(format, info);
        return info;
    }
    /**
     * Applies parsed format to a numeric value.
     *
     * @param value    Value
     * @param details  Parsed format as returned by {parseFormat}
     * @return Formatted duration
     */ applyFormat(value, details) {
        // Use absolute values
        let negative = !details.absolute && value < this.get("negativeBase");
        value = Math.abs(value);
        // Recalculate to milliseconds
        let tstamp = this.toTimeStamp(value, details.baseUnit);
        // Init return value
        let res = details.template;
        // Iterate through duration parts
        for(let i = 0, len = details.parts.length; i < len; i++){
            // Gather the part
            let part = details.parts[i];
            let unit = this._toTimeUnit(part.substr(0, 1));
            let digits = part.length;
            // Calculate current unit value
            let ints = Math.floor(tstamp / this._getUnitValue(unit));
            res = res.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.padString(ints, digits, "0"));
            // Reduce timestamp
            tstamp -= ints * this._getUnitValue(unit);
        }
        // Reapply negative sign
        if (negative) {
            res = "-" + res;
        }
        return res;
    }
    /**
     * Converts numeric value to timestamp in milliseconds.
     *
     * @param value     A source value
     * @param baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
     * @return Value representation as a timestamp in milliseconds
     */ toTimeStamp(value, baseUnit) {
        return value * this._getUnitValue(baseUnit);
    }
    _toTimeUnit(code) {
        switch(code){
            case "S":
                return "millisecond";
            case "s":
                return "second";
            case "m":
                return "minute";
            case "h":
                return "hour";
            case "d":
                return "day";
            case "w":
                return "week";
            case "M":
                return "month";
            case "y":
                return "year";
        }
        ;
    }
    /**
     * Returns appropriate default format for the value.
     *
     * If `maxValue` is sepcified, it will use that value to determine the time
     * unit for the format.
     *
     * For example if your `baseUnit` is `"second"` and you pass in `10`, you
     * will get `"10"`.
     *
     * However, you might want it to be formatted in the context of bigger scale,
     * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all
     * values, including small ones will use format with minutes, e.g.:
     * `00:10`, `00:50`, `12: 30`, etc.
     *
     * @param value     Value to format
     * @param maxValue  Maximum value to be used to determine format
     * @param baseUnit  Base unit of the value
     * @return Format
     */ getFormat(value, maxValue, baseUnit) {
        // Is format override set?
        if (this.get("durationFormat") != null) {
            return this.get("durationFormat");
        }
        // Get base unit
        if (!baseUnit) {
            baseUnit = this.get("baseUnit");
        }
        if (maxValue != null && value != maxValue) {
            value = Math.abs(value);
            maxValue = Math.abs(maxValue);
            let maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);
            return this.get("durationFormats")[baseUnit][maxUnit];
        } else {
            let unit = this.getValueUnit(value, baseUnit);
            return this.get("durationFormats")[baseUnit][unit];
        }
    }
    /**
     * Returns value's closest denominator time unit, e.g 100 seconds is
     * `"minute"`, while 59 seconds would still be `second`.
     *
     * @param value     Source duration value
     * @param baseUnit  Base unit
     * @return Denominator
     */ getValueUnit(value, baseUnit) {
        // Get base unit
        if (!baseUnit) {
            baseUnit = this.get("baseUnit");
        }
        // Convert to milliseconds
        let currentUnit;
        let ms = this.getMilliseconds(value, baseUnit);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.eachContinue(this._getUnitValues(), (key, val)=>{
            if (key == baseUnit || currentUnit) {
                let num = ms / val;
                if (num <= 1) {
                    if (!currentUnit) {
                        currentUnit = key;
                    }
                    return false;
                }
                currentUnit = key;
            }
            return true;
        });
        return currentUnit;
    }
    /**
     * Converts value to milliseconds according to `baseUnit`.
     *
     * @param value     Source duration value
     * @param baseUnit  Base unit
     * @return Value in milliseconds
     */ getMilliseconds(value, baseUnit) {
        // Get base unit
        if (!baseUnit) {
            baseUnit = this.get("baseUnit");
        }
        return value * this._getUnitValue(baseUnit);
    }
    _getUnitValue(timeUnit) {
        return this._getUnitValues()[timeUnit];
    }
    _getUnitValues() {
        return {
            "millisecond": 1,
            "second": 1000,
            "minute": 60000,
            "hour": 3600000,
            "day": 86400000,
            "week": 604800000,
            "month": 2592000000,
            "year": 31536000000
        };
    }
} //# sourceMappingURL=DurationFormatter.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/InterfaceColors.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "InterfaceColors": ()=>InterfaceColors
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class InterfaceColors extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
}
Object.defineProperty(InterfaceColors, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "InterfaceColors"
});
Object.defineProperty(InterfaceColors, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        InterfaceColors.className
    ])
}); //# sourceMappingURL=InterfaceColors.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Time.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */ __turbopack_esm__({
    "add": ()=>add,
    "checkChange": ()=>checkChange,
    "chooseInterval": ()=>chooseInterval,
    "copy": ()=>copy,
    "getDateIntervalDuration": ()=>getDateIntervalDuration,
    "getDuration": ()=>getDuration,
    "getIntervalDuration": ()=>getIntervalDuration,
    "getNextUnit": ()=>getNextUnit,
    "getTime": ()=>getTime,
    "getUnitValue": ()=>getUnitValue,
    "now": ()=>now,
    "roun": ()=>roun,
    "round": ()=>round,
    "sleep": ()=>sleep,
    "timeUnitDurations": ()=>timeUnitDurations
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function sleep(ms) {
    return new Promise((resolve, _reject)=>{
        setTimeout(resolve, ms);
    });
}
let timeUnitDurations = {
    millisecond: 1,
    second: 1000,
    minute: 60000,
    hour: 3600000,
    day: 86400000,
    week: 604800000,
    month: 365.242 / 12 * 86400000,
    year: 31536000000
};
function getNextUnit(unit) {
    switch(unit){
        case "year":
            return;
        case "month":
            return "year";
        case "week":
            return "month";
        case "day":
            return "month"; // not a mistake
        case "hour":
            return "day";
        case "minute":
            return "hour";
        case "second":
            return "minute";
        case "millisecond":
            return "second";
    }
}
function getDuration(unit, count) {
    if (count == null) {
        count = 1;
    }
    return timeUnitDurations[unit] * count;
}
function getIntervalDuration(interval) {
    if (interval) {
        return timeUnitDurations[interval.timeUnit] * interval.count;
    }
    return 0;
}
function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {
    const unit = interval.timeUnit;
    const count = interval.count;
    if (unit == "hour" || unit == "minute" || unit == "second" || unit == "millisecond") {
        return timeUnitDurations[interval.timeUnit] * interval.count;
    } else {
        const firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();
        let lastTime = firstTime + count * getDuration(unit) * 1.05;
        lastTime = round(new Date(lastTime), unit, 1, firstDateOfWeek, utc, undefined, timezone).getTime();
        return lastTime - firstTime;
    }
}
function now() {
    return new Date();
}
function getTime() {
    return now().getTime();
}
function copy(date) {
    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
}
function checkChange(timeOne, timeTwo, unit, utc, timezone) {
    // quick
    if (timeTwo - timeOne > getDuration(unit, 1.2)) {
        return true;
    }
    let dateOne = new Date(timeOne);
    let dateTwo = new Date(timeTwo);
    if (timezone) {
        dateOne = timezone.convertLocal(dateOne);
        dateTwo = timezone.convertLocal(dateTwo);
    }
    let timeZoneOffset1 = 0;
    let timeZoneOffset2 = 0;
    if (!utc && unit != "millisecond") {
        timeZoneOffset1 = dateOne.getTimezoneOffset();
        dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
        timeZoneOffset2 = dateTwo.getTimezoneOffset();
        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
    }
    let changed = false;
    switch(unit){
        case "year":
            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                changed = true;
            }
            break;
        case "month":
            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                changed = true;
            } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                changed = true;
            }
            break;
        case "day":
            if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                changed = true;
            } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
                changed = true;
            }
            break;
        case "hour":
            if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
                changed = true;
            }
            break;
        case "minute":
            if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
                changed = true;
            }
            break;
        case "second":
            if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
                changed = true;
            }
            break;
        case "millisecond":
            if (dateOne.getTime() != dateTwo.getTime()) {
                changed = true;
            }
            break;
    }
    if (changed) {
        return changed;
    }
    let nextUnit = getNextUnit(unit);
    if (nextUnit) {
        return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);
    } else {
        return false;
    }
}
function add(date, unit, count, utc, timezone) {
    let timeZoneOffset = 0;
    if (!utc && unit != "millisecond") {
        timeZoneOffset = date.getTimezoneOffset();
        if (timezone) {
            timeZoneOffset -= timezone.offsetUTC(date);
        }
        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
    }
    switch(unit){
        case "day":
            let day = date.getUTCDate();
            date.setUTCDate(day + count);
            break;
        case "second":
            let seconds = date.getUTCSeconds();
            date.setUTCSeconds(seconds + count);
            break;
        case "millisecond":
            let milliseconds = date.getUTCMilliseconds();
            date.setUTCMilliseconds(milliseconds + count);
            break;
        case "hour":
            let hours = date.getUTCHours();
            date.setUTCHours(hours + count);
            break;
        case "minute":
            let minutes = date.getUTCMinutes();
            date.setUTCMinutes(minutes + count);
            break;
        case "year":
            let year = date.getUTCFullYear();
            date.setUTCFullYear(year + count);
            break;
        case "month":
            const endDays = date.getUTCDate();
            const startDays = new Date(date.getUTCFullYear(), date.getUTCMonth(), 0).getUTCDate();
            let month = date.getUTCMonth();
            if (endDays > startDays) {
                date.setUTCMonth(month + count, startDays);
            } else {
                date.setUTCMonth(month + count);
            }
            break;
        case "week":
            let wday = date.getUTCDate();
            date.setUTCDate(wday + count * 7);
            break;
    }
    if (!utc && unit != "millisecond") {
        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
        if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
            let newTimeZoneOffset = date.getTimezoneOffset();
            if (timezone) {
                newTimeZoneOffset += timezone.offsetUTC(date);
            }
            if (newTimeZoneOffset != timeZoneOffset) {
                let diff = newTimeZoneOffset - timeZoneOffset;
                date.setUTCMinutes(date.getUTCMinutes() + diff);
                // solves issues if new time falls back to old time zone
                if (date.getTimezoneOffset() != newTimeZoneOffset) {
                    date.setUTCMinutes(date.getUTCMinutes() - diff);
                }
            }
        }
    }
    return date;
}
function roun(time, unit, count, root, firstTime) {
    let firstDate;
    if (firstTime != null) {
        firstDate = new Date(firstTime);
    }
    return round(new Date(time), unit, count, root.locale.firstDayOfWeek, root.utc, firstDate, root.timezone).getTime();
}
function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {
    if (!timezone || utc) {
        let timeZoneOffset = 0;
        if (!utc && unit != "millisecond") {
            timeZoneOffset = date.getTimezoneOffset();
            date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
        }
        switch(unit){
            case "day":
                let day = date.getUTCDate();
                if (count > 1) {
                    //	day = Math.floor(day / count) * count;
                    if (firstDate) {
                        firstDate = round(firstDate, "day", 1);
                        let difference = date.getTime() - firstDate.getTime();
                        let unitCount = Math.floor(difference / getDuration("day") / count);
                        let duration = getDuration("day", unitCount * count);
                        date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                    }
                } else {
                    date.setUTCDate(day);
                }
                date.setUTCHours(0, 0, 0, 0);
                break;
            case "second":
                let seconds = date.getUTCSeconds();
                if (count > 1) {
                    seconds = Math.floor(seconds / count) * count;
                }
                date.setUTCSeconds(seconds, 0);
                break;
            case "millisecond":
                if (count == 1) {
                    return date; // much better for perf!
                }
                let milliseconds = date.getUTCMilliseconds();
                milliseconds = Math.floor(milliseconds / count) * count;
                date.setUTCMilliseconds(milliseconds);
                break;
            case "hour":
                let hours = date.getUTCHours();
                if (count > 1) {
                    hours = Math.floor(hours / count) * count;
                }
                date.setUTCHours(hours, 0, 0, 0);
                break;
            case "minute":
                let minutes = date.getUTCMinutes();
                if (count > 1) {
                    minutes = Math.floor(minutes / count) * count;
                }
                date.setUTCMinutes(minutes, 0, 0);
                break;
            case "month":
                let month = date.getUTCMonth();
                if (count > 1) {
                    month = Math.floor(month / count) * count;
                }
                date.setUTCMonth(month, 1);
                date.setUTCHours(0, 0, 0, 0);
                break;
            case "year":
                let year = date.getUTCFullYear();
                if (count > 1) {
                    year = Math.floor(year / count) * count;
                }
                date.setUTCFullYear(year, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                break;
            case "week":
                if (count > 1) {
                    if (firstDate) {
                        firstDate = round(firstDate, "week", 1);
                        let difference = date.getTime() - firstDate.getTime();
                        let unitCount = Math.floor(difference / getDuration("week") / count);
                        let duration = getDuration("week", unitCount * count);
                        date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                    }
                }
                let wday = date.getUTCDate();
                let weekDay = date.getUTCDay();
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(firstDateOfWeek)) {
                    firstDateOfWeek = 1;
                }
                if (weekDay >= firstDateOfWeek) {
                    wday = wday - weekDay + firstDateOfWeek;
                } else {
                    wday = wday - (7 + weekDay) + firstDateOfWeek;
                }
                date.setUTCDate(wday);
                date.setUTCHours(0, 0, 0, 0);
                break;
        }
        if (!utc && unit != "millisecond") {
            date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
            if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
                let newTimeZoneOffset = date.getTimezoneOffset();
                if (newTimeZoneOffset != timeZoneOffset) {
                    let diff = newTimeZoneOffset - timeZoneOffset;
                    date.setUTCMinutes(date.getUTCMinutes() + diff);
                }
            }
        }
        return date;
    } else {
        if (isNaN(date.getTime())) {
            return date;
        }
        let tzoffset = timezone.offsetUTC(date);
        let timeZoneOffset = date.getTimezoneOffset();
        let parsedDate = timezone.parseDate(date);
        let year = parsedDate.year;
        let month = parsedDate.month;
        let day = parsedDate.day;
        let hour = parsedDate.hour;
        let minute = parsedDate.minute;
        let second = parsedDate.second;
        let millisecond = parsedDate.millisecond;
        let weekday = parsedDate.weekday;
        let offsetDif = tzoffset - timeZoneOffset;
        switch(unit){
            case "day":
                if (count > 1 && firstDate) {
                    firstDate = round(firstDate, "day", 1, firstDateOfWeek, utc, undefined, timezone);
                    let difference = date.getTime() - firstDate.getTime();
                    let unitCount = Math.floor(difference / getDuration("day") / count);
                    let duration = getDuration("day", unitCount * count);
                    date.setTime(firstDate.getTime() + duration);
                    parsedDate = timezone.parseDate(date);
                    year = parsedDate.year;
                    month = parsedDate.month;
                    day = parsedDate.day;
                }
                hour = 0;
                minute = offsetDif;
                second = 0;
                millisecond = 0;
                break;
            case "second":
                minute += offsetDif;
                if (count > 1) {
                    second = Math.floor(second / count) * count;
                }
                millisecond = 0;
                break;
            case "millisecond":
                minute += offsetDif;
                if (count > 1) {
                    millisecond = Math.floor(millisecond / count) * count;
                }
                break;
            case "hour":
                if (count > 1) {
                    hour = Math.floor(hour / count) * count;
                }
                minute = offsetDif;
                second = 0;
                millisecond = 0;
                break;
            case "minute":
                if (count > 1) {
                    minute = Math.floor(minute / count) * count;
                }
                minute += offsetDif;
                second = 0;
                millisecond = 0;
                break;
            case "month":
                if (count > 1) {
                    month = Math.floor(month / count) * count;
                }
                day = 1;
                hour = 0;
                minute = offsetDif;
                second = 0;
                millisecond = 0;
                break;
            case "year":
                if (count > 1) {
                    year = Math.floor(year / count) * count;
                }
                month = 0;
                day = 1;
                hour = 0;
                minute = offsetDif;
                second = 0;
                millisecond = 0;
                break;
            case "week":
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isNumber(firstDateOfWeek)) {
                    firstDateOfWeek = 1;
                }
                if (weekday >= firstDateOfWeek) {
                    day = day - weekday + firstDateOfWeek;
                } else {
                    day = day - (7 + weekday) + firstDateOfWeek;
                }
                hour = 0;
                minute = offsetDif;
                second = 0;
                millisecond = 0;
                break;
        }
        date = new Date(year, month, day, hour, minute, second, millisecond);
        let newTimeZoneOffset = date.getTimezoneOffset();
        let newTzoffset = timezone.offsetUTC(date);
        let newDiff = newTzoffset - newTimeZoneOffset;
        if (newDiff != offsetDif) {
            date.setTime(date.getTime() + (newDiff - offsetDif) * 60000);
        }
        return date;
    }
}
function chooseInterval(index, duration, gridCount, intervals) {
    let gridInterval = intervals[index];
    let intervalDuration = getIntervalDuration(gridInterval);
    let lastIndex = intervals.length - 1;
    if (index >= lastIndex) {
        return Object.assign({}, intervals[lastIndex]);
    }
    let count = Math.ceil(duration / intervalDuration);
    if (duration < intervalDuration && index > 0) {
        return Object.assign({}, intervals[index - 1]);
    }
    if (count <= gridCount) {
        return Object.assign({}, intervals[index]);
    } else {
        if (index + 1 < intervals.length) {
            return chooseInterval(index + 1, duration, gridCount, intervals);
        } else {
            return Object.assign({}, intervals[index]);
        }
    }
}
function getUnitValue(date, unit) {
    switch(unit){
        case "day":
            return date.getDate();
        case "second":
            return date.getSeconds();
        case "millisecond":
            return date.getMilliseconds();
        case "hour":
            return date.getHours();
        case "minute":
            return date.getMinutes();
        case "month":
            return date.getMonth();
        case "year":
            return date.getFullYear();
        case "week":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getWeek(date);
    }
} //# sourceMappingURL=Time.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/** @ignore */ /** */ __turbopack_esm__({
    "clear": ()=>clear,
    "line": ()=>line,
    "moveTo": ()=>moveTo,
    "segmentedLine": ()=>segmentedLine,
    "smoothedLine": ()=>smoothedLine,
    "smoothedSegmentedline": ()=>smoothedSegmentedline
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Math.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function segmentedLine(display, segments) {
    for(let s = 0, len = segments.length; s < len; s++){
        const groups = segments[s];
        if (groups.length > 0) {
            let firstGroup = groups[0];
            if (firstGroup.length > 0) {
                let firstPoint = firstGroup[0];
                display.moveTo(firstPoint.x, firstPoint.y);
                for(let g = 0, len = groups.length; g < len; g++){
                    line(display, groups[g]);
                }
            }
        }
    }
}
function line(display, points) {
    for(let p = 0, len = points.length; p < len; p++){
        const point = points[p];
        display.lineTo(point.x, point.y);
    }
}
function moveTo(display, point) {
    display.moveTo(point.x, point.y);
}
function clear(display) {
    display.clear();
}
function smoothedSegmentedline(display, segments, tensionX, tensionY) {
    for(let s = 0, len = segments.length; s < len; s++){
        const groups = segments[s];
        if (groups.length > 0) {
            let firstGroup = groups[0];
            if (firstGroup.length > 0) {
                let firstPoint = firstGroup[0];
                display.moveTo(firstPoint.x, firstPoint.y);
                for(let g = 0, len = groups.length; g < len; g++){
                    const points = groups[g];
                    if (points.length > 0) {
                        display.lineTo(points[0].x, points[0].y);
                    }
                    smoothedLine(display, points, tensionX, tensionY);
                }
            }
        }
    }
}
function smoothedLine(display, points, tensionX, tensionY) {
    for(let i = points.length - 1; i > 0; i--){
        let p0 = points[i];
        let p1 = points[i - 1];
        if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {
            points.splice(i - 1, 1);
        }
    }
    if (points.length < 3 || tensionX >= 1 && tensionY >= 1) {
        line(display, points);
        return;
    }
    tensionX = 1 - tensionX + 0.00001;
    tensionY = 1 - tensionY + 0.00001;
    let first = points[0];
    let last = points[points.length - 1];
    let closed = false;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.round(first.x, 3) == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.round(last.x) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.round(first.y) == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.round(last.y)) {
        closed = true;
    }
    // Can't moveTo here, as it wont be possible to have fill then.
    let path = "";
    for(let i = 0, len = points.length - 1; i < len; i++){
        let p0 = points[i - 1];
        let p1 = points[i];
        let p2 = points[i + 1];
        let p3 = points[i + 2];
        if (i === 0) {
            if (closed) {
                p0 = points[len - 2];
            } else {
                p0 = points[0];
            }
        } else if (i == len - 1) {
            if (closed) {
                p3 = points[1];
            } else {
                p3 = p2;
            }
        }
        let controlPointA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getCubicControlPointA(p0, p1, p2, tensionX, tensionY);
        let controlPointB = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getCubicControlPointB(p1, p2, p3, tensionX, tensionY);
        display.bezierCurveTo(controlPointA.x, controlPointA.y, controlPointB.x, controlPointB.y, p2.x, p2.y);
    }
    return path;
} //# sourceMappingURL=Draw.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Modal.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Modal": ()=>Modal
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
/**
 * @ignore
 */ let rules;
/**
 * @ignore
 */ function modalCSS(element, root, _prefix) {
    const ic = root.interfaceColors;
    const active = ic.get("secondaryButton").toCSS();
    const text = ic.get("text").toCSS();
    const shadow = ic.get("alternativeBackground").toCSS(0.45);
    //const altbg = ic.get("alternativeBackground")!.toCSS();
    if (!rules) {
        const disposer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MultiDisposer"]([
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal", {
                "width": "100%",
                "height": "100%",
                "position": "absolute",
                "z-index": "100000",
                "top": "0",
                "left": "0"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-curtain", {
                "top": "0",
                "left": "0",
                "width": "100%",
                "height": "100%",
                "position": "absolute",
                "background": ic.get("background").toCSS(0.5),
                "z-index": "100"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-wrapper", {
                "top": "0",
                "left": "0",
                "width": "100%",
                "height": "100%",
                "position": "absolute",
                "text-align": "center",
                "white-space": "nowrap",
                "background": ic.get("background").toCSS(0.5),
                "z-index": "101"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-wrapper:before", {
                "content": "''",
                "display": "inline-block",
                "height": "100%",
                "vertical-align": "middle",
                "margin-right": "-0.25em"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-content", {
                "display": "inline-block",
                "padding": "1.2em",
                "vertical-align": "middle",
                "text-align": "left",
                "white-space": "normal",
                "background": ic.get("background").toCSS(),
                //"border": "1px solid " + ic.get("alternativeBackground")!.toCSS(),
                "border-radius": "4px",
                "-webkit-box-shadow": "0px 0px 36px 0px " + shadow,
                "box-shadow": "0px 0px 36px 0px " + shadow,
                "color": text
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-content h1", {
                "font-size": "1em",
                "margin": "0 0 0.5em 0"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-table", {
                "display": "table",
                "margin": "1em 0"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-table-row", {
                "display": "table-row"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-table-heading", {
                "display": "table-heading",
                "padding": "3px 10px 3px 0"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-table-cell", {
                "display": "table-cell",
                "padding": "3px 0 3px 0"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-table-cell > *", {
                "vertical-align": "middle"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select", {
                "border": "1px solid " + active,
                "border-radius": "4px",
                "padding": "3px 5px",
                "margin": "2px"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-input-narrow", {
                "width": "50px"
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-button", {
                "font-weight": "400",
                "color": ic.get("secondaryButtonText").toCSS(),
                "line-height": "1.5",
                "text-align": "center",
                "text-decoration": "none",
                "vertical-align": "middle",
                "cursor": "pointer",
                "padding": "0.2em 0.8em",
                "font-size": "1em",
                "border-radius": "0.25em",
                "margin": "0 0.25em 0 0",
                "border": "1px solid " + ic.get("secondaryButtonStroke").toCSS(),
                "background": ic.get("secondaryButton").toCSS()
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-button:hover", {
                "background": ic.get("secondaryButtonHover").toCSS()
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-button.am5-modal-primary", {
                "color": ic.get("primaryButtonText").toCSS(),
                "border": "1px solid " + ic.get("primaryButtonStroke").toCSS(),
                "background": ic.get("primaryButton").toCSS()
            }),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StyleRule"](element, ".am5-modal-button.am5-modal-primary:hover", {
                "background": ic.get("primaryButtonHover").toCSS()
            })
        ]);
        rules = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Disposer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CounterDisposer"](()=>{
            rules = undefined;
            disposer.dispose();
        });
    }
    return rules.increment();
}
class Modal extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    //protected _currentPass: number = 0;
    _afterNew() {
        // Applying themes because this will not have parents
        super._afterNewApplyThemes();
        // Defaults
        this._setRawDefault("deactivateRoot", true);
        // Load CSS
        modalCSS(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getShadowRoot(this._root.dom), this._root);
        // Create elements
        const container = document.createElement("div");
        container.className = "am5-modal";
        container.style.display = "none";
        this.root._inner.appendChild(container);
        this.setPrivate("container", container);
        const curtain = document.createElement("div");
        curtain.className = "am5-modal-curtain";
        container.appendChild(curtain);
        this.setPrivate("curtain", curtain);
        this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(curtain, "click", ()=>{
            this.cancel();
        }));
        const wrapper = document.createElement("div");
        wrapper.className = "am5-modal-wrapper";
        container.appendChild(wrapper);
        this.setPrivate("wrapper", wrapper);
        const content = document.createElement("div");
        content.className = "am5-modal-content";
        wrapper.appendChild(content);
        this.setPrivate("content", content);
        const html = this.get("content");
        if (html) {
            content.innerHTML = html;
        }
        // Close on ESC
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.supports("keyboardevents")) {
            this._disposers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.addEventListener(document, "keydown", (ev)=>{
                if (this.isOpen() && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.getEventKey(ev) == "Escape") {
                    this.cancel();
                }
            }));
        }
    }
    _beforeChanged() {
        super._beforeChanged();
        if (this.isDirty("content")) {
            this.getPrivate("content").innerHTML = this.get("content", "");
        }
    }
    /**
     * Returns `true` if modal is currently open.
     *
     * @return  Modal open?
     */ isOpen() {
        return this.getPrivate("container").style.display != "none";
    }
    /**
     * Opens modal.
     */ open() {
        this.getPrivate("container").style.display = "block";
        if (this.get("deactivateRoot")) {
            this.setTimeout(()=>{
                this._root._renderer.interactionsEnabled = false;
            }, 10);
        }
        this.events.dispatch("opened", {
            type: "opened",
            target: this
        });
    }
    /**
     * Closes modal.
     */ close() {
        this.getPrivate("container").style.display = "none";
        if (this.get("deactivateRoot")) {
            this._root._renderer.interactionsEnabled = true;
        }
        this.events.dispatch("closed", {
            type: "closed",
            target: this
        });
    }
    /**
     * Closes modal and invokes `cancelled` event.
     */ cancel() {
        this.getPrivate("container").style.display = "none";
        if (this.get("deactivateRoot")) {
            this._root._renderer.interactionsEnabled = true;
        }
        this.events.dispatch("cancelled", {
            type: "cancelled",
            target: this
        });
    }
    /**
     * Disposes modal.
     */ dispose() {
        super.dispose();
        const container = this.getPrivate("container");
        if (container.parentElement) {
            container.parentElement.removeChild(container);
        }
    }
}
Object.defineProperty(Modal, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Modal"
});
Object.defineProperty(Modal, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"].classNames.concat([
        Modal.className
    ])
}); //# sourceMappingURL=Modal.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/NumberFormatter.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "NumberFormatter": ()=>NumberFormatter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Type.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class NumberFormatter extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    _setDefaults() {
        // Defaults
        this._setDefault("negativeBase", 0);
        this._setDefault("numberFormat", "#,###.#####");
        this._setDefault("smallNumberThreshold", 1.00);
        const bns = "_big_number_suffix_";
        const sns = "_small_number_suffix_";
        const bs = "_byte_suffix_";
        this._setDefault("bigNumberPrefixes", [
            {
                "number": 1e+3,
                "suffix": this._t(bns + "3")
            },
            {
                "number": 1e+6,
                "suffix": this._t(bns + "6")
            },
            {
                "number": 1e+9,
                "suffix": this._t(bns + "9")
            },
            {
                "number": 1e+12,
                "suffix": this._t(bns + "12")
            },
            {
                "number": 1e+15,
                "suffix": this._t(bns + "15")
            },
            {
                "number": 1e+18,
                "suffix": this._t(bns + "18")
            },
            {
                "number": 1e+21,
                "suffix": this._t(bns + "21")
            },
            {
                "number": 1e+24,
                "suffix": this._t(bns + "24")
            }
        ]);
        this._setDefault("smallNumberPrefixes", [
            {
                "number": 1e-24,
                "suffix": this._t(sns + "24")
            },
            {
                "number": 1e-21,
                "suffix": this._t(sns + "21")
            },
            {
                "number": 1e-18,
                "suffix": this._t(sns + "18")
            },
            {
                "number": 1e-15,
                "suffix": this._t(sns + "15")
            },
            {
                "number": 1e-12,
                "suffix": this._t(sns + "12")
            },
            {
                "number": 1e-9,
                "suffix": this._t(sns + "9")
            },
            {
                "number": 1e-6,
                "suffix": this._t(sns + "6")
            },
            {
                "number": 1e-3,
                "suffix": this._t(sns + "3")
            }
        ]);
        this._setDefault("bytePrefixes", [
            {
                "number": 1,
                suffix: this._t(bs + "B")
            },
            {
                "number": 1024,
                suffix: this._t(bs + "KB")
            },
            {
                "number": 1048576,
                suffix: this._t(bs + "MB")
            },
            {
                "number": 1073741824,
                suffix: this._t(bs + "GB")
            },
            {
                "number": 1099511627776,
                suffix: this._t(bs + "TB")
            },
            {
                "number": 1125899906842624,
                suffix: this._t(bs + "PB")
            }
        ]);
        super._setDefaults();
    }
    _beforeChanged() {
        super._beforeChanged();
    }
    /**
     * Formats the number according to specific format.
     *
     * @param value   Value to format
     * @param format  Format to apply
     * @return Formatted number
     */ format(value, format, precision) {
        // no format passed in or "Number"
        if (format == null || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isString(format) && format.toLowerCase() === "number") {
            format = this.get("numberFormat", "");
        }
        // Init return value
        let formatted;
        // Cast to number just in case
        // TODO: maybe use better casting
        let source = Number(value);
        // Is it a built-in format or Intl.NumberFormatOptions
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isObject(format)) {
            try {
                if (this.get("intlLocales")) {
                    return new Intl.NumberFormat(this.get("intlLocales"), format).format(source);
                } else {
                    return new Intl.NumberFormat(undefined, format).format(source);
                }
            } catch (e) {
                return "Invalid";
            }
        } else {
            // Clean format
            format = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cleanFormat(format);
            // Get format info (it will also deal with parser caching)
            let info = this.parseFormat(format, this._root.language);
            // format and replace the number
            let details;
            if (source > this.get("negativeBase")) {
                details = info.positive;
            } else if (source < this.get("negativeBase")) {
                details = info.negative;
            } else {
                details = info.zero;
            }
            // Adjust precision
            if (precision != null && !details.mod) {
                details = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.copy(details);
                details.decimals.active = source == 0 ? 0 : precision;
            }
            // Format
            formatted = details.template.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER).join(this.applyFormat(source, details));
        }
        if (this.get("forceLTR") === true) {
            formatted = "‎" + formatted;
        }
        return formatted;
    }
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param format Format string, i.e. "#,###.00"
     * @param language Language
     * @ignore
     */ parseFormat(format, language) {
        // Check cache
        // TODO
        // let cached = this.getCache(format);
        // if (cached != null) {
        // 	return cached;
        // }
        const thousandSeparator = language.translateEmpty("_thousandSeparator");
        const decimalSeparator = language.translateEmpty("_decimalSeparator");
        // init format parse info holder
        let info = {
            "positive": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": thousandSeparator
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": decimalSeparator
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "negative": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": thousandSeparator
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": decimalSeparator
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "zero": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": thousandSeparator
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": decimalSeparator
                },
                "template": "",
                "source": "",
                "parsed": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2);
        // Split it up and deal with different formats
        let parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        } else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        } else {
            info.negative.source = parts[1];
        }
        // Parse each
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(info, (_part, item)=>{
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            // TODO
            // if (typeof this.getCache(item.source) !== "undefined") {
            // 	info[part] = this.getCache(item.source);
            // 	return;
            // }
            // Begin parsing
            let partFormat = item.source;
            // Just "Number"?
            if (partFormat.toLowerCase() === "number") {
                partFormat = this.get("numberFormat", "#,###.#####");
            }
            // Let TextFormatter split into chunks
            let chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$TextFormatter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TextFormatter"].chunk(partFormat, true);
            for(let i = 0; i < chunks.length; i++){
                let chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2, "|");
                if (chunk.type === "value") {
                    // Parse format
                    // Look for codes
                    let matches = chunk.text.match(/[#0.,]+[ ]?[abespABESP%!]?[abespABESP‰!]?/);
                    if (matches) {
                        if (matches === null || matches[0] === "") {
                            // no codes here - assume string
                            // nothing to do here
                            item.template += chunk.text;
                        } else {
                            // look for the format modifiers at the end
                            let mods = matches[0].match(/[abespABESP%‰!]{2}|[abespABESP%‰]{1}$/);
                            if (mods) {
                                item.mod = mods[0].toLowerCase();
                                item.modSpacing = matches[0].match(/[ ]{1}[abespABESP%‰!]{1}$/) ? true : false;
                            }
                            // break the format up
                            let a = matches[0].split(".");
                            // Deal with thousands
                            if (a[0] === "") {
                            // No directives for thousands
                            // Leave default settings (no formatting)
                            } else {
                                // Counts
                                item.thousands.active = (a[0].match(/0/g) || []).length;
                                item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                // Separator interval
                                let b = a[0].split(",");
                                if (b.length === 1) {
                                // No thousands separators
                                // Do nothing
                                } else {
                                    // Use length fo the last chunk as thousands length
                                    item.thousands.interval = (b.pop() || "").length;
                                    if (item.thousands.interval === 0) {
                                        item.thousands.interval = -1;
                                    }
                                }
                            }
                            // Deal with decimals
                            if (typeof a[1] === "undefined") {
                            // No directives for decimals
                            // Leave at defaults (no formatting)
                            } else {
                                // Counts
                                item.decimals.active = (a[1].match(/0/g) || []).length;
                                item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                            }
                            // Add special code to template
                            item.template += chunk.text.split(matches[0]).join(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER);
                        }
                    }
                } else {
                    // Quoted string - take it as it is
                    item.template += chunk.text;
                }
            }
            // Apply style formatting
            //item.template = getTextFormatter().format(item.template, this.outputFormat);
            // Save cache
            // TODO
            //this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        // TODO
        //this.setCache(format, info);
        return info;
    }
    /**
     * Applies parsed format to a numeric value.
     *
     * @param value    Value
     * @param details  Parsed format as returned by parseFormat()
     * @return Formatted number
     * @ignore
     */ applyFormat(value, details) {
        // Use absolute values
        let negative = value < 0;
        value = Math.abs(value);
        // Recalculate according to modifier
        let prefix = "", suffix = "";
        let mods = details.mod ? details.mod.split("") : [];
        if (mods.indexOf("b") !== -1) {
            let a = this.applyPrefix(value, this.get("bytePrefixes"), mods.indexOf("!") !== -1);
            value = a[0];
            prefix = a[1];
            suffix = a[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        } else if (mods.indexOf("a") !== -1) {
            let a = this.applyPrefix(value, value < this.get("smallNumberThreshold") ? this.get("smallNumberPrefixes") : this.get("bigNumberPrefixes"), mods.indexOf("!") !== -1);
            value = a[0];
            prefix = a[1];
            suffix = a[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        } else if (mods.indexOf("p") !== -1) {
            let ol = Math.min(value.toString().length + 2, 21);
            //value *= 100;
            value = parseFloat(value.toPrecision(ol));
            prefix = this._root.language.translate("_percentPrefix");
            suffix = this._root.language.translate("_percentSuffix");
            if (prefix == "" && suffix == "") {
                suffix = "%";
            }
        } else if (mods.indexOf("%") !== -1) {
            let ol = Math.min(value.toString().length + 2, 21);
            value *= 100;
            value = parseFloat(value.toPrecision(ol));
            suffix = "%";
        } else if (mods.indexOf("‰") !== -1) {
            let ol = Math.min(value.toString().length + 3, 21);
            value *= 1000;
            value = parseFloat(value.toPrecision(ol));
            suffix = "‰";
        }
        // Round to passive
        if (mods.indexOf("e") !== -1) {
            // convert the value to exponential
            let exp;
            if (details.decimals.passive >= 0) {
                exp = value.toExponential(details.decimals.passive).split("e");
            } else {
                exp = value.toExponential().split("e");
            }
            value = Number(exp[0]);
            suffix = "e" + exp[1];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        } else if (details.decimals.passive === 0) {
            value = Math.round(value);
        } else if (details.decimals.passive > 0) {
            let d = Math.pow(10, details.decimals.passive);
            value = Math.round(value * d) / d;
        }
        // Init return value
        let res = "";
        // Calc integer and decimal parts
        let a = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.numberToString(value).split(".");
        // Format integers
        let ints = a[0];
        // Pad integers to active length
        if (ints.length < details.thousands.active) {
            ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
        }
        // Insert thousands separators
        if (details.thousands.interval > 0) {
            let ip = [];
            let intsr = ints.split("").reverse().join("");
            for(let i = 0, len = ints.length; i <= len; i += details.thousands.interval){
                let c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                if (c !== "") {
                    ip.unshift(c);
                }
            }
            ints = ip.join(details.thousands.separator);
        }
        // Add integers
        res += ints;
        // Add decimals
        if (a.length === 1) {
            a.push("");
        }
        let decs = a[1];
        // Fill zeros?
        if (decs.length < details.decimals.active) {
            decs += Array(details.decimals.active - decs.length + 1).join("0");
        }
        if (decs !== "") {
            res += details.decimals.separator + decs;
        }
        // Can't have empty return value
        if (res === "") {
            res = "0";
        }
        // Add minus sign back
        if (value !== 0 && negative && mods.indexOf("s") === -1) {
            res = "-" + res;
        }
        // Add suffixes/prefixes
        if (prefix) {
            res = prefix + res;
        }
        if (suffix) {
            res += suffix;
        }
        return res;
    }
    applyPrefix(value, prefixes, force = false) {
        let newvalue = value;
        let prefix = "";
        let suffix = "";
        let applied = false;
        let k = 1;
        for(let i = 0, len = prefixes.length; i < len; i++){
            if (prefixes[i].number <= value) {
                if (prefixes[i].number === 0) {
                    newvalue = 0;
                } else {
                    newvalue = value / prefixes[i].number;
                    k = prefixes[i].number;
                }
                prefix = prefixes[i].prefix;
                suffix = prefixes[i].suffix;
                applied = true;
            }
        }
        if (!applied && force && prefixes.length && value != 0) {
            // Prefix was not applied. Use the first prefix.
            newvalue = value / prefixes[0].number;
            prefix = prefixes[0].prefix;
            suffix = prefixes[0].suffix;
            applied = true;
        }
        if (applied) {
            newvalue = parseFloat(newvalue.toPrecision(Math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
        }
        return [
            newvalue,
            prefix,
            suffix
        ];
    }
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Escaped text
     */ escape(text) {
        return text.replace("||", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2);
    }
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param text  Escaped text
     * @return Unescaped text
     */ unescape(text) {
        return text.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.PLACEHOLDER2, "|");
    }
} //# sourceMappingURL=NumberFormatter.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/ResizeSensor.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/** @ignore */ /** */ __turbopack_esm__({
    "ResizeSensor": ()=>ResizeSensor
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
/**
 * @ignore
 */ class Native {
    constructor(){
        Object.defineProperty(this, "_observer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_targets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        this._observer = new ResizeObserver((entries)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(entries, (entry)=>{
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._targets, (x)=>{
                    if (x.target === entry.target) {
                        x.callback();
                    }
                });
            });
        });
    }
    addTarget(target, callback) {
        this._observer.observe(target, {
            box: "border-box"
        });
        this._targets.push({
            target,
            callback
        });
    }
    removeTarget(target) {
        this._observer.unobserve(target);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keepIf(this._targets, (x)=>{
            return x.target !== target;
        });
    }
}
/**
 * @ignore
 */ class Raf {
    constructor(){
        Object.defineProperty(this, "_timer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_targets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    addTarget(target, callback) {
        if (this._timer === null) {
            let lastTime = null;
            const loop = ()=>{
                const currentTime = Date.now();
                if (lastTime === null || currentTime > lastTime + Raf.delay) {
                    lastTime = currentTime;
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(this._targets, (x)=>{
                        let newSize = x.target.getBoundingClientRect();
                        if (newSize.width !== x.size.width || newSize.height !== x.size.height) {
                            x.size = newSize;
                            x.callback();
                        }
                    });
                }
                if (this._targets.length === 0) {
                    this._timer = null;
                } else {
                    this._timer = requestAnimationFrame(loop);
                }
            };
            this._timer = requestAnimationFrame(loop);
        }
        // We start off with fake bounds so that sensor always kicks in
        let size = {
            width: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            x: 0,
            y: 0
        };
        this._targets.push({
            target,
            callback,
            size
        });
    }
    removeTarget(target) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.keepIf(this._targets, (x)=>{
            return x.target !== target;
        });
        if (this._targets.length === 0) {
            if (this._timer !== null) {
                cancelAnimationFrame(this._timer);
                this._timer = null;
            }
        }
    }
}
Object.defineProperty(Raf, "delay", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 200
});
/**
 * @ignore
 */ let observer = null;
/**
 * @ignore
 */ function makeSensor() {
    if (observer === null) {
        if (typeof ResizeObserver !== "undefined") {
            observer = new Native();
        } else {
            observer = new Raf();
        }
    }
    return observer;
}
class ResizeSensor {
    constructor(element, callback){
        Object.defineProperty(this, "_sensor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_element", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_listener", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this._sensor = makeSensor();
        this._element = element;
        // This is needed because we need to know when the window is zoomed
        this._listener = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.onZoom(callback);
        this._sensor.addTarget(element, callback);
    }
    isDisposed() {
        return this._disposed;
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            this._sensor.removeTarget(this._element);
            this._listener.dispose();
        }
    }
    get sensor() {
        return this._sensor;
    }
} //# sourceMappingURL=ResizeSensor.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Language.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Language": ()=>Language
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@amcharts/amcharts5/locales/en.js [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
class Language extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Entity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Entity"] {
    _setDefaults() {
        this.setPrivate("defaultLocale", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
        super._setDefaults();
    }
    /**
     * Returns a prompt translation.
     *
     * @param   prompt   Prompt to translate
     * @param   locale   Target locale
     * @param   ...rest  Parameters
     * @return           Translation
     */ translate(prompt, locale, ...rest) {
        // Get langauge
        if (!locale) {
            locale = this._root.locale || this.getPrivate("defaultLocale");
        }
        // Init translation
        let translation = prompt;
        let value = locale[prompt];
        // Try to look for the translation
        if (value === null) {
            translation = "";
        } else if (value != null) {
            // It might be an empty string
            if (value) {
                translation = value;
            }
        } else if (locale !== this.getPrivate("defaultLocale")) {
            // Try to look in default language
            return this.translate(prompt, this.getPrivate("defaultLocale"), ...rest);
        }
        // Replace %1, %2, etc params
        if (rest.length) {
            for(let len = rest.length, i = 0; i < len; ++i){
                translation = translation.split("%" + (i + 1)).join(rest[i]);
            }
        }
        // Return the translation
        return translation;
    }
    /**
     * Returns a prompt translation, including custom prompts.
     *
     * @param   prompt   Prompt to translate
     * @param   locale   Target locale
     * @param   ...rest  Parameters
     * @return           Translation
     */ translateAny(prompt, locale, ...rest) {
        return this.translate(prompt, locale, ...rest);
    }
    /**
     * Add a custom prompt to locale.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/locales/creating-translations/#Extending_locale_with_custom_prompts}
     * @param  prompt       Source prompt
     * @param  translation  Tanslation
     * @param  locale       Target locale
     */ setTranslationAny(prompt, translation, locale) {
        const localeTarget = locale || this._root.locale;
        localeTarget[prompt] = translation;
    }
    /**
     * Add a batch of custom prompts.
     *
     * @since 5.3.3
     * @see {@link https://www.amcharts.com/docs/v5/concepts/locales/creating-translations/#Extending_locale_with_custom_prompts}
     * @param  translations  Translations
     * @param  locale        Target locale
     */ setTranslationsAny(translations, locale) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.each(translations, (key, val)=>{
            this.setTranslationAny(key, val, locale);
        });
    }
    translateEmpty(prompt, locale, ...rest) {
        let translation = this.translate(prompt, locale, ...rest);
        return translation == prompt ? "" : translation;
    }
    translateFunc(prompt, locale) {
        if (this._root.locale[prompt]) {
            return this._root.locale[prompt];
        }
        // Try to look in default language
        if (locale !== this.getPrivate("defaultLocale")) {
            return this.translateFunc(prompt, this.getPrivate("defaultLocale"));
        }
        // Fail - return empty function
        return ()=>{
            return "";
        };
    }
    /**
     * Translates a btach of prompts.
     *
     * @param  list    Array of prompts to translate
     * @param  locale  Target locale
     * @return         Array of translations
     */ translateAll(list, locale) {
        // Translate all items in the list
        if (!this.isDefault()) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amcharts$2f$amcharts5$2f2e$internal$2f$core$2f$util$2f$Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.map(list, (x)=>this.translate(x, locale));
        } else {
            return list;
        }
    }
    /**
     * Returns `true` if the currently selected locale is a default locale.
     *
     * @return `true` if locale is default; `false` if it is not.
     */ isDefault() {
        return this.getPrivate("defaultLocale") === this._root.locale;
    }
} //# sourceMappingURL=Language.js.map

})()),
"[project]/node_modules/@amcharts/amcharts5/.internal/core/util/Net.js [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * A collection of network-related functions
 */ /**
 * Loads an external file via its URL.
 *
 * Please note that this is an asynchronous function.
 *
 * It will not return the result, but rather a `Promise`.
 *
 * You can use the `await` notion, or `then()`.
 *
 * ```TypeScript
 * // Using await
 * let response = await Net.load( "http://www.my.com/data.json" );
 * console.log( response.response );
 *
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
 *   console.log( response.response );
 * } );
 * ```
 * ```JavaScript
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
 *   console.log( response.response );
 * } );
 * ```
 *
 * @async
 * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info
 * @param url      URL for the file to load
 * @param target   A target element that is requesting the net load
 * @param options  Request options
 * @return Result (Promise)
 */ __turbopack_esm__({
    "load": ()=>load,
    "readBlob": ()=>readBlob
});
function load(url, target, options) {
    return new Promise((success, error)=>{
        // Is return type Blob?
        let isBlob = options != null && options.responseType == "blob";
        // Create request and set up handlers
        let xhr = new XMLHttpRequest();
        xhr.onload = ()=>{
            if (xhr.status === 200) {
                let response;
                let blob;
                if (isBlob) {
                    blob = xhr.response;
                    readBlob(blob).then((response)=>{
                        let output = {
                            xhr: xhr,
                            error: false,
                            response: response,
                            blob: blob,
                            type: xhr.getResponseHeader("Content-Type"),
                            target: target
                        };
                        success(output);
                    });
                    return;
                } else {
                    response = xhr.responseText || xhr.response;
                }
                let output = {
                    xhr: xhr,
                    error: false,
                    response: response,
                    blob: blob,
                    type: xhr.getResponseHeader("Content-Type"),
                    target: target
                };
                success(output);
            } else {
                error({
                    xhr: xhr,
                    error: true,
                    type: xhr.getResponseHeader("Content-Type"),
                    target: target
                });
            }
        };
        xhr.onerror = ()=>{
            error({
                xhr: xhr,
                error: true,
                type: xhr.getResponseHeader("Content-Type"),
                target: target
            });
        };
        // Open request
        xhr.open("GET", url, true);
        if (options && options.withCredentials) {
            xhr.withCredentials = true;
        }
        // Process options
        if (options != null) {
            if (options.requestHeaders != null) {
                for(let i = 0; i < options.requestHeaders.length; i++){
                    let header = options.requestHeaders[i];
                    xhr.setRequestHeader(header.key, header.value);
                }
            }
            if (options.responseType != null) {
                xhr.responseType = options.responseType;
            }
        }
        // Send request
        xhr.send();
    });
}
function readBlob(blob) {
    return new Promise((success, error)=>{
        const reader = new FileReader();
        reader.onload = (_event)=>{
            success(reader.result);
        };
        reader.onerror = (e)=>{
            error(e);
        };
        reader.readAsText(blob);
    });
} //# sourceMappingURL=Net.js.map

})()),

};

//# sourceMappingURL=node_modules_%40amcharts_amcharts5__internal_core_util_d317ae._.js.map